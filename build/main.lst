ARM GAS  /tmp/ccho3EKC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	UartHandle,64,4
  20              		.global	UartReady
  21              		.section	.bss.UartReady,"aw",%nobits
  24              	UartReady:
  25 0000 00       		.space	1
  26              		.comm	aTxBuffer,255,4
  27              		.comm	aRxBuffer,254,4
  28              		.section	.text.main,"ax",%progbits
  29              		.align	2
  30              		.global	main
  31              		.thumb
  32              		.thumb_func
  34              	main:
  35              	.LFB125:
  36              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****  * UART loop example with DMA.
   3:Src/main.c    ****  * Based on the UART_TwoBoards_ComDMA example from STM32Cube_FW_F4_V1.9.0.
   4:Src/main.c    ****  *
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * @file    UART/UART_TwoBoards_ComDMA/Src/main.c 
   7:Src/main.c    ****   * @author  MCD Application Team
   8:Src/main.c    ****   * @version V1.2.3
   9:Src/main.c    ****   * @date    09-October-2015 
  10:Src/main.c    ****   * @brief   This sample code shows how to use STM32F4xx UART HAL API to transmit 
  11:Src/main.c    ****   *          and receive a data buffer with a communication process based on
  12:Src/main.c    ****   *          DMA transfer. 
  13:Src/main.c    ****   *          The communication is done using 2 Boards.
  14:Src/main.c    ****   ******************************************************************************
  15:Src/main.c    ****   * @attention
  16:Src/main.c    ****   *
  17:Src/main.c    ****   * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  20:Src/main.c    ****   * are permitted provided that the following conditions are met:
  21:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  22:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  23:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  24:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
ARM GAS  /tmp/ccho3EKC.s 			page 2


  25:Src/main.c    ****   *      and/or other materials provided with the distribution.
  26:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  27:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  28:Src/main.c    ****   *      without specific prior written permission.
  29:Src/main.c    ****   *
  30:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  31:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  32:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  33:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  34:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  35:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  36:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  37:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  38:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  39:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  40:Src/main.c    ****   *
  41:Src/main.c    ****   ******************************************************************************
  42:Src/main.c    ****   */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  45:Src/main.c    **** #include "main.h"
  46:Src/main.c    **** 
  47:Src/main.c    **** /** @addtogroup STM32F4xx_HAL_Examples
  48:Src/main.c    ****   * @{
  49:Src/main.c    ****   */
  50:Src/main.c    **** 
  51:Src/main.c    **** /** @addtogroup UART_TwoBoards_ComDMA
  52:Src/main.c    ****   * @{
  53:Src/main.c    ****   */ 
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  56:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  57:Src/main.c    **** 
  58:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  59:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  60:Src/main.c    **** /* UART handler declaration */
  61:Src/main.c    **** UART_HandleTypeDef UartHandle;
  62:Src/main.c    **** __IO ITStatus UartReady = RESET;
  63:Src/main.c    **** 
  64:Src/main.c    **** /* Buffer used for transmission */
  65:Src/main.c    **** uint8_t aTxBuffer[255];
  66:Src/main.c    **** 
  67:Src/main.c    **** /* Buffer used for reception */
  68:Src/main.c    **** uint8_t aRxBuffer[RXBUFFERSIZE];
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  71:Src/main.c    **** static void SystemClock_Config(void);
  72:Src/main.c    **** static void Error_Handler(void);
  73:Src/main.c    **** static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength);
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private functions ---------------------------------------------------------*/
  76:Src/main.c    **** 
  77:Src/main.c    **** /**
  78:Src/main.c    ****   * @brief  Main program
  79:Src/main.c    ****   * @param  None
  80:Src/main.c    ****   * @retval None
  81:Src/main.c    ****   */
ARM GAS  /tmp/ccho3EKC.s 			page 3


  82:Src/main.c    **** int main(void)
  83:Src/main.c    **** {
  37              		.loc 1 83 0
  38              		.cfi_startproc
  39              		@ args = 0, pretend = 0, frame = 0
  40              		@ frame_needed = 1, uses_anonymous_args = 0
  41 0000 80B5     		push	{r7, lr}
  42              	.LCFI0:
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              	.LCFI1:
  48              		.cfi_def_cfa_register 7
  84:Src/main.c    **** 
  85:Src/main.c    ****   /* STM32F4xx HAL library initialization:
  86:Src/main.c    ****        - Configure the Flash prefetch, instruction and Data caches
  87:Src/main.c    ****        - Configure the Systick to generate an interrupt each 1 msec
  88:Src/main.c    ****        - Set NVIC Group Priority to 4
  89:Src/main.c    ****        - Global MSP (MCU Support Package) initialization
  90:Src/main.c    ****      */
  91:Src/main.c    ****   HAL_Init();
  49              		.loc 1 91 0
  50 0004 FFF7FEFF 		bl	HAL_Init
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* Configure LED3 and LED4 */
  94:Src/main.c    ****   BSP_LED_Init(LED3);
  51              		.loc 1 94 0
  52 0008 0020     		movs	r0, #0
  53 000a FFF7FEFF 		bl	BSP_LED_Init
  95:Src/main.c    ****   BSP_LED_Init(LED4);
  54              		.loc 1 95 0
  55 000e 0120     		movs	r0, #1
  56 0010 FFF7FEFF 		bl	BSP_LED_Init
  96:Src/main.c    ****   
  97:Src/main.c    ****   /* Configure the system clock to 180 MHz */
  98:Src/main.c    ****   SystemClock_Config();
  57              		.loc 1 98 0
  58 0014 FFF7FEFF 		bl	SystemClock_Config
  99:Src/main.c    **** 
 100:Src/main.c    ****   /*##-1- Configure the UART peripheral ######################################*/
 101:Src/main.c    ****   /* Put the USART peripheral in the Asynchronous mode (UART Mode) */
 102:Src/main.c    ****   /* UART1 configured as follow:
 103:Src/main.c    ****       - Word Length = 8 Bits
 104:Src/main.c    ****       - Stop Bit = One Stop bit
 105:Src/main.c    ****       - Parity = None
 106:Src/main.c    ****       - BaudRate = 9600 baud
 107:Src/main.c    ****       - Hardware flow control disabled (RTS and CTS signals) */
 108:Src/main.c    ****   UartHandle.Instance          = USARTx;
  59              		.loc 1 108 0
  60 0018 294B     		ldr	r3, .L10
  61 001a 2A4A     		ldr	r2, .L10+4
  62 001c 1A60     		str	r2, [r3]
 109:Src/main.c    ****   
 110:Src/main.c    ****   UartHandle.Init.BaudRate     = 9600;
  63              		.loc 1 110 0
  64 001e 284B     		ldr	r3, .L10
ARM GAS  /tmp/ccho3EKC.s 			page 4


  65 0020 4FF41652 		mov	r2, #9600
  66 0024 5A60     		str	r2, [r3, #4]
 111:Src/main.c    ****   UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
  67              		.loc 1 111 0
  68 0026 264B     		ldr	r3, .L10
  69 0028 0022     		movs	r2, #0
  70 002a 9A60     		str	r2, [r3, #8]
 112:Src/main.c    ****   UartHandle.Init.StopBits     = UART_STOPBITS_1;
  71              		.loc 1 112 0
  72 002c 244B     		ldr	r3, .L10
  73 002e 0022     		movs	r2, #0
  74 0030 DA60     		str	r2, [r3, #12]
 113:Src/main.c    ****   UartHandle.Init.Parity       = UART_PARITY_NONE;
  75              		.loc 1 113 0
  76 0032 234B     		ldr	r3, .L10
  77 0034 0022     		movs	r2, #0
  78 0036 1A61     		str	r2, [r3, #16]
 114:Src/main.c    ****   UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
  79              		.loc 1 114 0
  80 0038 214B     		ldr	r3, .L10
  81 003a 0022     		movs	r2, #0
  82 003c 9A61     		str	r2, [r3, #24]
 115:Src/main.c    ****   UartHandle.Init.Mode         = UART_MODE_TX_RX;
  83              		.loc 1 115 0
  84 003e 204B     		ldr	r3, .L10
  85 0040 0C22     		movs	r2, #12
  86 0042 5A61     		str	r2, [r3, #20]
 116:Src/main.c    ****   UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
  87              		.loc 1 116 0
  88 0044 1E4B     		ldr	r3, .L10
  89 0046 0022     		movs	r2, #0
  90 0048 DA61     		str	r2, [r3, #28]
 117:Src/main.c    ****     
 118:Src/main.c    ****   if(HAL_UART_Init(&UartHandle) != HAL_OK)
  91              		.loc 1 118 0
  92 004a 1D48     		ldr	r0, .L10
  93 004c FFF7FEFF 		bl	HAL_UART_Init
  94 0050 0346     		mov	r3, r0
  95 0052 002B     		cmp	r3, #0
  96 0054 01D0     		beq	.L2
 119:Src/main.c    ****   {
 120:Src/main.c    ****     Error_Handler();
  97              		.loc 1 120 0
  98 0056 FFF7FEFF 		bl	Error_Handler
  99              	.L2:
 121:Src/main.c    ****   }
 122:Src/main.c    **** 
 123:Src/main.c    ****   aTxBuffer[0] = 'A';
 100              		.loc 1 123 0
 101 005a 1B4B     		ldr	r3, .L10+8
 102 005c 4122     		movs	r2, #65
 103 005e 1A70     		strb	r2, [r3]
 104              	.L7:
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* Infinite loop */
 126:Src/main.c    ****   while (1)
 127:Src/main.c    ****   {
ARM GAS  /tmp/ccho3EKC.s 			page 5


 128:Src/main.c    ****     /* Toggle LED3 */
 129:Src/main.c    ****     BSP_LED_Toggle(LED3);
 105              		.loc 1 129 0
 106 0060 0020     		movs	r0, #0
 107 0062 FFF7FEFF 		bl	BSP_LED_Toggle
 130:Src/main.c    ****     
 131:Src/main.c    ****     /* Wait for 400ms */
 132:Src/main.c    ****     HAL_Delay(400);
 108              		.loc 1 132 0
 109 0066 4FF4C870 		mov	r0, #400
 110 006a FFF7FEFF 		bl	HAL_Delay
 133:Src/main.c    **** 
 134:Src/main.c    ****     // While the UART in reception process, user can transmit data through aTxBuffer
 135:Src/main.c    ****     if(HAL_UART_Transmit_DMA(&UartHandle, (uint8_t*)aTxBuffer, 1)!= HAL_OK)
 111              		.loc 1 135 0
 112 006e 1448     		ldr	r0, .L10
 113 0070 1549     		ldr	r1, .L10+8
 114 0072 0122     		movs	r2, #1
 115 0074 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 116 0078 0346     		mov	r3, r0
 117 007a 002B     		cmp	r3, #0
 118 007c 02D0     		beq	.L3
 136:Src/main.c    ****     {
 137:Src/main.c    ****       Error_Handler();
 119              		.loc 1 137 0
 120 007e FFF7FEFF 		bl	Error_Handler
 138:Src/main.c    ****     }
 139:Src/main.c    **** 
 140:Src/main.c    ****     // ##-5- Wait for the end of the transfer ###################################
 141:Src/main.c    ****     while (UartReady != SET)
 121              		.loc 1 141 0
 122 0082 FFE7     		b	.L8
 123              	.L3:
 124              	.L8:
 125 0084 00BF     		nop
 126              	.L4:
 127              		.loc 1 141 0 is_stmt 0 discriminator 1
 128 0086 114B     		ldr	r3, .L10+12
 129 0088 1B78     		ldrb	r3, [r3]
 130 008a DBB2     		uxtb	r3, r3
 131 008c 012B     		cmp	r3, #1
 132 008e FAD1     		bne	.L4
 142:Src/main.c    ****     {
 143:Src/main.c    ****     }
 144:Src/main.c    **** 
 145:Src/main.c    ****     // Reset transmission flag
 146:Src/main.c    ****     UartReady = RESET;
 133              		.loc 1 146 0 is_stmt 1
 134 0090 0E4B     		ldr	r3, .L10+12
 135 0092 0022     		movs	r2, #0
 136 0094 1A70     		strb	r2, [r3]
 147:Src/main.c    **** 
 148:Src/main.c    ****     //##-2- Put UART peripheral in reception process ###########################
 149:Src/main.c    ****     if(HAL_UART_Receive_DMA(&UartHandle, (uint8_t *)aRxBuffer, 1) != HAL_OK)
 137              		.loc 1 149 0
 138 0096 0A48     		ldr	r0, .L10
 139 0098 0D49     		ldr	r1, .L10+16
ARM GAS  /tmp/ccho3EKC.s 			page 6


 140 009a 0122     		movs	r2, #1
 141 009c FFF7FEFF 		bl	HAL_UART_Receive_DMA
 142 00a0 0346     		mov	r3, r0
 143 00a2 002B     		cmp	r3, #0
 144 00a4 02D0     		beq	.L5
 150:Src/main.c    ****     {
 151:Src/main.c    ****       Error_Handler();
 145              		.loc 1 151 0
 146 00a6 FFF7FEFF 		bl	Error_Handler
 152:Src/main.c    ****     }
 153:Src/main.c    **** 
 154:Src/main.c    ****     //##-3- Wait for the end of the transfer ###################################
 155:Src/main.c    ****     while (UartReady != SET)
 147              		.loc 1 155 0
 148 00aa FFE7     		b	.L9
 149              	.L5:
 150              	.L9:
 151 00ac 00BF     		nop
 152              	.L6:
 153              		.loc 1 155 0 is_stmt 0 discriminator 1
 154 00ae 074B     		ldr	r3, .L10+12
 155 00b0 1B78     		ldrb	r3, [r3]
 156 00b2 DBB2     		uxtb	r3, r3
 157 00b4 012B     		cmp	r3, #1
 158 00b6 FAD1     		bne	.L6
 156:Src/main.c    ****     {
 157:Src/main.c    ****     }
 158:Src/main.c    **** 
 159:Src/main.c    ****     // Reset transmission flag
 160:Src/main.c    ****     UartReady = RESET;
 159              		.loc 1 160 0 is_stmt 1
 160 00b8 044B     		ldr	r3, .L10+12
 161 00ba 0022     		movs	r2, #0
 162 00bc 1A70     		strb	r2, [r3]
 161:Src/main.c    **** 
 162:Src/main.c    ****   }
 163              		.loc 1 162 0
 164 00be CFE7     		b	.L7
 165              	.L11:
 166              		.align	2
 167              	.L10:
 168 00c0 00000000 		.word	UartHandle
 169 00c4 00100140 		.word	1073811456
 170 00c8 00000000 		.word	aTxBuffer
 171 00cc 00000000 		.word	UartReady
 172 00d0 00000000 		.word	aRxBuffer
 173              		.cfi_endproc
 174              	.LFE125:
 176              		.section	.text.SystemClock_Config,"ax",%progbits
 177              		.align	2
 178              		.thumb
 179              		.thumb_func
 181              	SystemClock_Config:
 182              	.LFB126:
 163:Src/main.c    **** }
 164:Src/main.c    **** 
 165:Src/main.c    **** /**
ARM GAS  /tmp/ccho3EKC.s 			page 7


 166:Src/main.c    ****   * @brief  System Clock Configuration
 167:Src/main.c    ****   *         The system Clock is configured as follow : 
 168:Src/main.c    ****   *            System Clock source            = PLL (HSE)
 169:Src/main.c    ****   *            SYSCLK(Hz)                     = 180000000
 170:Src/main.c    ****   *            HCLK(Hz)                       = 180000000
 171:Src/main.c    ****   *            AHB Prescaler                  = 1
 172:Src/main.c    ****   *            APB1 Prescaler                 = 4
 173:Src/main.c    ****   *            APB2 Prescaler                 = 2
 174:Src/main.c    ****   *            HSE Frequency(Hz)              = 8000000
 175:Src/main.c    ****   *            PLL_M                          = 8
 176:Src/main.c    ****   *            PLL_N                          = 360
 177:Src/main.c    ****   *            PLL_P                          = 2
 178:Src/main.c    ****   *            PLL_Q                          = 7
 179:Src/main.c    ****   *            VDD(V)                         = 3.3
 180:Src/main.c    ****   *            Main regulator output voltage  = Scale1 mode
 181:Src/main.c    ****   *            Flash Latency(WS)              = 5
 182:Src/main.c    ****   * @param  None
 183:Src/main.c    ****   * @retval None
 184:Src/main.c    ****   */
 185:Src/main.c    **** static void SystemClock_Config(void)
 186:Src/main.c    **** {
 183              		.loc 1 186 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 80
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187 0000 80B5     		push	{r7, lr}
 188              	.LCFI2:
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 7, -8
 191              		.cfi_offset 14, -4
 192 0002 94B0     		sub	sp, sp, #80
 193              	.LCFI3:
 194              		.cfi_def_cfa_offset 88
 195 0004 00AF     		add	r7, sp, #0
 196              	.LCFI4:
 197              		.cfi_def_cfa_register 7
 198              	.LBB2:
 187:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 188:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 189:Src/main.c    **** 
 190:Src/main.c    ****   /* Enable Power Control clock */
 191:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 199              		.loc 1 191 0
 200 0006 284B     		ldr	r3, .L15
 201 0008 274A     		ldr	r2, .L15
 202 000a 126C     		ldr	r2, [r2, #64]
 203 000c 42F08052 		orr	r2, r2, #268435456
 204 0010 1A64     		str	r2, [r3, #64]
 205 0012 254B     		ldr	r3, .L15
 206 0014 1B6C     		ldr	r3, [r3, #64]
 207 0016 03F08053 		and	r3, r3, #268435456
 208 001a BB60     		str	r3, [r7, #8]
 209 001c BB68     		ldr	r3, [r7, #8]
 210              	.LBE2:
 211              	.LBB3:
 192:Src/main.c    ****   
 193:Src/main.c    ****   /* The voltage scaling allows optimizing the power consumption when the device is 
ARM GAS  /tmp/ccho3EKC.s 			page 8


 194:Src/main.c    ****      clocked below the maximum system frequency, to update the voltage scaling value 
 195:Src/main.c    ****      regarding system frequency refer to product datasheet.  */
 196:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 212              		.loc 1 196 0
 213 001e 234B     		ldr	r3, .L15+4
 214 0020 224A     		ldr	r2, .L15+4
 215 0022 1268     		ldr	r2, [r2]
 216 0024 42F44042 		orr	r2, r2, #49152
 217 0028 1A60     		str	r2, [r3]
 218 002a 204B     		ldr	r3, .L15+4
 219 002c 1B68     		ldr	r3, [r3]
 220 002e 03F44043 		and	r3, r3, #49152
 221 0032 7B60     		str	r3, [r7, #4]
 222 0034 7B68     		ldr	r3, [r7, #4]
 223              	.LBE3:
 197:Src/main.c    ****   
 198:Src/main.c    ****   /* Enable HSE Oscillator and activate PLL with HSE as source */
 199:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 224              		.loc 1 199 0
 225 0036 0123     		movs	r3, #1
 226 0038 FB60     		str	r3, [r7, #12]
 200:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 227              		.loc 1 200 0
 228 003a 0123     		movs	r3, #1
 229 003c 3B61     		str	r3, [r7, #16]
 201:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 230              		.loc 1 201 0
 231 003e 0223     		movs	r3, #2
 232 0040 7B62     		str	r3, [r7, #36]
 202:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 233              		.loc 1 202 0
 234 0042 4FF48003 		mov	r3, #4194304
 235 0046 BB62     		str	r3, [r7, #40]
 203:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 236              		.loc 1 203 0
 237 0048 0823     		movs	r3, #8
 238 004a FB62     		str	r3, [r7, #44]
 204:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 360;
 239              		.loc 1 204 0
 240 004c 4FF4B473 		mov	r3, #360
 241 0050 3B63     		str	r3, [r7, #48]
 205:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 242              		.loc 1 205 0
 243 0052 0223     		movs	r3, #2
 244 0054 7B63     		str	r3, [r7, #52]
 206:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 245              		.loc 1 206 0
 246 0056 0723     		movs	r3, #7
 247 0058 BB63     		str	r3, [r7, #56]
 207:Src/main.c    ****   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 248              		.loc 1 207 0
 249 005a 07F10C03 		add	r3, r7, #12
 250 005e 1846     		mov	r0, r3
 251 0060 FFF7FEFF 		bl	HAL_RCC_OscConfig
 252 0064 0346     		mov	r3, r0
 253 0066 002B     		cmp	r3, #0
 254 0068 01D0     		beq	.L13
ARM GAS  /tmp/ccho3EKC.s 			page 9


 208:Src/main.c    ****   {
 209:Src/main.c    ****     Error_Handler();
 255              		.loc 1 209 0
 256 006a FFF7FEFF 		bl	Error_Handler
 257              	.L13:
 210:Src/main.c    ****   }
 211:Src/main.c    **** 
 212:Src/main.c    ****   /* Activate the Over-Drive mode */
 213:Src/main.c    ****   HAL_PWREx_EnableOverDrive();
 258              		.loc 1 213 0
 259 006e FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 214:Src/main.c    ****  
 215:Src/main.c    ****   /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
 216:Src/main.c    ****      clocks dividers */
 217:Src/main.c    ****   RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 260              		.loc 1 217 0
 261 0072 0F23     		movs	r3, #15
 262 0074 FB63     		str	r3, [r7, #60]
 218:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 263              		.loc 1 218 0
 264 0076 0223     		movs	r3, #2
 265 0078 3B64     		str	r3, [r7, #64]
 219:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 266              		.loc 1 219 0
 267 007a 0023     		movs	r3, #0
 268 007c 7B64     		str	r3, [r7, #68]
 220:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 269              		.loc 1 220 0
 270 007e 4FF4A053 		mov	r3, #5120
 271 0082 BB64     		str	r3, [r7, #72]
 221:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 272              		.loc 1 221 0
 273 0084 4FF48053 		mov	r3, #4096
 274 0088 FB64     		str	r3, [r7, #76]
 222:Src/main.c    ****   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 275              		.loc 1 222 0
 276 008a 07F13C03 		add	r3, r7, #60
 277 008e 1846     		mov	r0, r3
 278 0090 0521     		movs	r1, #5
 279 0092 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 280 0096 0346     		mov	r3, r0
 281 0098 002B     		cmp	r3, #0
 282 009a 01D0     		beq	.L12
 223:Src/main.c    ****   {
 224:Src/main.c    ****     Error_Handler();
 283              		.loc 1 224 0
 284 009c FFF7FEFF 		bl	Error_Handler
 285              	.L12:
 225:Src/main.c    ****   }
 226:Src/main.c    **** }
 286              		.loc 1 226 0
 287 00a0 5037     		adds	r7, r7, #80
 288 00a2 BD46     		mov	sp, r7
 289              		@ sp needed
 290 00a4 80BD     		pop	{r7, pc}
 291              	.L16:
 292 00a6 00BF     		.align	2
ARM GAS  /tmp/ccho3EKC.s 			page 10


 293              	.L15:
 294 00a8 00380240 		.word	1073887232
 295 00ac 00700040 		.word	1073770496
 296              		.cfi_endproc
 297              	.LFE126:
 299              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 300              		.align	2
 301              		.global	HAL_UART_TxCpltCallback
 302              		.thumb
 303              		.thumb_func
 305              	HAL_UART_TxCpltCallback:
 306              	.LFB127:
 227:Src/main.c    **** 
 228:Src/main.c    **** /**
 229:Src/main.c    ****   * @brief  Tx Transfer completed callback
 230:Src/main.c    ****   * @param  UartHandle: UART handle. 
 231:Src/main.c    ****   * @note   This example shows a simple way to report end of DMA Tx transfer, and 
 232:Src/main.c    ****   *         you can add your own implementation. 
 233:Src/main.c    ****   * @retval None
 234:Src/main.c    ****   */
 235:Src/main.c    **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
 236:Src/main.c    **** {
 307              		.loc 1 236 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 8
 310              		@ frame_needed = 1, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312 0000 80B4     		push	{r7}
 313              	.LCFI5:
 314              		.cfi_def_cfa_offset 4
 315              		.cfi_offset 7, -4
 316 0002 83B0     		sub	sp, sp, #12
 317              	.LCFI6:
 318              		.cfi_def_cfa_offset 16
 319 0004 00AF     		add	r7, sp, #0
 320              	.LCFI7:
 321              		.cfi_def_cfa_register 7
 322 0006 7860     		str	r0, [r7, #4]
 237:Src/main.c    ****   /* Set transmission flag: transfer complete*/
 238:Src/main.c    ****   UartReady = SET;
 323              		.loc 1 238 0
 324 0008 034B     		ldr	r3, .L18
 325 000a 0122     		movs	r2, #1
 326 000c 1A70     		strb	r2, [r3]
 239:Src/main.c    **** }
 327              		.loc 1 239 0
 328 000e 0C37     		adds	r7, r7, #12
 329 0010 BD46     		mov	sp, r7
 330              		@ sp needed
 331 0012 5DF8047B 		ldr	r7, [sp], #4
 332 0016 7047     		bx	lr
 333              	.L19:
 334              		.align	2
 335              	.L18:
 336 0018 00000000 		.word	UartReady
 337              		.cfi_endproc
 338              	.LFE127:
ARM GAS  /tmp/ccho3EKC.s 			page 11


 340              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 341              		.align	2
 342              		.global	HAL_UART_RxCpltCallback
 343              		.thumb
 344              		.thumb_func
 346              	HAL_UART_RxCpltCallback:
 347              	.LFB128:
 240:Src/main.c    **** 
 241:Src/main.c    **** /**
 242:Src/main.c    ****   * @brief  Rx Transfer completed callback
 243:Src/main.c    ****   * @param  UartHandle: UART handle
 244:Src/main.c    ****   * @note   This example shows a simple way to report end of DMA Rx transfer, and 
 245:Src/main.c    ****   *         you can add your own implementation.
 246:Src/main.c    ****   * @retval None
 247:Src/main.c    ****   */
 248:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
 249:Src/main.c    **** {
 348              		.loc 1 249 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 80B4     		push	{r7}
 354              	.LCFI8:
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
 357 0002 83B0     		sub	sp, sp, #12
 358              	.LCFI9:
 359              		.cfi_def_cfa_offset 16
 360 0004 00AF     		add	r7, sp, #0
 361              	.LCFI10:
 362              		.cfi_def_cfa_register 7
 363 0006 7860     		str	r0, [r7, #4]
 250:Src/main.c    ****   /* Set transmission flag: transfer complete*/
 251:Src/main.c    ****   UartReady = SET;
 364              		.loc 1 251 0
 365 0008 034B     		ldr	r3, .L21
 366 000a 0122     		movs	r2, #1
 367 000c 1A70     		strb	r2, [r3]
 252:Src/main.c    **** }
 368              		.loc 1 252 0
 369 000e 0C37     		adds	r7, r7, #12
 370 0010 BD46     		mov	sp, r7
 371              		@ sp needed
 372 0012 5DF8047B 		ldr	r7, [sp], #4
 373 0016 7047     		bx	lr
 374              	.L22:
 375              		.align	2
 376              	.L21:
 377 0018 00000000 		.word	UartReady
 378              		.cfi_endproc
 379              	.LFE128:
 381              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 382              		.align	2
 383              		.global	HAL_UART_ErrorCallback
 384              		.thumb
 385              		.thumb_func
ARM GAS  /tmp/ccho3EKC.s 			page 12


 387              	HAL_UART_ErrorCallback:
 388              	.LFB129:
 253:Src/main.c    **** 
 254:Src/main.c    **** /**
 255:Src/main.c    ****   * @brief  UART error callbacks
 256:Src/main.c    ****   * @param  UartHandle: UART handle
 257:Src/main.c    ****   * @note   This example shows a simple way to report transfer error, and you can
 258:Src/main.c    ****   *         add your own implementation.
 259:Src/main.c    ****   * @retval None
 260:Src/main.c    ****   */
 261:Src/main.c    **** void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
 262:Src/main.c    **** {
 389              		.loc 1 262 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 8
 392              		@ frame_needed = 1, uses_anonymous_args = 0
 393 0000 80B5     		push	{r7, lr}
 394              	.LCFI11:
 395              		.cfi_def_cfa_offset 8
 396              		.cfi_offset 7, -8
 397              		.cfi_offset 14, -4
 398 0002 82B0     		sub	sp, sp, #8
 399              	.LCFI12:
 400              		.cfi_def_cfa_offset 16
 401 0004 00AF     		add	r7, sp, #0
 402              	.LCFI13:
 403              		.cfi_def_cfa_register 7
 404 0006 7860     		str	r0, [r7, #4]
 263:Src/main.c    ****   /* Turn LED3 on: Transfer error in reception/transmission process */
 264:Src/main.c    ****   BSP_LED_On(LED3); 
 405              		.loc 1 264 0
 406 0008 0020     		movs	r0, #0
 407 000a FFF7FEFF 		bl	BSP_LED_On
 265:Src/main.c    **** }
 408              		.loc 1 265 0
 409 000e 0837     		adds	r7, r7, #8
 410 0010 BD46     		mov	sp, r7
 411              		@ sp needed
 412 0012 80BD     		pop	{r7, pc}
 413              		.cfi_endproc
 414              	.LFE129:
 416              		.section	.text.Error_Handler,"ax",%progbits
 417              		.align	2
 418              		.thumb
 419              		.thumb_func
 421              	Error_Handler:
 422              	.LFB130:
 266:Src/main.c    **** 
 267:Src/main.c    **** /**
 268:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 269:Src/main.c    ****   * @param  None
 270:Src/main.c    ****   * @retval None
 271:Src/main.c    ****   */
 272:Src/main.c    **** static void Error_Handler(void)
 273:Src/main.c    **** {
 423              		.loc 1 273 0
 424              		.cfi_startproc
ARM GAS  /tmp/ccho3EKC.s 			page 13


 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 1, uses_anonymous_args = 0
 427 0000 80B5     		push	{r7, lr}
 428              	.LCFI14:
 429              		.cfi_def_cfa_offset 8
 430              		.cfi_offset 7, -8
 431              		.cfi_offset 14, -4
 432 0002 00AF     		add	r7, sp, #0
 433              	.LCFI15:
 434              		.cfi_def_cfa_register 7
 274:Src/main.c    ****   /* Turn LED4 on */
 275:Src/main.c    ****   BSP_LED_On(LED4);
 435              		.loc 1 275 0
 436 0004 0120     		movs	r0, #1
 437 0006 FFF7FEFF 		bl	BSP_LED_On
 438              	.L25:
 276:Src/main.c    ****   while(1)
 277:Src/main.c    ****   {
 278:Src/main.c    ****   }
 439              		.loc 1 278 0 discriminator 1
 440 000a FEE7     		b	.L25
 441              		.cfi_endproc
 442              	.LFE130:
 444              		.text
 445              	.Letext0:
 446              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 447              		.file 3 "/usr/include/newlib/stdint.h"
 448              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 449              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 450              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 451              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 452              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 453              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 454              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 455              		.file 11 "Drivers/BSP/STM32F429I-Discovery/stm32f429i_discovery.h"
 456              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccho3EKC.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
                            *COM*:0000000000000040 UartHandle
     /tmp/ccho3EKC.s:24     .bss.UartReady:0000000000000000 UartReady
     /tmp/ccho3EKC.s:25     .bss.UartReady:0000000000000000 $d
                            *COM*:00000000000000ff aTxBuffer
                            *COM*:00000000000000fe aRxBuffer
     /tmp/ccho3EKC.s:29     .text.main:0000000000000000 $t
     /tmp/ccho3EKC.s:34     .text.main:0000000000000000 main
     /tmp/ccho3EKC.s:181    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccho3EKC.s:421    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccho3EKC.s:168    .text.main:00000000000000c0 $d
     /tmp/ccho3EKC.s:177    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccho3EKC.s:294    .text.SystemClock_Config:00000000000000a8 $d
     /tmp/ccho3EKC.s:300    .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccho3EKC.s:305    .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccho3EKC.s:336    .text.HAL_UART_TxCpltCallback:0000000000000018 $d
     /tmp/ccho3EKC.s:341    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccho3EKC.s:346    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccho3EKC.s:377    .text.HAL_UART_RxCpltCallback:0000000000000018 $d
     /tmp/ccho3EKC.s:382    .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccho3EKC.s:387    .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccho3EKC.s:417    .text.Error_Handler:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_Init
BSP_LED_Init
HAL_UART_Init
BSP_LED_Toggle
HAL_Delay
HAL_UART_Transmit_DMA
HAL_UART_Receive_DMA
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
BSP_LED_On
