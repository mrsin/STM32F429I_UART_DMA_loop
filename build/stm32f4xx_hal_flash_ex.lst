ARM GAS  /tmp/ccEjlq4p.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_hal_flash_ex.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_FLASHEx_Erase,"ax",%progbits
  20              		.align	2
  21              		.global	HAL_FLASHEx_Erase
  22              		.thumb
  23              		.thumb_func
  25              	HAL_FLASHEx_Erase:
  26              	.LFB125:
  27              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @file    stm32f4xx_hal_flash_ex.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @version V1.4.1
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @date    09-October-2015
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief   Extended FLASH HAL module driver.
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This file provides firmware functions to manage the following 
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          functionalities of the FLASH extension peripheral:
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           + Extended programming operations functions
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *  
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   @verbatim
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ==============================================================================
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                    ##### Flash Extension features #####
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ==============================================================================
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   [..] Comparing to other previous devices, the FLASH interface for STM32F427xx/437xx and 
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        STM32F429xx/439xx devices contains the following additional features 
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (+) Capacity up to 2 Mbyte with dual bank architecture supporting read-while-write
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            capability (RWW)
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (+) Dual bank memory organization       
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (+) PCROP protection for all banks
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****    
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                       ##### How to use this driver #####
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ==============================================================================
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   [..] This driver provides functions to configure and program the FLASH memory 
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        of all STM32F427xx/437xx, STM32F429xx/439xx, STM32F469xx/479xx and STM32F446xx 
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        devices. It includes
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       (#) FLASH Memory Erase functions: 
  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Lock and Unlock the FLASH interface using HAL_FLASH_Unlock() and 
ARM GAS  /tmp/ccEjlq4p.s 			page 2


  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                 HAL_FLASH_Lock() functions
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Erase function: Erase sector, erase all sectors
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) There are two modes of erase :
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****              (+++) Polling Mode using HAL_FLASHEx_Erase()
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****              (+++) Interrupt Mode using HAL_FLASHEx_Erase_IT()
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****              
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       (#) Option Bytes Programming functions: Use HAL_FLASHEx_OBProgram() to :
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Set/Reset the write protection
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Set the Read protection Level
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Set the BOR level
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****            (++) Program the user Option Bytes
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       (#) Advanced Option Bytes Programming functions: Use HAL_FLASHEx_AdvOBProgram() to :  
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (++) Extended space (bank 2) erase function
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (++) Full FLASH space (2 Mo) erase (bank 1 and bank 2)
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (++) Dual Boot activation
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (++) Write protection configuration for bank 2
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        (++) PCROP protection configuration and control for both banks
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   @endverbatim
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ******************************************************************************
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @attention
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * are permitted provided that the following conditions are met:
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      this list of conditions and the following disclaimer.
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      and/or other materials provided with the distribution.
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      may be used to endorse or promote products derived from this software
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      without specific prior written permission.
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   ******************************************************************************
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */ 
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Includes ------------------------------------------------------------------*/
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #include "stm32f4xx_hal.h"
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /** @addtogroup STM32F4xx_HAL_Driver
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @{
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /** @defgroup FLASHEx FLASHEx
ARM GAS  /tmp/ccEjlq4p.s 			page 3


  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief FLASH HAL Extension module driver
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @{
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #ifdef HAL_FLASH_MODULE_ENABLED
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Private typedef -----------------------------------------------------------*/
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Private define ------------------------------------------------------------*/
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Constants
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @{
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */    
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #define FLASH_TIMEOUT_VALUE       ((uint32_t)50000)/* 50 s */
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @}
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Private macro -------------------------------------------------------------*/
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Private variables ---------------------------------------------------------*/
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Variables
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @{
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */    
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** extern FLASH_ProcessTypeDef pFlash;
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @}
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Private function prototypes -----------------------------------------------*/
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /** @addtogroup FLASHEx_Private_Functions
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @{
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Option bytes control */
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static void               FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks);
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** void                      FLASH_FlushCaches(void);
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks);
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks);
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_RDP_LevelConfig(uint8_t Level);
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby);
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_BOR_LevelConfig(uint8_t Level);
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetUser(void);
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint16_t           FLASH_OB_GetWRP(void);
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetRDP(void);
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint8_t            FLASH_OB_GetBOR(void);
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) ||
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F446xx) 
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_EnablePCROP(uint32_t Sector);
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef  FLASH_OB_DisablePCROP(uint32_t Sector);
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx  */
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx)|| defined(STM32F439xx) || 
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t 
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t BootConfig);
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** extern HAL_StatusTypeDef         FLASH_WaitForLastOperation(uint32_t Timeout);
 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
ARM GAS  /tmp/ccEjlq4p.s 			page 4


 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @}
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /* Exported functions --------------------------------------------------------*/
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions FLASHEx Exported Functions
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @{
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /** @defgroup FLASHEx_Exported_Functions_Group1 Extended IO operation functions
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****  *  @brief   Extended IO operation functions 
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****  *
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** @verbatim   
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****  ===============================================================================
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                 ##### Extended programming operation functions #####
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****  ===============================================================================  
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     [..]
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     This subsection provides a set of functions allowing to manage the Extension FLASH 
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     programming operations.
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** @endverbatim
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @{
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Perform a mass erase or erase the specified FLASH memory sectors 
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param[in]  pEraseInit: pointer to an FLASH_EraseInitTypeDef structure that
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param[out]  SectorError: pointer to variable  that
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information on faulty sector in case of error 
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         (0xFFFFFFFF means that all the sectors have been correctly erased)
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
  28              		.loc 1 180 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44 0008 3960     		str	r1, [r7]
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
  45              		.loc 1 181 0
  46 000a 0123     		movs	r3, #1
  47 000c FB73     		strb	r3, [r7, #15]
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint32_t index = 0;
ARM GAS  /tmp/ccEjlq4p.s 			page 5


  48              		.loc 1 182 0
  49 000e 0023     		movs	r3, #0
  50 0010 BB60     		str	r3, [r7, #8]
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Process Locked */
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
  51              		.loc 1 185 0
  52 0012 324B     		ldr	r3, .L10
  53 0014 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
  54 0016 012B     		cmp	r3, #1
  55 0018 01D1     		bne	.L2
  56              		.loc 1 185 0 is_stmt 0 discriminator 1
  57 001a 0223     		movs	r3, #2
  58 001c 5AE0     		b	.L3
  59              	.L2:
  60              		.loc 1 185 0 discriminator 2
  61 001e 2F4B     		ldr	r3, .L10
  62 0020 0122     		movs	r2, #1
  63 0022 1A76     		strb	r2, [r3, #24]
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
  64              		.loc 1 191 0 is_stmt 1 discriminator 2
  65 0024 4CF25030 		movw	r0, #50000
  66 0028 FFF7FEFF 		bl	FLASH_WaitForLastOperation
  67 002c 0346     		mov	r3, r0
  68 002e FB73     		strb	r3, [r7, #15]
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
  69              		.loc 1 193 0 discriminator 2
  70 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  71 0032 002B     		cmp	r3, #0
  72 0034 4AD1     		bne	.L4
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Initialization of SectorError variable*/
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *SectorError = 0xFFFFFFFF;
  73              		.loc 1 196 0
  74 0036 3B68     		ldr	r3, [r7]
  75 0038 4FF0FF32 		mov	r2, #-1
  76 003c 1A60     		str	r2, [r3]
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
  77              		.loc 1 198 0
  78 003e 7B68     		ldr	r3, [r7, #4]
  79 0040 1B68     		ldr	r3, [r3]
  80 0042 012B     		cmp	r3, #1
  81 0044 17D1     		bne	.L5
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Mass erase to be done*/
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
  82              		.loc 1 201 0
  83 0046 7B68     		ldr	r3, [r7, #4]
  84 0048 1B69     		ldr	r3, [r3, #16]
  85 004a DAB2     		uxtb	r2, r3
ARM GAS  /tmp/ccEjlq4p.s 			page 6


  86 004c 7B68     		ldr	r3, [r7, #4]
  87 004e 5B68     		ldr	r3, [r3, #4]
  88 0050 1046     		mov	r0, r2
  89 0052 1946     		mov	r1, r3
  90 0054 FFF7FEFF 		bl	FLASH_MassErase
 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
  91              		.loc 1 204 0
  92 0058 4CF25030 		movw	r0, #50000
  93 005c FFF7FEFF 		bl	FLASH_WaitForLastOperation
  94 0060 0346     		mov	r3, r0
  95 0062 FB73     		strb	r3, [r7, #15]
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* if the erase operation is completed, disable the MER Bit */
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       FLASH->CR &= (~FLASH_MER_BIT);
  96              		.loc 1 207 0
  97 0064 1E4A     		ldr	r2, .L10+4
  98 0066 1E4B     		ldr	r3, .L10+4
  99 0068 1B69     		ldr	r3, [r3, #16]
 100 006a 23F40043 		bic	r3, r3, #32768
 101 006e 23F00403 		bic	r3, r3, #4
 102 0072 1361     		str	r3, [r2, #16]
 103 0074 28E0     		b	.L6
 104              	.L5:
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Check the parameters */
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Erase by sector by sector to be done*/
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++
 105              		.loc 1 215 0
 106 0076 7B68     		ldr	r3, [r7, #4]
 107 0078 9B68     		ldr	r3, [r3, #8]
 108 007a BB60     		str	r3, [r7, #8]
 109 007c 1CE0     		b	.L7
 110              	.L9:
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       {
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 111              		.loc 1 217 0
 112 007e 7B68     		ldr	r3, [r7, #4]
 113 0080 1B69     		ldr	r3, [r3, #16]
 114 0082 DBB2     		uxtb	r3, r3
 115 0084 B868     		ldr	r0, [r7, #8]
 116 0086 1946     		mov	r1, r3
 117 0088 FFF7FEFF 		bl	FLASH_Erase_Sector
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         /* Wait for last operation to be completed */
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 118              		.loc 1 220 0
 119 008c 4CF25030 		movw	r0, #50000
 120 0090 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 121 0094 0346     		mov	r3, r0
 122 0096 FB73     		strb	r3, [r7, #15]
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         
ARM GAS  /tmp/ccEjlq4p.s 			page 7


 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         /* If the erase operation is completed, disable the SER and SNB Bits */
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 123              		.loc 1 223 0
 124 0098 114B     		ldr	r3, .L10+4
 125 009a 114A     		ldr	r2, .L10+4
 126 009c 1269     		ldr	r2, [r2, #16]
 127 009e 22F0FA02 		bic	r2, r2, #250
 128 00a2 1A61     		str	r2, [r3, #16]
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         if(status != HAL_OK) 
 129              		.loc 1 225 0
 130 00a4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 131 00a6 002B     		cmp	r3, #0
 132 00a8 03D0     		beq	.L8
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         {
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           /* In case of error, stop erase procedure and return the faulty sector*/
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           *SectorError = index;
 133              		.loc 1 228 0
 134 00aa 3B68     		ldr	r3, [r7]
 135 00ac BA68     		ldr	r2, [r7, #8]
 136 00ae 1A60     		str	r2, [r3]
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           break;
 137              		.loc 1 229 0
 138 00b0 0AE0     		b	.L6
 139              	.L8:
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       {
 140              		.loc 1 215 0
 141 00b2 BB68     		ldr	r3, [r7, #8]
 142 00b4 0133     		adds	r3, r3, #1
 143 00b6 BB60     		str	r3, [r7, #8]
 144              	.L7:
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       {
 145              		.loc 1 215 0 is_stmt 0 discriminator 1
 146 00b8 7B68     		ldr	r3, [r7, #4]
 147 00ba DA68     		ldr	r2, [r3, #12]
 148 00bc 7B68     		ldr	r3, [r7, #4]
 149 00be 9B68     		ldr	r3, [r3, #8]
 150 00c0 1A44     		add	r2, r2, r3
 151 00c2 BB68     		ldr	r3, [r7, #8]
 152 00c4 9A42     		cmp	r2, r3
 153 00c6 DAD8     		bhi	.L9
 154              	.L6:
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         }
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       }
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Flush the caches to be sure of the data consistency */
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH_FlushCaches();    
 155              		.loc 1 234 0 is_stmt 1
 156 00c8 FFF7FEFF 		bl	FLASH_FlushCaches
 157              	.L4:
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Process Unlocked */
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 158              		.loc 1 238 0
 159 00cc 034B     		ldr	r3, .L10
 160 00ce 0022     		movs	r2, #0
ARM GAS  /tmp/ccEjlq4p.s 			page 8


 161 00d0 1A76     		strb	r2, [r3, #24]
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 162              		.loc 1 240 0
 163 00d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 164              	.L3:
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 165              		.loc 1 241 0
 166 00d4 1846     		mov	r0, r3
 167 00d6 1037     		adds	r7, r7, #16
 168 00d8 BD46     		mov	sp, r7
 169              		@ sp needed
 170 00da 80BD     		pop	{r7, pc}
 171              	.L11:
 172              		.align	2
 173              	.L10:
 174 00dc 00000000 		.word	pFlash
 175 00e0 003C0240 		.word	1073888256
 176              		.cfi_endproc
 177              	.LFE125:
 179              		.section	.text.HAL_FLASHEx_Erase_IT,"ax",%progbits
 180              		.align	2
 181              		.global	HAL_FLASHEx_Erase_IT
 182              		.thumb
 183              		.thumb_func
 185              	HAL_FLASHEx_Erase_IT:
 186              	.LFB126:
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Perform a mass erase or erase the specified FLASH memory sectors  with interrupt enable
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  pEraseInit: pointer to an FLASH_EraseInitTypeDef structure that
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the erasing.
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 187              		.loc 1 251 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 16
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 80B5     		push	{r7, lr}
 192              	.LCFI3:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 196 0002 84B0     		sub	sp, sp, #16
 197              	.LCFI4:
 198              		.cfi_def_cfa_offset 24
 199 0004 00AF     		add	r7, sp, #0
 200              	.LCFI5:
 201              		.cfi_def_cfa_register 7
 202 0006 7860     		str	r0, [r7, #4]
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 203              		.loc 1 252 0
 204 0008 0023     		movs	r3, #0
 205 000a FB73     		strb	r3, [r7, #15]
ARM GAS  /tmp/ccEjlq4p.s 			page 9


 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Process Locked */
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 206              		.loc 1 255 0
 207 000c 254B     		ldr	r3, .L17
 208 000e 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 209 0010 012B     		cmp	r3, #1
 210 0012 01D1     		bne	.L13
 211              		.loc 1 255 0 is_stmt 0 discriminator 1
 212 0014 0223     		movs	r3, #2
 213 0016 40E0     		b	.L14
 214              	.L13:
 215              		.loc 1 255 0 discriminator 2
 216 0018 224B     		ldr	r3, .L17
 217 001a 0122     		movs	r2, #1
 218 001c 1A76     		strb	r2, [r3, #24]
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Enable End of FLASH Operation interrupt */
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 219              		.loc 1 261 0 is_stmt 1 discriminator 2
 220 001e 224B     		ldr	r3, .L17+4
 221 0020 214A     		ldr	r2, .L17+4
 222 0022 1269     		ldr	r2, [r2, #16]
 223 0024 42F08072 		orr	r2, r2, #16777216
 224 0028 1A61     		str	r2, [r3, #16]
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Enable Error source interrupt */
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 225              		.loc 1 264 0 discriminator 2
 226 002a 1F4B     		ldr	r3, .L17+4
 227 002c 1E4A     		ldr	r2, .L17+4
 228 002e 1269     		ldr	r2, [r2, #16]
 229 0030 42F00072 		orr	r2, r2, #33554432
 230 0034 1A61     		str	r2, [r3, #16]
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Clear pending flags (if any) */  
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
 231              		.loc 1 267 0 discriminator 2
 232 0036 1C4B     		ldr	r3, .L17+4
 233 0038 F322     		movs	r2, #243
 234 003a DA60     		str	r2, [r3, #12]
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                          FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 235              		.loc 1 270 0 discriminator 2
 236 003c 7B68     		ldr	r3, [r7, #4]
 237 003e 1B68     		ldr	r3, [r3]
 238 0040 012B     		cmp	r3, #1
 239 0042 10D1     		bne	.L15
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Mass erase to be done*/
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 240              		.loc 1 273 0
 241 0044 174B     		ldr	r3, .L17
ARM GAS  /tmp/ccEjlq4p.s 			page 10


 242 0046 0222     		movs	r2, #2
 243 0048 1A70     		strb	r2, [r3]
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.Bank = pEraseInit->Banks;
 244              		.loc 1 274 0
 245 004a 7B68     		ldr	r3, [r7, #4]
 246 004c 5A68     		ldr	r2, [r3, #4]
 247 004e 154B     		ldr	r3, .L17
 248 0050 1A61     		str	r2, [r3, #16]
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 249              		.loc 1 275 0
 250 0052 7B68     		ldr	r3, [r7, #4]
 251 0054 1B69     		ldr	r3, [r3, #16]
 252 0056 DAB2     		uxtb	r2, r3
 253 0058 7B68     		ldr	r3, [r7, #4]
 254 005a 5B68     		ldr	r3, [r3, #4]
 255 005c 1046     		mov	r0, r2
 256 005e 1946     		mov	r1, r3
 257 0060 FFF7FEFF 		bl	FLASH_MassErase
 258 0064 18E0     		b	.L16
 259              	.L15:
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Erase by sector to be done*/
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Check the parameters */
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 260              		.loc 1 284 0
 261 0066 0F4B     		ldr	r3, .L17
 262 0068 0122     		movs	r2, #1
 263 006a 1A70     		strb	r2, [r3]
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 264              		.loc 1 285 0
 265 006c 7B68     		ldr	r3, [r7, #4]
 266 006e DA68     		ldr	r2, [r3, #12]
 267 0070 0C4B     		ldr	r3, .L17
 268 0072 5A60     		str	r2, [r3, #4]
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.Sector = pEraseInit->Sector;
 269              		.loc 1 286 0
 270 0074 7B68     		ldr	r3, [r7, #4]
 271 0076 9A68     		ldr	r2, [r3, #8]
 272 0078 0A4B     		ldr	r3, .L17
 273 007a DA60     		str	r2, [r3, #12]
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 274              		.loc 1 287 0
 275 007c 7B68     		ldr	r3, [r7, #4]
 276 007e 1B69     		ldr	r3, [r3, #16]
 277 0080 DAB2     		uxtb	r2, r3
 278 0082 084B     		ldr	r3, .L17
 279 0084 1A72     		strb	r2, [r3, #8]
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Erase 1st sector and wait for IT*/
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 280              		.loc 1 290 0
 281 0086 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccEjlq4p.s 			page 11


 282 0088 9A68     		ldr	r2, [r3, #8]
 283 008a 7B68     		ldr	r3, [r7, #4]
 284 008c 1B69     		ldr	r3, [r3, #16]
 285 008e DBB2     		uxtb	r3, r3
 286 0090 1046     		mov	r0, r2
 287 0092 1946     		mov	r1, r3
 288 0094 FFF7FEFF 		bl	FLASH_Erase_Sector
 289              	.L16:
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 290              		.loc 1 293 0
 291 0098 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 292              	.L14:
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 293              		.loc 1 294 0
 294 009a 1846     		mov	r0, r3
 295 009c 1037     		adds	r7, r7, #16
 296 009e BD46     		mov	sp, r7
 297              		@ sp needed
 298 00a0 80BD     		pop	{r7, pc}
 299              	.L18:
 300 00a2 00BF     		.align	2
 301              	.L17:
 302 00a4 00000000 		.word	pFlash
 303 00a8 003C0240 		.word	1073888256
 304              		.cfi_endproc
 305              	.LFE126:
 307              		.section	.text.HAL_FLASHEx_OBProgram,"ax",%progbits
 308              		.align	2
 309              		.global	HAL_FLASHEx_OBProgram
 310              		.thumb
 311              		.thumb_func
 313              	HAL_FLASHEx_OBProgram:
 314              	.LFB127:
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief   Program option bytes
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  pOBInit: pointer to an FLASH_OBInitStruct structure that
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 315              		.loc 1 304 0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 16
 318              		@ frame_needed = 1, uses_anonymous_args = 0
 319 0000 80B5     		push	{r7, lr}
 320              	.LCFI6:
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 7, -8
 323              		.cfi_offset 14, -4
 324 0002 84B0     		sub	sp, sp, #16
 325              	.LCFI7:
 326              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccEjlq4p.s 			page 12


 327 0004 00AF     		add	r7, sp, #0
 328              	.LCFI8:
 329              		.cfi_def_cfa_register 7
 330 0006 7860     		str	r0, [r7, #4]
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 331              		.loc 1 305 0
 332 0008 0123     		movs	r3, #1
 333 000a FB73     		strb	r3, [r7, #15]
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Process Locked */
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_LOCK(&pFlash);
 334              		.loc 1 308 0
 335 000c 334B     		ldr	r3, .L27
 336 000e 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 337 0010 012B     		cmp	r3, #1
 338 0012 01D1     		bne	.L20
 339              		.loc 1 308 0 is_stmt 0 discriminator 1
 340 0014 0223     		movs	r3, #2
 341 0016 5DE0     		b	.L21
 342              	.L20:
 343              		.loc 1 308 0 discriminator 2
 344 0018 304B     		ldr	r3, .L27
 345 001a 0122     		movs	r2, #1
 346 001c 1A76     		strb	r2, [r3, #24]
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Write protection configuration*/
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 347              		.loc 1 314 0 is_stmt 1 discriminator 2
 348 001e 7B68     		ldr	r3, [r7, #4]
 349 0020 1B68     		ldr	r3, [r3]
 350 0022 03F00103 		and	r3, r3, #1
 351 0026 002B     		cmp	r3, #0
 352 0028 18D0     		beq	.L22
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     assert_param(IS_WRPSTATE(pOBInit->WRPState));
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 353              		.loc 1 317 0
 354 002a 7B68     		ldr	r3, [r7, #4]
 355 002c 5B68     		ldr	r3, [r3, #4]
 356 002e 012B     		cmp	r3, #1
 357 0030 0AD1     		bne	.L23
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Enable of Write protection on the selected Sector*/
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 358              		.loc 1 320 0
 359 0032 7B68     		ldr	r3, [r7, #4]
 360 0034 9A68     		ldr	r2, [r3, #8]
 361 0036 7B68     		ldr	r3, [r7, #4]
 362 0038 DB68     		ldr	r3, [r3, #12]
 363 003a 1046     		mov	r0, r2
 364 003c 1946     		mov	r1, r3
 365 003e FFF7FEFF 		bl	FLASH_OB_EnableWRP
 366 0042 0346     		mov	r3, r0
 367 0044 FB73     		strb	r3, [r7, #15]
ARM GAS  /tmp/ccEjlq4p.s 			page 13


 368 0046 09E0     		b	.L22
 369              	.L23:
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Disable of Write protection on the selected Sector*/
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 370              		.loc 1 325 0
 371 0048 7B68     		ldr	r3, [r7, #4]
 372 004a 9A68     		ldr	r2, [r3, #8]
 373 004c 7B68     		ldr	r3, [r7, #4]
 374 004e DB68     		ldr	r3, [r3, #12]
 375 0050 1046     		mov	r0, r2
 376 0052 1946     		mov	r1, r3
 377 0054 FFF7FEFF 		bl	FLASH_OB_DisableWRP
 378 0058 0346     		mov	r3, r0
 379 005a FB73     		strb	r3, [r7, #15]
 380              	.L22:
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Read protection configuration*/
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 381              		.loc 1 330 0
 382 005c 7B68     		ldr	r3, [r7, #4]
 383 005e 1B68     		ldr	r3, [r3]
 384 0060 03F00203 		and	r3, r3, #2
 385 0064 002B     		cmp	r3, #0
 386 0066 07D0     		beq	.L24
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 387              		.loc 1 332 0
 388 0068 7B68     		ldr	r3, [r7, #4]
 389 006a 1B69     		ldr	r3, [r3, #16]
 390 006c DBB2     		uxtb	r3, r3
 391 006e 1846     		mov	r0, r3
 392 0070 FFF7FEFF 		bl	FLASH_OB_RDP_LevelConfig
 393 0074 0346     		mov	r3, r0
 394 0076 FB73     		strb	r3, [r7, #15]
 395              	.L24:
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*USER  configuration*/
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 396              		.loc 1 336 0
 397 0078 7B68     		ldr	r3, [r7, #4]
 398 007a 1B68     		ldr	r3, [r3]
 399 007c 03F00403 		and	r3, r3, #4
 400 0080 002B     		cmp	r3, #0
 401 0082 15D0     		beq	.L25
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 402              		.loc 1 338 0
 403 0084 7B68     		ldr	r3, [r7, #4]
 404 0086 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 405 0088 03F02003 		and	r3, r3, #32
 406 008c D9B2     		uxtb	r1, r3
ARM GAS  /tmp/ccEjlq4p.s 			page 14


 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                                      pOBInit->USERConfig&OB_STOP_NO_RST,
 407              		.loc 1 339 0
 408 008e 7B68     		ldr	r3, [r7, #4]
 409 0090 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                                      pOBInit->USERConfig&OB_STOP_NO_RST,
 410              		.loc 1 338 0
 411 0092 03F04003 		and	r3, r3, #64
 412 0096 DAB2     		uxtb	r2, r3
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                                      pOBInit->USERConfig&OB_STDBY_NO_RST);
 413              		.loc 1 340 0
 414 0098 7B68     		ldr	r3, [r7, #4]
 415 009a 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****                                      pOBInit->USERConfig&OB_STOP_NO_RST,
 416              		.loc 1 338 0
 417 009c 23F07F03 		bic	r3, r3, #127
 418 00a0 DBB2     		uxtb	r3, r3
 419 00a2 0846     		mov	r0, r1
 420 00a4 1146     		mov	r1, r2
 421 00a6 1A46     		mov	r2, r3
 422 00a8 FFF7FEFF 		bl	FLASH_OB_UserConfig
 423 00ac 0346     		mov	r3, r0
 424 00ae FB73     		strb	r3, [r7, #15]
 425              	.L25:
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*BOR Level  configuration*/
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 426              		.loc 1 344 0
 427 00b0 7B68     		ldr	r3, [r7, #4]
 428 00b2 1B68     		ldr	r3, [r3]
 429 00b4 03F00803 		and	r3, r3, #8
 430 00b8 002B     		cmp	r3, #0
 431 00ba 07D0     		beq	.L26
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 432              		.loc 1 346 0
 433 00bc 7B68     		ldr	r3, [r7, #4]
 434 00be 5B69     		ldr	r3, [r3, #20]
 435 00c0 DBB2     		uxtb	r3, r3
 436 00c2 1846     		mov	r0, r3
 437 00c4 FFF7FEFF 		bl	FLASH_OB_BOR_LevelConfig
 438 00c8 0346     		mov	r3, r0
 439 00ca FB73     		strb	r3, [r7, #15]
 440              	.L26:
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Process Unlocked */
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   __HAL_UNLOCK(&pFlash);
 441              		.loc 1 350 0
 442 00cc 034B     		ldr	r3, .L27
 443 00ce 0022     		movs	r2, #0
 444 00d0 1A76     		strb	r2, [r3, #24]
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 445              		.loc 1 352 0
 446 00d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 447              	.L21:
ARM GAS  /tmp/ccEjlq4p.s 			page 15


 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 448              		.loc 1 353 0
 449 00d4 1846     		mov	r0, r3
 450 00d6 1037     		adds	r7, r7, #16
 451 00d8 BD46     		mov	sp, r7
 452              		@ sp needed
 453 00da 80BD     		pop	{r7, pc}
 454              	.L28:
 455              		.align	2
 456              	.L27:
 457 00dc 00000000 		.word	pFlash
 458              		.cfi_endproc
 459              	.LFE127:
 461              		.section	.text.FLASH_FlushCaches,"ax",%progbits
 462              		.align	2
 463              		.global	FLASH_FlushCaches
 464              		.thumb
 465              		.thumb_func
 467              	FLASH_FlushCaches:
 468              	.LFB128:
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Flush the instruction and data caches
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** void FLASH_FlushCaches(void)
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 469              		.loc 1 360 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 1, uses_anonymous_args = 0
 473              		@ link register save eliminated.
 474 0000 80B4     		push	{r7}
 475              	.LCFI9:
 476              		.cfi_def_cfa_offset 4
 477              		.cfi_offset 7, -4
 478 0002 00AF     		add	r7, sp, #0
 479              	.LCFI10:
 480              		.cfi_def_cfa_register 7
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Flush instruction cache  */
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN))
 481              		.loc 1 362 0
 482 0004 1F4B     		ldr	r3, .L32
 483 0006 1B68     		ldr	r3, [r3]
 484 0008 03F40073 		and	r3, r3, #512
 485 000c 002B     		cmp	r3, #0
 486 000e 17D0     		beq	.L30
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Disable instruction cache  */
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 487              		.loc 1 365 0
 488 0010 1C4B     		ldr	r3, .L32
 489 0012 1C4A     		ldr	r2, .L32
 490 0014 1268     		ldr	r2, [r2]
 491 0016 22F40072 		bic	r2, r2, #512
 492 001a 1A60     		str	r2, [r3]
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Reset instruction cache */
ARM GAS  /tmp/ccEjlq4p.s 			page 16


 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 493              		.loc 1 367 0
 494 001c 194B     		ldr	r3, .L32
 495 001e 194A     		ldr	r2, .L32
 496 0020 1268     		ldr	r2, [r2]
 497 0022 42F40062 		orr	r2, r2, #2048
 498 0026 1A60     		str	r2, [r3]
 499 0028 164B     		ldr	r3, .L32
 500 002a 164A     		ldr	r2, .L32
 501 002c 1268     		ldr	r2, [r2]
 502 002e 22F40062 		bic	r2, r2, #2048
 503 0032 1A60     		str	r2, [r3]
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Enable instruction cache */
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 504              		.loc 1 369 0
 505 0034 134B     		ldr	r3, .L32
 506 0036 134A     		ldr	r2, .L32
 507 0038 1268     		ldr	r2, [r2]
 508 003a 42F40072 		orr	r2, r2, #512
 509 003e 1A60     		str	r2, [r3]
 510              	.L30:
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Flush data cache */
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN))
 511              		.loc 1 373 0
 512 0040 104B     		ldr	r3, .L32
 513 0042 1B68     		ldr	r3, [r3]
 514 0044 03F48063 		and	r3, r3, #1024
 515 0048 002B     		cmp	r3, #0
 516 004a 17D0     		beq	.L29
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Disable data cache  */
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     __HAL_FLASH_DATA_CACHE_DISABLE();
 517              		.loc 1 376 0
 518 004c 0D4B     		ldr	r3, .L32
 519 004e 0D4A     		ldr	r2, .L32
 520 0050 1268     		ldr	r2, [r2]
 521 0052 22F48062 		bic	r2, r2, #1024
 522 0056 1A60     		str	r2, [r3]
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Reset data cache */
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     __HAL_FLASH_DATA_CACHE_RESET();
 523              		.loc 1 378 0
 524 0058 0A4B     		ldr	r3, .L32
 525 005a 0A4A     		ldr	r2, .L32
 526 005c 1268     		ldr	r2, [r2]
 527 005e 42F48052 		orr	r2, r2, #4096
 528 0062 1A60     		str	r2, [r3]
 529 0064 074B     		ldr	r3, .L32
 530 0066 074A     		ldr	r2, .L32
 531 0068 1268     		ldr	r2, [r2]
 532 006a 22F48052 		bic	r2, r2, #4096
 533 006e 1A60     		str	r2, [r3]
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Enable data cache */
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     __HAL_FLASH_DATA_CACHE_ENABLE();
 534              		.loc 1 380 0
 535 0070 044B     		ldr	r3, .L32
ARM GAS  /tmp/ccEjlq4p.s 			page 17


 536 0072 044A     		ldr	r2, .L32
 537 0074 1268     		ldr	r2, [r2]
 538 0076 42F48062 		orr	r2, r2, #1024
 539 007a 1A60     		str	r2, [r3]
 540              	.L29:
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 541              		.loc 1 382 0
 542 007c BD46     		mov	sp, r7
 543              		@ sp needed
 544 007e 5DF8047B 		ldr	r7, [sp], #4
 545 0082 7047     		bx	lr
 546              	.L33:
 547              		.align	2
 548              	.L32:
 549 0084 003C0240 		.word	1073888256
 550              		.cfi_endproc
 551              	.LFE128:
 553              		.section	.text.HAL_FLASHEx_OBGetConfig,"ax",%progbits
 554              		.align	2
 555              		.global	HAL_FLASHEx_OBGetConfig
 556              		.thumb
 557              		.thumb_func
 559              	HAL_FLASHEx_OBGetConfig:
 560              	.LFB129:
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief   Get the Option byte configuration
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  pOBInit: pointer to an FLASH_OBInitStruct structure that
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 561              		.loc 1 392 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 8
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565 0000 80B5     		push	{r7, lr}
 566              	.LCFI11:
 567              		.cfi_def_cfa_offset 8
 568              		.cfi_offset 7, -8
 569              		.cfi_offset 14, -4
 570 0002 82B0     		sub	sp, sp, #8
 571              	.LCFI12:
 572              		.cfi_def_cfa_offset 16
 573 0004 00AF     		add	r7, sp, #0
 574              	.LCFI13:
 575              		.cfi_def_cfa_register 7
 576 0006 7860     		str	r0, [r7, #4]
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 577              		.loc 1 393 0
 578 0008 7B68     		ldr	r3, [r7, #4]
 579 000a 0F22     		movs	r2, #15
 580 000c 1A60     		str	r2, [r3]
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
ARM GAS  /tmp/ccEjlq4p.s 			page 18


 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get WRP*/
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 581              		.loc 1 396 0
 582 000e FFF7FEFF 		bl	FLASH_OB_GetWRP
 583 0012 0346     		mov	r3, r0
 584 0014 1A46     		mov	r2, r3
 585 0016 7B68     		ldr	r3, [r7, #4]
 586 0018 9A60     		str	r2, [r3, #8]
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get RDP Level*/
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 587              		.loc 1 399 0
 588 001a FFF7FEFF 		bl	FLASH_OB_GetRDP
 589 001e 0346     		mov	r3, r0
 590 0020 1A46     		mov	r2, r3
 591 0022 7B68     		ldr	r3, [r7, #4]
 592 0024 1A61     		str	r2, [r3, #16]
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get USER*/
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 593              		.loc 1 402 0
 594 0026 FFF7FEFF 		bl	FLASH_OB_GetUser
 595 002a 0346     		mov	r3, r0
 596 002c 1A46     		mov	r2, r3
 597 002e 7B68     		ldr	r3, [r7, #4]
 598 0030 1A76     		strb	r2, [r3, #24]
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get BOR Level*/
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 599              		.loc 1 405 0
 600 0032 FFF7FEFF 		bl	FLASH_OB_GetBOR
 601 0036 0346     		mov	r3, r0
 602 0038 1A46     		mov	r2, r3
 603 003a 7B68     		ldr	r3, [r7, #4]
 604 003c 5A61     		str	r2, [r3, #20]
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 605              		.loc 1 406 0
 606 003e 0837     		adds	r7, r7, #8
 607 0040 BD46     		mov	sp, r7
 608              		@ sp needed
 609 0042 80BD     		pop	{r7, pc}
 610              		.cfi_endproc
 611              	.LFE129:
 613              		.section	.text.HAL_FLASHEx_AdvOBProgram,"ax",%progbits
 614              		.align	2
 615              		.global	HAL_FLASHEx_AdvOBProgram
 616              		.thumb
 617              		.thumb_func
 619              	HAL_FLASHEx_AdvOBProgram:
 620              	.LFB130:
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) ||
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) ||
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F410Rx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F469xx) ||
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F479xx) 
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief   Program option bytes
ARM GAS  /tmp/ccEjlq4p.s 			page 19


 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  pAdvOBInit: pointer to an FLASH_AdvOBProgramInitTypeDef structure that
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram (FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 621              		.loc 1 420 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 16
 624              		@ frame_needed = 1, uses_anonymous_args = 0
 625 0000 80B5     		push	{r7, lr}
 626              	.LCFI14:
 627              		.cfi_def_cfa_offset 8
 628              		.cfi_offset 7, -8
 629              		.cfi_offset 14, -4
 630 0002 84B0     		sub	sp, sp, #16
 631              	.LCFI15:
 632              		.cfi_def_cfa_offset 24
 633 0004 00AF     		add	r7, sp, #0
 634              	.LCFI16:
 635              		.cfi_def_cfa_register 7
 636 0006 7860     		str	r0, [r7, #4]
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 637              		.loc 1 421 0
 638 0008 0123     		movs	r3, #1
 639 000a FB73     		strb	r3, [r7, #15]
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OBEX(pAdvOBInit->OptionType));
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Program PCROP option byte*/
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(((pAdvOBInit->OptionType) & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
 640              		.loc 1 427 0
 641 000c 7B68     		ldr	r3, [r7, #4]
 642 000e 1B68     		ldr	r3, [r3]
 643 0010 03F00103 		and	r3, r3, #1
 644 0014 002B     		cmp	r3, #0
 645 0016 22D0     		beq	.L36
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Check the parameters */
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
 646              		.loc 1 431 0
 647 0018 7B68     		ldr	r3, [r7, #4]
 648 001a 5B68     		ldr	r3, [r3, #4]
 649 001c 012B     		cmp	r3, #1
 650 001e 0FD1     		bne	.L37
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Enable of Write protection on the selected Sector*/
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) ||
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F411xE) || defined(STM32F446xx) 
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_EnablePCROP(pAdvOBInit->Sectors);
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_EnablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit-
 651              		.loc 1 438 0
 652 0020 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccEjlq4p.s 			page 20


 653 0022 9B89     		ldrh	r3, [r3, #12]
 654 0024 1946     		mov	r1, r3
 655 0026 7B68     		ldr	r3, [r7, #4]
 656 0028 DB89     		ldrh	r3, [r3, #14]
 657 002a 1A46     		mov	r2, r3
 658 002c 7B68     		ldr	r3, [r7, #4]
 659 002e 9B68     		ldr	r3, [r3, #8]
 660 0030 0846     		mov	r0, r1
 661 0032 1146     		mov	r1, r2
 662 0034 1A46     		mov	r2, r3
 663 0036 FFF7FEFF 		bl	FLASH_OB_EnablePCROP
 664 003a 0346     		mov	r3, r0
 665 003c FB73     		strb	r3, [r7, #15]
 666 003e 0EE0     		b	.L36
 667              	.L37:
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx  */
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Disable of Write protection on the selected Sector*/
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) ||
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F411xE) || defined(STM32F446xx)  
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_DisablePCROP(pAdvOBInit->Sectors);
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #else /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_OB_DisablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit
 668              		.loc 1 448 0
 669 0040 7B68     		ldr	r3, [r7, #4]
 670 0042 9B89     		ldrh	r3, [r3, #12]
 671 0044 1946     		mov	r1, r3
 672 0046 7B68     		ldr	r3, [r7, #4]
 673 0048 DB89     		ldrh	r3, [r3, #14]
 674 004a 1A46     		mov	r2, r3
 675 004c 7B68     		ldr	r3, [r7, #4]
 676 004e 9B68     		ldr	r3, [r3, #8]
 677 0050 0846     		mov	r0, r1
 678 0052 1146     		mov	r1, r2
 679 0054 1A46     		mov	r2, r3
 680 0056 FFF7FEFF 		bl	FLASH_OB_DisablePCROP
 681 005a 0346     		mov	r3, r0
 682 005c FB73     		strb	r3, [r7, #15]
 683              	.L36:
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx  */
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****    
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) ||
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Program BOOT config option byte*/
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(((pAdvOBInit->OptionType) & OPTIONBYTE_BOOTCONFIG) == OPTIONBYTE_BOOTCONFIG)
 684              		.loc 1 455 0
 685 005e 7B68     		ldr	r3, [r7, #4]
 686 0060 1B68     		ldr	r3, [r3]
 687 0062 03F00203 		and	r3, r3, #2
 688 0066 002B     		cmp	r3, #0
 689 0068 06D0     		beq	.L38
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
 690              		.loc 1 457 0
ARM GAS  /tmp/ccEjlq4p.s 			page 21


 691 006a 7B68     		ldr	r3, [r7, #4]
 692 006c 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 693 006e 1846     		mov	r0, r3
 694 0070 FFF7FEFF 		bl	FLASH_OB_BootConfig
 695 0074 0346     		mov	r3, r0
 696 0076 FB73     		strb	r3, [r7, #15]
 697              	.L38:
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 698              		.loc 1 461 0
 699 0078 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 700              		.loc 1 462 0
 701 007a 1846     		mov	r0, r3
 702 007c 1037     		adds	r7, r7, #16
 703 007e BD46     		mov	sp, r7
 704              		@ sp needed
 705 0080 80BD     		pop	{r7, pc}
 706              		.cfi_endproc
 707              	.LFE130:
 709 0082 00BF     		.section	.text.HAL_FLASHEx_AdvOBGetConfig,"ax",%progbits
 710              		.align	2
 711              		.global	HAL_FLASHEx_AdvOBGetConfig
 712              		.thumb
 713              		.thumb_func
 715              	HAL_FLASHEx_AdvOBGetConfig:
 716              	.LFB131:
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief   Get the OBEX byte configuration
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  pAdvOBInit: pointer to an FLASH_AdvOBProgramInitTypeDef structure that
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         contains the configuration information for the programming.
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 717              		.loc 1 472 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 8
 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721              		@ link register save eliminated.
 722 0000 80B4     		push	{r7}
 723              	.LCFI17:
 724              		.cfi_def_cfa_offset 4
 725              		.cfi_offset 7, -4
 726 0002 83B0     		sub	sp, sp, #12
 727              	.LCFI18:
 728              		.cfi_def_cfa_offset 16
 729 0004 00AF     		add	r7, sp, #0
 730              	.LCFI19:
 731              		.cfi_def_cfa_register 7
 732 0006 7860     		str	r0, [r7, #4]
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) ||
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F411xE) || defined(STM32F446xx) 
ARM GAS  /tmp/ccEjlq4p.s 			page 22


 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get Sector*/
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get Sector for Bank1*/
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pAdvOBInit->SectorsBank1 = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 733              		.loc 1 479 0
 734 0008 094B     		ldr	r3, .L41
 735 000a 1B88     		ldrh	r3, [r3]	@ movhi
 736 000c 9AB2     		uxth	r2, r3
 737 000e 7B68     		ldr	r3, [r7, #4]
 738 0010 9A81     		strh	r2, [r3, #12]	@ movhi
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get Sector for Bank2*/
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pAdvOBInit->SectorsBank2 = (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 739              		.loc 1 482 0
 740 0012 084B     		ldr	r3, .L41+4
 741 0014 1B88     		ldrh	r3, [r3]	@ movhi
 742 0016 9AB2     		uxth	r2, r3
 743 0018 7B68     		ldr	r3, [r7, #4]
 744 001a DA81     		strh	r2, [r3, #14]	@ movhi
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /*Get Boot config OB*/
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   pAdvOBInit->BootConfig = *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS;
 745              		.loc 1 485 0
 746 001c 064B     		ldr	r3, .L41+8
 747 001e 1B78     		ldrb	r3, [r3]
 748 0020 DAB2     		uxtb	r2, r3
 749 0022 7B68     		ldr	r3, [r7, #4]
 750 0024 1A74     		strb	r2, [r3, #16]
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx  */
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 751              		.loc 1 487 0
 752 0026 0C37     		adds	r7, r7, #12
 753 0028 BD46     		mov	sp, r7
 754              		@ sp needed
 755 002a 5DF8047B 		ldr	r7, [sp], #4
 756 002e 7047     		bx	lr
 757              	.L42:
 758              		.align	2
 759              	.L41:
 760 0030 163C0240 		.word	1073888278
 761 0034 1A3C0240 		.word	1073888282
 762 0038 143C0240 		.word	1073888276
 763              		.cfi_endproc
 764              	.LFE131:
 766              		.section	.text.HAL_FLASHEx_OB_SelectPCROP,"ax",%progbits
 767              		.align	2
 768              		.global	HAL_FLASHEx_OB_SelectPCROP
 769              		.thumb
 770              		.thumb_func
 772              	HAL_FLASHEx_OB_SelectPCROP:
 773              	.LFB132:
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Select the Protection Mode 
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   After PCROP activated Option Byte modification NOT POSSIBLE! excepted 
ARM GAS  /tmp/ccEjlq4p.s 			page 23


 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         Global Read Out Protection modification (from level1 to level0) 
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F42xxx/STM32F43xxx/STM32F401xx/STM32F411xx/STM3
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         STM32F469xx/STM32F479xx devices.
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void)
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 774              		.loc 1 502 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 8
 777              		@ frame_needed = 1, uses_anonymous_args = 0
 778              		@ link register save eliminated.
 779 0000 80B4     		push	{r7}
 780              	.LCFI20:
 781              		.cfi_def_cfa_offset 4
 782              		.cfi_offset 7, -4
 783 0002 83B0     		sub	sp, sp, #12
 784              	.LCFI21:
 785              		.cfi_def_cfa_offset 16
 786 0004 00AF     		add	r7, sp, #0
 787              	.LCFI22:
 788              		.cfi_def_cfa_register 7
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint8_t optiontmp = 0xFF;
 789              		.loc 1 503 0
 790 0006 FF23     		movs	r3, #255
 791 0008 FB71     		strb	r3, [r7, #7]
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Mask SPRMOD bit */
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 792              		.loc 1 506 0
 793 000a 094B     		ldr	r3, .L45
 794 000c 1B78     		ldrb	r3, [r3]
 795 000e DBB2     		uxtb	r3, r3
 796 0010 03F07F03 		and	r3, r3, #127
 797 0014 FB71     		strb	r3, [r7, #7]
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Update Option Byte */
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_SELECTED | optiontmp); 
 798              		.loc 1 509 0
 799 0016 064B     		ldr	r3, .L45
 800 0018 FA79     		ldrb	r2, [r7, #7]
 801 001a 62F07F02 		orn	r2, r2, #127
 802 001e D2B2     		uxtb	r2, r2
 803 0020 1A70     		strb	r2, [r3]
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return HAL_OK;
 804              		.loc 1 511 0
 805 0022 0023     		movs	r3, #0
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 806              		.loc 1 512 0
 807 0024 1846     		mov	r0, r3
 808 0026 0C37     		adds	r7, r7, #12
 809 0028 BD46     		mov	sp, r7
 810              		@ sp needed
ARM GAS  /tmp/ccEjlq4p.s 			page 24


 811 002a 5DF8047B 		ldr	r7, [sp], #4
 812 002e 7047     		bx	lr
 813              	.L46:
 814              		.align	2
 815              	.L45:
 816 0030 173C0240 		.word	1073888279
 817              		.cfi_endproc
 818              	.LFE132:
 820              		.section	.text.HAL_FLASHEx_OB_DeSelectPCROP,"ax",%progbits
 821              		.align	2
 822              		.global	HAL_FLASHEx_OB_DeSelectPCROP
 823              		.thumb
 824              		.thumb_func
 826              	HAL_FLASHEx_OB_DeSelectPCROP:
 827              	.LFB133:
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Deselect the Protection Mode 
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   After PCROP activated Option Byte modification NOT POSSIBLE! excepted 
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         Global Read Out Protection modification (from level1 to level0) 
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F42xxx/STM32F43xxx/STM32F401xx/STM32F411xx/STM3
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         STM32F469xx/STM32F479xx devices.
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** HAL_StatusTypeDef HAL_FLASHEx_OB_DeSelectPCROP(void)
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 828              		.loc 1 527 0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 8
 831              		@ frame_needed = 1, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 833 0000 80B4     		push	{r7}
 834              	.LCFI23:
 835              		.cfi_def_cfa_offset 4
 836              		.cfi_offset 7, -4
 837 0002 83B0     		sub	sp, sp, #12
 838              	.LCFI24:
 839              		.cfi_def_cfa_offset 16
 840 0004 00AF     		add	r7, sp, #0
 841              	.LCFI25:
 842              		.cfi_def_cfa_register 7
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint8_t optiontmp = 0xFF;
 843              		.loc 1 528 0
 844 0006 FF23     		movs	r3, #255
 845 0008 FB71     		strb	r3, [r7, #7]
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Mask SPRMOD bit */
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 846              		.loc 1 531 0
 847 000a 084B     		ldr	r3, .L49
 848 000c 1B78     		ldrb	r3, [r3]
 849 000e DBB2     		uxtb	r3, r3
 850 0010 03F07F03 		and	r3, r3, #127
ARM GAS  /tmp/ccEjlq4p.s 			page 25


 851 0014 FB71     		strb	r3, [r7, #7]
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Update Option Byte */
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_DESELECTED | optiontmp);  
 852              		.loc 1 534 0
 853 0016 054B     		ldr	r3, .L49
 854 0018 FA79     		ldrb	r2, [r7, #7]
 855 001a 1A70     		strb	r2, [r3]
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return HAL_OK;
 856              		.loc 1 536 0
 857 001c 0023     		movs	r3, #0
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 858              		.loc 1 537 0
 859 001e 1846     		mov	r0, r3
 860 0020 0C37     		adds	r7, r7, #12
 861 0022 BD46     		mov	sp, r7
 862              		@ sp needed
 863 0024 5DF8047B 		ldr	r7, [sp], #4
 864 0028 7047     		bx	lr
 865              	.L50:
 866 002a 00BF     		.align	2
 867              	.L49:
 868 002c 173C0240 		.word	1073888279
 869              		.cfi_endproc
 870              	.LFE133:
 872              		.section	.text.HAL_FLASHEx_OB_GetBank2WRP,"ax",%progbits
 873              		.align	2
 874              		.global	HAL_FLASHEx_OB_GetBank2WRP
 875              		.thumb
 876              		.thumb_func
 878              	HAL_FLASHEx_OB_GetBank2WRP:
 879              	.LFB134:
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F401xC || STM32F401xE ||
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           STM32F411xE || STM32F469xx || STM32F479xx  */
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx)|| defined(STM32F439xx) || 
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value for Bank 2
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F42xxx/STM32F43xxx/STM32F469xx/STM32F479xx devi
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval The FLASH Write Protection  Option Bytes value
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** uint16_t HAL_FLASHEx_OB_GetBank2WRP(void)
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {                            
 880              		.loc 1 548 0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 1, uses_anonymous_args = 0
 884              		@ link register save eliminated.
 885 0000 80B4     		push	{r7}
 886              	.LCFI26:
 887              		.cfi_def_cfa_offset 4
 888              		.cfi_offset 7, -4
 889 0002 00AF     		add	r7, sp, #0
 890              	.LCFI27:
 891              		.cfi_def_cfa_register 7
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Return the FLASH write protection Register value */
ARM GAS  /tmp/ccEjlq4p.s 			page 26


 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 892              		.loc 1 550 0
 893 0004 034B     		ldr	r3, .L53
 894 0006 1B88     		ldrh	r3, [r3]	@ movhi
 895 0008 9BB2     		uxth	r3, r3
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 896              		.loc 1 551 0
 897 000a 1846     		mov	r0, r3
 898 000c BD46     		mov	sp, r7
 899              		@ sp needed
 900 000e 5DF8047B 		ldr	r7, [sp], #4
 901 0012 7047     		bx	lr
 902              	.L54:
 903              		.align	2
 904              	.L53:
 905 0014 1A3C0240 		.word	1073888282
 906              		.cfi_endproc
 907              	.LFE134:
 909              		.section	.text.FLASH_MassErase,"ax",%progbits
 910              		.align	2
 911              		.thumb
 912              		.thumb_func
 914              	FLASH_MassErase:
 915              	.LFB135:
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @}
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) ||
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Full erase of FLASH memory sectors 
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Banks to be erased
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: Bank1 to be erased
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: Bank2 to be erased
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 916              		.loc 1 581 0
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccEjlq4p.s 			page 27


 919              		@ frame_needed = 1, uses_anonymous_args = 0
 920              		@ link register save eliminated.
 921 0000 80B4     		push	{r7}
 922              	.LCFI28:
 923              		.cfi_def_cfa_offset 4
 924              		.cfi_offset 7, -4
 925 0002 85B0     		sub	sp, sp, #20
 926              	.LCFI29:
 927              		.cfi_def_cfa_offset 24
 928 0004 00AF     		add	r7, sp, #0
 929              	.LCFI30:
 930              		.cfi_def_cfa_register 7
 931 0006 0346     		mov	r3, r0
 932 0008 3960     		str	r1, [r7]
 933 000a FB71     		strb	r3, [r7, #7]
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 934              		.loc 1 582 0
 935 000c 0023     		movs	r3, #0
 936 000e FB60     		str	r3, [r7, #12]
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* if the previous operation is completed, proceed to erase all sectors */
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 937              		.loc 1 589 0
 938 0010 194B     		ldr	r3, .L59
 939 0012 194A     		ldr	r2, .L59
 940 0014 1269     		ldr	r2, [r2, #16]
 941 0016 22F44072 		bic	r2, r2, #768
 942 001a 1A61     		str	r2, [r3, #16]
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
 943              		.loc 1 590 0
 944 001c 164B     		ldr	r3, .L59
 945 001e 164A     		ldr	r2, .L59
 946 0020 1169     		ldr	r1, [r2, #16]
 947 0022 FA68     		ldr	r2, [r7, #12]
 948 0024 0A43     		orrs	r2, r2, r1
 949 0026 1A61     		str	r2, [r3, #16]
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(Banks == FLASH_BANK_BOTH)
 950              		.loc 1 591 0
 951 0028 3B68     		ldr	r3, [r7]
 952 002a 032B     		cmp	r3, #3
 953 002c 08D1     		bne	.L56
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* bank1 & bank2 will be erased*/
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_MER_BIT;
 954              		.loc 1 594 0
 955 002e 124A     		ldr	r2, .L59
 956 0030 114B     		ldr	r3, .L59
 957 0032 1B69     		ldr	r3, [r3, #16]
 958 0034 43F40043 		orr	r3, r3, #32768
 959 0038 43F00403 		orr	r3, r3, #4
 960 003c 1361     		str	r3, [r2, #16]
 961 003e 0FE0     		b	.L57
 962              	.L56:
ARM GAS  /tmp/ccEjlq4p.s 			page 28


 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else if(Banks == FLASH_BANK_1)
 963              		.loc 1 596 0
 964 0040 3B68     		ldr	r3, [r7]
 965 0042 012B     		cmp	r3, #1
 966 0044 06D1     		bne	.L58
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Only bank1 will be erased*/
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_CR_MER1;
 967              		.loc 1 599 0
 968 0046 0C4B     		ldr	r3, .L59
 969 0048 0B4A     		ldr	r2, .L59
 970 004a 1269     		ldr	r2, [r2, #16]
 971 004c 42F00402 		orr	r2, r2, #4
 972 0050 1A61     		str	r2, [r3, #16]
 973 0052 05E0     		b	.L57
 974              	.L58:
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Only bank2 will be erased*/
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     FLASH->CR |= FLASH_CR_MER2;
 975              		.loc 1 604 0
 976 0054 084B     		ldr	r3, .L59
 977 0056 084A     		ldr	r2, .L59
 978 0058 1269     		ldr	r2, [r2, #16]
 979 005a 42F40042 		orr	r2, r2, #32768
 980 005e 1A61     		str	r2, [r3, #16]
 981              	.L57:
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
 982              		.loc 1 606 0
 983 0060 054B     		ldr	r3, .L59
 984 0062 054A     		ldr	r2, .L59
 985 0064 1269     		ldr	r2, [r2, #16]
 986 0066 42F48032 		orr	r2, r2, #65536
 987 006a 1A61     		str	r2, [r3, #16]
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 988              		.loc 1 607 0
 989 006c 1437     		adds	r7, r7, #20
 990 006e BD46     		mov	sp, r7
 991              		@ sp needed
 992 0070 5DF8047B 		ldr	r7, [sp], #4
 993 0074 7047     		bx	lr
 994              	.L60:
 995 0076 00BF     		.align	2
 996              	.L59:
 997 0078 003C0240 		.word	1073888256
 998              		.cfi_endproc
 999              	.LFE135:
 1001              		.section	.text.FLASH_Erase_Sector,"ax",%progbits
 1002              		.align	2
 1003              		.global	FLASH_Erase_Sector
 1004              		.thumb
 1005              		.thumb_func
 1007              	FLASH_Erase_Sector:
 1008              	.LFB136:
ARM GAS  /tmp/ccEjlq4p.s 			page 29


 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Erase the specified FLASH memory sector
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Sector: FLASH sector to erase
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series      
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 1009              		.loc 1 627 0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 24
 1012              		@ frame_needed = 1, uses_anonymous_args = 0
 1013              		@ link register save eliminated.
 1014 0000 80B4     		push	{r7}
 1015              	.LCFI31:
 1016              		.cfi_def_cfa_offset 4
 1017              		.cfi_offset 7, -4
 1018 0002 87B0     		sub	sp, sp, #28
 1019              	.LCFI32:
 1020              		.cfi_def_cfa_offset 32
 1021 0004 00AF     		add	r7, sp, #0
 1022              	.LCFI33:
 1023              		.cfi_def_cfa_register 7
 1024 0006 7860     		str	r0, [r7, #4]
 1025 0008 0B46     		mov	r3, r1
 1026 000a FB70     		strb	r3, [r7, #3]
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 1027              		.loc 1 628 0
 1028 000c 0023     		movs	r3, #0
 1029 000e 7B61     		str	r3, [r7, #20]
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_SECTOR(Sector));
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 1030              		.loc 1 634 0
 1031 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1032 0012 002B     		cmp	r3, #0
 1033 0014 02D1     		bne	.L62
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 1034              		.loc 1 636 0
 1035 0016 0023     		movs	r3, #0
 1036 0018 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccEjlq4p.s 			page 30


 1037 001a 10E0     		b	.L63
 1038              	.L62:
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 1039              		.loc 1 638 0
 1040 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1041 001e 012B     		cmp	r3, #1
 1042 0020 03D1     		bne	.L64
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 1043              		.loc 1 640 0
 1044 0022 4FF48073 		mov	r3, #256
 1045 0026 7B61     		str	r3, [r7, #20]
 1046 0028 09E0     		b	.L63
 1047              	.L64:
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 1048              		.loc 1 642 0
 1049 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1050 002c 022B     		cmp	r3, #2
 1051 002e 03D1     		bne	.L65
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_WORD;
 1052              		.loc 1 644 0
 1053 0030 4FF40073 		mov	r3, #512
 1054 0034 7B61     		str	r3, [r7, #20]
 1055 0036 02E0     		b	.L63
 1056              	.L65:
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 1057              		.loc 1 648 0
 1058 0038 4FF44073 		mov	r3, #768
 1059 003c 7B61     		str	r3, [r7, #20]
 1060              	.L63:
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(Sector > FLASH_SECTOR_11) 
 1061              		.loc 1 652 0
 1062 003e 7B68     		ldr	r3, [r7, #4]
 1063 0040 0B2B     		cmp	r3, #11
 1064 0042 02D9     		bls	.L66
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     Sector += 4;
 1065              		.loc 1 654 0
 1066 0044 7B68     		ldr	r3, [r7, #4]
 1067 0046 0433     		adds	r3, r3, #4
 1068 0048 7B60     		str	r3, [r7, #4]
 1069              	.L66:
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* If the previous operation is completed, proceed to erase the sector */
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 1070              		.loc 1 657 0
 1071 004a 184B     		ldr	r3, .L68
 1072 004c 174A     		ldr	r2, .L68
ARM GAS  /tmp/ccEjlq4p.s 			page 31


 1073 004e 1269     		ldr	r2, [r2, #16]
 1074 0050 22F44072 		bic	r2, r2, #768
 1075 0054 1A61     		str	r2, [r3, #16]
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
 1076              		.loc 1 658 0
 1077 0056 154B     		ldr	r3, .L68
 1078 0058 144A     		ldr	r2, .L68
 1079 005a 1169     		ldr	r1, [r2, #16]
 1080 005c 7A69     		ldr	r2, [r7, #20]
 1081 005e 0A43     		orrs	r2, r2, r1
 1082 0060 1A61     		str	r2, [r3, #16]
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 1083              		.loc 1 659 0
 1084 0062 124B     		ldr	r3, .L68
 1085 0064 114A     		ldr	r2, .L68
 1086 0066 1269     		ldr	r2, [r2, #16]
 1087 0068 22F0F802 		bic	r2, r2, #248
 1088 006c 1A61     		str	r2, [r3, #16]
 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 1089              		.loc 1 660 0
 1090 006e 0F4B     		ldr	r3, .L68
 1091 0070 0E4A     		ldr	r2, .L68
 1092 0072 1169     		ldr	r1, [r2, #16]
 1093 0074 F822     		movs	r2, #248
 1094 0076 3A61     		str	r2, [r7, #16]
 1095              	.LBB4:
 1096              	.LBB5:
 1097              		.file 2 "Drivers/CMSIS/Include/core_cmInstr.h"
   1:Drivers/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:Drivers/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:Drivers/CMSIS/Include/core_cmInstr.h ****  * @version  V4.10
   5:Drivers/CMSIS/Include/core_cmInstr.h ****  * @date     18. March 2015
   6:Drivers/CMSIS/Include/core_cmInstr.h ****  *
   7:Drivers/CMSIS/Include/core_cmInstr.h ****  * @note
   8:Drivers/CMSIS/Include/core_cmInstr.h ****  *
   9:Drivers/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  10:Drivers/CMSIS/Include/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:Drivers/CMSIS/Include/core_cmInstr.h **** 
  12:Drivers/CMSIS/Include/core_cmInstr.h ****    All rights reserved.
  13:Drivers/CMSIS/Include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:Drivers/CMSIS/Include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:Drivers/CMSIS/Include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:Drivers/CMSIS/Include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:Drivers/CMSIS/Include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:Drivers/CMSIS/Include/core_cmInstr.h ****      specific prior written permission.
  23:Drivers/CMSIS/Include/core_cmInstr.h ****    *
  24:Drivers/CMSIS/Include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:Drivers/CMSIS/Include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:Drivers/CMSIS/Include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:Drivers/CMSIS/Include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:Drivers/CMSIS/Include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:Drivers/CMSIS/Include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
ARM GAS  /tmp/ccEjlq4p.s 			page 32


  30:Drivers/CMSIS/Include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:Drivers/CMSIS/Include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:Drivers/CMSIS/Include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:Drivers/CMSIS/Include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:Drivers/CMSIS/Include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:Drivers/CMSIS/Include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:Drivers/CMSIS/Include/core_cmInstr.h **** 
  37:Drivers/CMSIS/Include/core_cmInstr.h **** 
  38:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:Drivers/CMSIS/Include/core_cmInstr.h **** 
  41:Drivers/CMSIS/Include/core_cmInstr.h **** 
  42:Drivers/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:Drivers/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:Drivers/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  45:Drivers/CMSIS/Include/core_cmInstr.h ****   @{
  46:Drivers/CMSIS/Include/core_cmInstr.h **** */
  47:Drivers/CMSIS/Include/core_cmInstr.h **** 
  48:Drivers/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:Drivers/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:Drivers/CMSIS/Include/core_cmInstr.h **** 
  51:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:Drivers/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
  54:Drivers/CMSIS/Include/core_cmInstr.h **** 
  55:Drivers/CMSIS/Include/core_cmInstr.h **** 
  56:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  57:Drivers/CMSIS/Include/core_cmInstr.h **** 
  58:Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  60:Drivers/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  61:Drivers/CMSIS/Include/core_cmInstr.h **** 
  62:Drivers/CMSIS/Include/core_cmInstr.h **** 
  63:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:Drivers/CMSIS/Include/core_cmInstr.h **** 
  65:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  67:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  68:Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  69:Drivers/CMSIS/Include/core_cmInstr.h **** 
  70:Drivers/CMSIS/Include/core_cmInstr.h **** 
  71:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  72:Drivers/CMSIS/Include/core_cmInstr.h **** 
  73:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  76:Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  77:Drivers/CMSIS/Include/core_cmInstr.h **** 
  78:Drivers/CMSIS/Include/core_cmInstr.h **** 
  79:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  80:Drivers/CMSIS/Include/core_cmInstr.h **** 
  81:Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  83:Drivers/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  84:Drivers/CMSIS/Include/core_cmInstr.h **** 
  85:Drivers/CMSIS/Include/core_cmInstr.h **** 
  86:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
ARM GAS  /tmp/ccEjlq4p.s 			page 33


  87:Drivers/CMSIS/Include/core_cmInstr.h **** 
  88:Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  92:Drivers/CMSIS/Include/core_cmInstr.h **** #define __ISB() do {\
  93:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
  94:Drivers/CMSIS/Include/core_cmInstr.h ****                    __isb(0xF);\
  95:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
  96:Drivers/CMSIS/Include/core_cmInstr.h ****                 } while (0)
  97:Drivers/CMSIS/Include/core_cmInstr.h **** 
  98:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:Drivers/CMSIS/Include/core_cmInstr.h **** 
 100:Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 103:Drivers/CMSIS/Include/core_cmInstr.h **** #define __DSB() do {\
 104:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 105:Drivers/CMSIS/Include/core_cmInstr.h ****                    __dsb(0xF);\
 106:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 107:Drivers/CMSIS/Include/core_cmInstr.h ****                 } while (0)
 108:Drivers/CMSIS/Include/core_cmInstr.h **** 
 109:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:Drivers/CMSIS/Include/core_cmInstr.h **** 
 111:Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 114:Drivers/CMSIS/Include/core_cmInstr.h **** #define __DMB() do {\
 115:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 116:Drivers/CMSIS/Include/core_cmInstr.h ****                    __dmb(0xF);\
 117:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 118:Drivers/CMSIS/Include/core_cmInstr.h ****                 } while (0)
 119:Drivers/CMSIS/Include/core_cmInstr.h **** 
 120:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:Drivers/CMSIS/Include/core_cmInstr.h **** 
 122:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:Drivers/CMSIS/Include/core_cmInstr.h **** 
 124:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 126:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 127:Drivers/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 128:Drivers/CMSIS/Include/core_cmInstr.h **** 
 129:Drivers/CMSIS/Include/core_cmInstr.h **** 
 130:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:Drivers/CMSIS/Include/core_cmInstr.h **** 
 132:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:Drivers/CMSIS/Include/core_cmInstr.h **** 
 134:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 136:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 137:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:Drivers/CMSIS/Include/core_cmInstr.h **** {
 140:Drivers/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 141:Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 142:Drivers/CMSIS/Include/core_cmInstr.h **** }
 143:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
ARM GAS  /tmp/ccEjlq4p.s 			page 34


 144:Drivers/CMSIS/Include/core_cmInstr.h **** 
 145:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:Drivers/CMSIS/Include/core_cmInstr.h **** 
 147:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:Drivers/CMSIS/Include/core_cmInstr.h **** 
 149:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 151:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 152:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:Drivers/CMSIS/Include/core_cmInstr.h **** {
 155:Drivers/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 156:Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 157:Drivers/CMSIS/Include/core_cmInstr.h **** }
 158:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 159:Drivers/CMSIS/Include/core_cmInstr.h **** 
 160:Drivers/CMSIS/Include/core_cmInstr.h **** 
 161:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:Drivers/CMSIS/Include/core_cmInstr.h **** 
 163:Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:Drivers/CMSIS/Include/core_cmInstr.h **** 
 165:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 168:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 169:Drivers/CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 170:Drivers/CMSIS/Include/core_cmInstr.h **** 
 171:Drivers/CMSIS/Include/core_cmInstr.h **** 
 172:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 173:Drivers/CMSIS/Include/core_cmInstr.h **** 
 174:Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:Drivers/CMSIS/Include/core_cmInstr.h **** 
 177:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 180:Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:Drivers/CMSIS/Include/core_cmInstr.h **** 
 182:Drivers/CMSIS/Include/core_cmInstr.h **** 
 183:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:Drivers/CMSIS/Include/core_cmInstr.h **** 
 185:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:Drivers/CMSIS/Include/core_cmInstr.h **** 
 187:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 189:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 190:Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:Drivers/CMSIS/Include/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 193:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:Drivers/CMSIS/Include/core_cmInstr.h **** {
 195:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 196:Drivers/CMSIS/Include/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:Drivers/CMSIS/Include/core_cmInstr.h **** 
 198:Drivers/CMSIS/Include/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:Drivers/CMSIS/Include/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:Drivers/CMSIS/Include/core_cmInstr.h ****   {
ARM GAS  /tmp/ccEjlq4p.s 			page 35


 201:Drivers/CMSIS/Include/core_cmInstr.h ****     result <<= 1;
 202:Drivers/CMSIS/Include/core_cmInstr.h ****     result |= value & 1;
 203:Drivers/CMSIS/Include/core_cmInstr.h ****     s--;
 204:Drivers/CMSIS/Include/core_cmInstr.h ****   }
 205:Drivers/CMSIS/Include/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 207:Drivers/CMSIS/Include/core_cmInstr.h **** }
 208:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 209:Drivers/CMSIS/Include/core_cmInstr.h **** 
 210:Drivers/CMSIS/Include/core_cmInstr.h **** 
 211:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 212:Drivers/CMSIS/Include/core_cmInstr.h **** 
 213:Drivers/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:Drivers/CMSIS/Include/core_cmInstr.h **** 
 215:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 217:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 218:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 219:Drivers/CMSIS/Include/core_cmInstr.h **** 
 220:Drivers/CMSIS/Include/core_cmInstr.h **** 
 221:Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:Drivers/CMSIS/Include/core_cmInstr.h **** 
 223:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:Drivers/CMSIS/Include/core_cmInstr.h **** 
 225:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:Drivers/CMSIS/Include/core_cmInstr.h **** 
 227:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 230:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:Drivers/CMSIS/Include/core_cmInstr.h **** 
 232:Drivers/CMSIS/Include/core_cmInstr.h **** 
 233:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:Drivers/CMSIS/Include/core_cmInstr.h **** 
 235:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:Drivers/CMSIS/Include/core_cmInstr.h **** 
 237:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 240:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:Drivers/CMSIS/Include/core_cmInstr.h **** 
 242:Drivers/CMSIS/Include/core_cmInstr.h **** 
 243:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:Drivers/CMSIS/Include/core_cmInstr.h **** 
 245:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:Drivers/CMSIS/Include/core_cmInstr.h **** 
 247:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 250:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:Drivers/CMSIS/Include/core_cmInstr.h **** 
 252:Drivers/CMSIS/Include/core_cmInstr.h **** 
 253:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:Drivers/CMSIS/Include/core_cmInstr.h **** 
 255:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:Drivers/CMSIS/Include/core_cmInstr.h **** 
 257:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
ARM GAS  /tmp/ccEjlq4p.s 			page 36


 258:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 260:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 261:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 262:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:Drivers/CMSIS/Include/core_cmInstr.h **** 
 264:Drivers/CMSIS/Include/core_cmInstr.h **** 
 265:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:Drivers/CMSIS/Include/core_cmInstr.h **** 
 267:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:Drivers/CMSIS/Include/core_cmInstr.h **** 
 269:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 270:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 272:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 273:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 274:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:Drivers/CMSIS/Include/core_cmInstr.h **** 
 276:Drivers/CMSIS/Include/core_cmInstr.h **** 
 277:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:Drivers/CMSIS/Include/core_cmInstr.h **** 
 279:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:Drivers/CMSIS/Include/core_cmInstr.h **** 
 281:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 282:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 284:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 285:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 286:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:Drivers/CMSIS/Include/core_cmInstr.h **** 
 288:Drivers/CMSIS/Include/core_cmInstr.h **** 
 289:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:Drivers/CMSIS/Include/core_cmInstr.h **** 
 291:Drivers/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:Drivers/CMSIS/Include/core_cmInstr.h **** 
 293:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 294:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 295:Drivers/CMSIS/Include/core_cmInstr.h **** 
 296:Drivers/CMSIS/Include/core_cmInstr.h **** 
 297:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 298:Drivers/CMSIS/Include/core_cmInstr.h **** 
 299:Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 300:Drivers/CMSIS/Include/core_cmInstr.h **** 
 301:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 304:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 305:Drivers/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 306:Drivers/CMSIS/Include/core_cmInstr.h **** 
 307:Drivers/CMSIS/Include/core_cmInstr.h **** 
 308:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:Drivers/CMSIS/Include/core_cmInstr.h **** 
 310:Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 311:Drivers/CMSIS/Include/core_cmInstr.h **** 
 312:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
ARM GAS  /tmp/ccEjlq4p.s 			page 37


 315:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 316:Drivers/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 317:Drivers/CMSIS/Include/core_cmInstr.h **** 
 318:Drivers/CMSIS/Include/core_cmInstr.h **** 
 319:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:Drivers/CMSIS/Include/core_cmInstr.h **** 
 321:Drivers/CMSIS/Include/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:Drivers/CMSIS/Include/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:Drivers/CMSIS/Include/core_cmInstr.h **** 
 324:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 326:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 327:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:Drivers/CMSIS/Include/core_cmInstr.h **** {
 330:Drivers/CMSIS/Include/core_cmInstr.h ****   rrx r0, r0
 331:Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 332:Drivers/CMSIS/Include/core_cmInstr.h **** }
 333:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 334:Drivers/CMSIS/Include/core_cmInstr.h **** 
 335:Drivers/CMSIS/Include/core_cmInstr.h **** 
 336:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:Drivers/CMSIS/Include/core_cmInstr.h **** 
 338:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:Drivers/CMSIS/Include/core_cmInstr.h **** 
 340:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 343:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:Drivers/CMSIS/Include/core_cmInstr.h **** 
 345:Drivers/CMSIS/Include/core_cmInstr.h **** 
 346:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:Drivers/CMSIS/Include/core_cmInstr.h **** 
 348:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:Drivers/CMSIS/Include/core_cmInstr.h **** 
 350:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 353:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:Drivers/CMSIS/Include/core_cmInstr.h **** 
 355:Drivers/CMSIS/Include/core_cmInstr.h **** 
 356:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:Drivers/CMSIS/Include/core_cmInstr.h **** 
 358:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:Drivers/CMSIS/Include/core_cmInstr.h **** 
 360:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 363:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:Drivers/CMSIS/Include/core_cmInstr.h **** 
 365:Drivers/CMSIS/Include/core_cmInstr.h **** 
 366:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:Drivers/CMSIS/Include/core_cmInstr.h **** 
 368:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:Drivers/CMSIS/Include/core_cmInstr.h **** 
 370:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 371:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccEjlq4p.s 			page 38


 372:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 373:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:Drivers/CMSIS/Include/core_cmInstr.h **** 
 375:Drivers/CMSIS/Include/core_cmInstr.h **** 
 376:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:Drivers/CMSIS/Include/core_cmInstr.h **** 
 378:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:Drivers/CMSIS/Include/core_cmInstr.h **** 
 380:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 381:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 383:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:Drivers/CMSIS/Include/core_cmInstr.h **** 
 385:Drivers/CMSIS/Include/core_cmInstr.h **** 
 386:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:Drivers/CMSIS/Include/core_cmInstr.h **** 
 388:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:Drivers/CMSIS/Include/core_cmInstr.h **** 
 390:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 391:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 393:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:Drivers/CMSIS/Include/core_cmInstr.h **** 
 395:Drivers/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:Drivers/CMSIS/Include/core_cmInstr.h **** 
 397:Drivers/CMSIS/Include/core_cmInstr.h **** 
 398:Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:Drivers/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 400:Drivers/CMSIS/Include/core_cmInstr.h **** 
 401:Drivers/CMSIS/Include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:Drivers/CMSIS/Include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:Drivers/CMSIS/Include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:Drivers/CMSIS/Include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 408:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 411:Drivers/CMSIS/Include/core_cmInstr.h **** 
 412:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 413:Drivers/CMSIS/Include/core_cmInstr.h **** 
 414:Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 416:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:Drivers/CMSIS/Include/core_cmInstr.h **** {
 418:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 419:Drivers/CMSIS/Include/core_cmInstr.h **** }
 420:Drivers/CMSIS/Include/core_cmInstr.h **** 
 421:Drivers/CMSIS/Include/core_cmInstr.h **** 
 422:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:Drivers/CMSIS/Include/core_cmInstr.h **** 
 424:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 426:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 427:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:Drivers/CMSIS/Include/core_cmInstr.h **** {
ARM GAS  /tmp/ccEjlq4p.s 			page 39


 429:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:Drivers/CMSIS/Include/core_cmInstr.h **** }
 431:Drivers/CMSIS/Include/core_cmInstr.h **** 
 432:Drivers/CMSIS/Include/core_cmInstr.h **** 
 433:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 434:Drivers/CMSIS/Include/core_cmInstr.h **** 
 435:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 438:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:Drivers/CMSIS/Include/core_cmInstr.h **** {
 440:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:Drivers/CMSIS/Include/core_cmInstr.h **** }
 442:Drivers/CMSIS/Include/core_cmInstr.h **** 
 443:Drivers/CMSIS/Include/core_cmInstr.h **** 
 444:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 445:Drivers/CMSIS/Include/core_cmInstr.h **** 
 446:Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 448:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:Drivers/CMSIS/Include/core_cmInstr.h **** {
 450:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 451:Drivers/CMSIS/Include/core_cmInstr.h **** }
 452:Drivers/CMSIS/Include/core_cmInstr.h **** 
 453:Drivers/CMSIS/Include/core_cmInstr.h **** 
 454:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:Drivers/CMSIS/Include/core_cmInstr.h **** 
 456:Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 460:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:Drivers/CMSIS/Include/core_cmInstr.h **** {
 462:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:Drivers/CMSIS/Include/core_cmInstr.h **** }
 464:Drivers/CMSIS/Include/core_cmInstr.h **** 
 465:Drivers/CMSIS/Include/core_cmInstr.h **** 
 466:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:Drivers/CMSIS/Include/core_cmInstr.h **** 
 468:Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 471:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:Drivers/CMSIS/Include/core_cmInstr.h **** {
 473:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:Drivers/CMSIS/Include/core_cmInstr.h **** }
 475:Drivers/CMSIS/Include/core_cmInstr.h **** 
 476:Drivers/CMSIS/Include/core_cmInstr.h **** 
 477:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:Drivers/CMSIS/Include/core_cmInstr.h **** 
 479:Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 482:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:Drivers/CMSIS/Include/core_cmInstr.h **** {
 484:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:Drivers/CMSIS/Include/core_cmInstr.h **** }
ARM GAS  /tmp/ccEjlq4p.s 			page 40


 486:Drivers/CMSIS/Include/core_cmInstr.h **** 
 487:Drivers/CMSIS/Include/core_cmInstr.h **** 
 488:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:Drivers/CMSIS/Include/core_cmInstr.h **** 
 490:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:Drivers/CMSIS/Include/core_cmInstr.h **** 
 492:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 494:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 495:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:Drivers/CMSIS/Include/core_cmInstr.h **** {
 497:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:Drivers/CMSIS/Include/core_cmInstr.h ****   return __builtin_bswap32(value);
 499:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 500:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 501:Drivers/CMSIS/Include/core_cmInstr.h **** 
 502:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 503:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 504:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 505:Drivers/CMSIS/Include/core_cmInstr.h **** }
 506:Drivers/CMSIS/Include/core_cmInstr.h **** 
 507:Drivers/CMSIS/Include/core_cmInstr.h **** 
 508:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 509:Drivers/CMSIS/Include/core_cmInstr.h **** 
 510:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 511:Drivers/CMSIS/Include/core_cmInstr.h **** 
 512:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 513:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 514:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 515:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 516:Drivers/CMSIS/Include/core_cmInstr.h **** {
 517:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 518:Drivers/CMSIS/Include/core_cmInstr.h **** 
 519:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 520:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 521:Drivers/CMSIS/Include/core_cmInstr.h **** }
 522:Drivers/CMSIS/Include/core_cmInstr.h **** 
 523:Drivers/CMSIS/Include/core_cmInstr.h **** 
 524:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 525:Drivers/CMSIS/Include/core_cmInstr.h **** 
 526:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 527:Drivers/CMSIS/Include/core_cmInstr.h **** 
 528:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 529:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 530:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 531:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 532:Drivers/CMSIS/Include/core_cmInstr.h **** {
 533:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 534:Drivers/CMSIS/Include/core_cmInstr.h ****   return (short)__builtin_bswap16(value);
 535:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 536:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 537:Drivers/CMSIS/Include/core_cmInstr.h **** 
 538:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 539:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 540:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 541:Drivers/CMSIS/Include/core_cmInstr.h **** }
 542:Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/ccEjlq4p.s 			page 41


 543:Drivers/CMSIS/Include/core_cmInstr.h **** 
 544:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 545:Drivers/CMSIS/Include/core_cmInstr.h **** 
 546:Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 547:Drivers/CMSIS/Include/core_cmInstr.h **** 
 548:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 549:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 550:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 551:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 552:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 553:Drivers/CMSIS/Include/core_cmInstr.h **** {
 554:Drivers/CMSIS/Include/core_cmInstr.h ****   return (op1 >> op2) | (op1 << (32 - op2));
 555:Drivers/CMSIS/Include/core_cmInstr.h **** }
 556:Drivers/CMSIS/Include/core_cmInstr.h **** 
 557:Drivers/CMSIS/Include/core_cmInstr.h **** 
 558:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 559:Drivers/CMSIS/Include/core_cmInstr.h **** 
 560:Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 561:Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 562:Drivers/CMSIS/Include/core_cmInstr.h **** 
 563:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 564:Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 565:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 566:Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 567:Drivers/CMSIS/Include/core_cmInstr.h **** 
 568:Drivers/CMSIS/Include/core_cmInstr.h **** 
 569:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 570:Drivers/CMSIS/Include/core_cmInstr.h **** 
 571:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 572:Drivers/CMSIS/Include/core_cmInstr.h **** 
 573:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 574:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 575:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 576:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 577:Drivers/CMSIS/Include/core_cmInstr.h **** {
 578:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 579:Drivers/CMSIS/Include/core_cmInstr.h **** 
 580:Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 581:Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1098              		.loc 2 581 0
 1099 0078 3A69     		ldr	r2, [r7, #16]
 1100              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1101 007a 92FAA2F2 		rbit r2, r2
 1102              	@ 0 "" 2
 1103              		.thumb
 1104 007e FA60     		str	r2, [r7, #12]
 582:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 583:Drivers/CMSIS/Include/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 584:Drivers/CMSIS/Include/core_cmInstr.h **** 
 585:Drivers/CMSIS/Include/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 586:Drivers/CMSIS/Include/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 587:Drivers/CMSIS/Include/core_cmInstr.h ****   {
 588:Drivers/CMSIS/Include/core_cmInstr.h ****     result <<= 1;
 589:Drivers/CMSIS/Include/core_cmInstr.h ****     result |= value & 1;
 590:Drivers/CMSIS/Include/core_cmInstr.h ****     s--;
 591:Drivers/CMSIS/Include/core_cmInstr.h ****   }
 592:Drivers/CMSIS/Include/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
ARM GAS  /tmp/ccEjlq4p.s 			page 42


 593:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 594:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 1105              		.loc 2 594 0
 1106 0080 FA68     		ldr	r2, [r7, #12]
 1107              	.LBE5:
 1108              	.LBE4:
 1109              		.loc 1 660 0
 1110 0082 B2FA82F2 		clz	r2, r2
 1111 0086 7868     		ldr	r0, [r7, #4]
 1112 0088 00FA02F2 		lsl	r2, r0, r2
 1113 008c 0A43     		orrs	r2, r2, r1
 1114 008e 42F00202 		orr	r2, r2, #2
 1115 0092 1A61     		str	r2, [r3, #16]
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
 1116              		.loc 1 661 0
 1117 0094 054B     		ldr	r3, .L68
 1118 0096 054A     		ldr	r2, .L68
 1119 0098 1269     		ldr	r2, [r2, #16]
 1120 009a 42F48032 		orr	r2, r2, #65536
 1121 009e 1A61     		str	r2, [r3, #16]
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1122              		.loc 1 662 0
 1123 00a0 1C37     		adds	r7, r7, #28
 1124 00a2 BD46     		mov	sp, r7
 1125              		@ sp needed
 1126 00a4 5DF8047B 		ldr	r7, [sp], #4
 1127 00a8 7047     		bx	lr
 1128              	.L69:
 1129 00aa 00BF     		.align	2
 1130              	.L68:
 1131 00ac 003C0240 		.word	1073888256
 1132              		.cfi_endproc
 1133              	.LFE136:
 1135              		.section	.text.FLASH_OB_EnableWRP,"ax",%progbits
 1136              		.align	2
 1137              		.thumb
 1138              		.thumb_func
 1140              	FLASH_OB_EnableWRP:
 1141              	.LFB137:
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Enable the write protection of the desired bank1 or bank 2 sectors
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  WRPSector: specifies the sector(s) to be write protected.
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg WRPSector: A value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_23
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_WRP_SECTOR_All
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   BANK2 starts from OB_WRP_SECTOR_12
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Enable write protection on all the sectors for the specific bank
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: WRP on all sectors of bank1
ARM GAS  /tmp/ccEjlq4p.s 			page 43


 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: WRP on all sectors of bank2
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL FLASH State   
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 1142              		.loc 1 687 0
 1143              		.cfi_startproc
 1144              		@ args = 0, pretend = 0, frame = 16
 1145              		@ frame_needed = 1, uses_anonymous_args = 0
 1146 0000 80B5     		push	{r7, lr}
 1147              	.LCFI34:
 1148              		.cfi_def_cfa_offset 8
 1149              		.cfi_offset 7, -8
 1150              		.cfi_offset 14, -4
 1151 0002 84B0     		sub	sp, sp, #16
 1152              	.LCFI35:
 1153              		.cfi_def_cfa_offset 24
 1154 0004 00AF     		add	r7, sp, #0
 1155              	.LCFI36:
 1156              		.cfi_def_cfa_register 7
 1157 0006 7860     		str	r0, [r7, #4]
 1158 0008 3960     		str	r1, [r7]
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1159              		.loc 1 688 0
 1160 000a 0023     		movs	r3, #0
 1161 000c FB73     		strb	r3, [r7, #15]
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1162              		.loc 1 695 0
 1163 000e 4CF25030 		movw	r0, #50000
 1164 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1165 0016 0346     		mov	r3, r0
 1166 0018 FB73     		strb	r3, [r7, #15]
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
 1167              		.loc 1 697 0
 1168 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1169 001c 002B     		cmp	r3, #0
 1170 001e 52D1     		bne	.L71
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if(((WRPSector == OB_WRP_SECTOR_All) && ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 1171              		.loc 1 699 0
 1172 0020 7A68     		ldr	r2, [r7, #4]
 1173 0022 2B4B     		ldr	r3, .L79
 1174 0024 9A42     		cmp	r2, r3
 1175 0026 05D1     		bne	.L72
 1176              		.loc 1 699 0 is_stmt 0 discriminator 1
 1177 0028 3B68     		ldr	r3, [r7]
 1178 002a 012B     		cmp	r3, #1
 1179 002c 06D0     		beq	.L73
ARM GAS  /tmp/ccEjlq4p.s 			page 44


 1180 002e 3B68     		ldr	r3, [r7]
 1181 0030 032B     		cmp	r3, #3
 1182 0032 03D0     		beq	.L73
 1183              	.L72:
 1184              		.loc 1 699 0 discriminator 2
 1185 0034 7B68     		ldr	r3, [r7, #4]
 1186 0036 B3F5805F 		cmp	r3, #4096
 1187 003a 1CD2     		bcs	.L74
 1188              	.L73:
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****          (WRPSector < OB_WRP_SECTOR_12))
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        if(WRPSector == OB_WRP_SECTOR_All)
 1189              		.loc 1 702 0 is_stmt 1
 1190 003c 7A68     		ldr	r2, [r7, #4]
 1191 003e 244B     		ldr	r3, .L79
 1192 0040 9A42     		cmp	r2, r3
 1193 0042 0CD1     		bne	.L75
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           /*Write protection on all sector of BANK1*/
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~(WRPSector>>12));  
 1194              		.loc 1 705 0
 1195 0044 234B     		ldr	r3, .L79+4
 1196 0046 234A     		ldr	r2, .L79+4
 1197 0048 1288     		ldrh	r2, [r2]	@ movhi
 1198 004a 91B2     		uxth	r1, r2
 1199 004c 7A68     		ldr	r2, [r7, #4]
 1200 004e 120B     		lsrs	r2, r2, #12
 1201 0050 92B2     		uxth	r2, r2
 1202 0052 D243     		mvns	r2, r2
 1203 0054 92B2     		uxth	r2, r2
 1204 0056 0A40     		ands	r2, r2, r1
 1205 0058 92B2     		uxth	r2, r2
 1206 005a 1A80     		strh	r2, [r3]	@ movhi
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 1207              		.loc 1 702 0
 1208 005c 17E0     		b	.L77
 1209              	.L75:
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        }
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        else
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           /*Write protection done on sectors of BANK1*/
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 1210              		.loc 1 710 0
 1211 005e 1D4B     		ldr	r3, .L79+4
 1212 0060 1C4A     		ldr	r2, .L79+4
 1213 0062 1288     		ldrh	r2, [r2]	@ movhi
 1214 0064 91B2     		uxth	r1, r2
 1215 0066 7A68     		ldr	r2, [r7, #4]
 1216 0068 92B2     		uxth	r2, r2
 1217 006a D243     		mvns	r2, r2
 1218 006c 92B2     		uxth	r2, r2
 1219 006e 0A40     		ands	r2, r2, r1
 1220 0070 92B2     		uxth	r2, r2
 1221 0072 1A80     		strh	r2, [r3]	@ movhi
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 1222              		.loc 1 702 0
 1223 0074 0BE0     		b	.L77
ARM GAS  /tmp/ccEjlq4p.s 			page 45


 1224              	.L74:
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        }
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else 
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK2*/
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~(WRPSector>>12));  
 1225              		.loc 1 716 0
 1226 0076 184B     		ldr	r3, .L79+8
 1227 0078 174A     		ldr	r2, .L79+8
 1228 007a 1288     		ldrh	r2, [r2]	@ movhi
 1229 007c 91B2     		uxth	r1, r2
 1230 007e 7A68     		ldr	r2, [r7, #4]
 1231 0080 120B     		lsrs	r2, r2, #12
 1232 0082 92B2     		uxth	r2, r2
 1233 0084 D243     		mvns	r2, r2
 1234 0086 92B2     		uxth	r2, r2
 1235 0088 0A40     		ands	r2, r2, r1
 1236 008a 92B2     		uxth	r2, r2
 1237 008c 1A80     		strh	r2, [r3]	@ movhi
 1238              	.L77:
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Write protection on all sector of BANK2*/
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if((WRPSector == OB_WRP_SECTOR_All) && (Banks == FLASH_BANK_BOTH))
 1239              		.loc 1 720 0
 1240 008e 7A68     		ldr	r2, [r7, #4]
 1241 0090 0F4B     		ldr	r3, .L79
 1242 0092 9A42     		cmp	r2, r3
 1243 0094 17D1     		bne	.L71
 1244              		.loc 1 720 0 is_stmt 0 discriminator 1
 1245 0096 3B68     		ldr	r3, [r7]
 1246 0098 032B     		cmp	r3, #3
 1247 009a 14D1     		bne	.L71
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1248              		.loc 1 723 0 is_stmt 1
 1249 009c 4CF25030 		movw	r0, #50000
 1250 00a0 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1251 00a4 0346     		mov	r3, r0
 1252 00a6 FB73     		strb	r3, [r7, #15]
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       if(status == HAL_OK)
 1253              		.loc 1 725 0
 1254 00a8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1255 00aa 002B     		cmp	r3, #0
 1256 00ac 0BD1     		bne	.L71
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       { 
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~(WRPSector>>12));  
 1257              		.loc 1 727 0
 1258 00ae 0A4B     		ldr	r3, .L79+8
 1259 00b0 094A     		ldr	r2, .L79+8
 1260 00b2 1288     		ldrh	r2, [r2]	@ movhi
 1261 00b4 91B2     		uxth	r1, r2
 1262 00b6 7A68     		ldr	r2, [r7, #4]
 1263 00b8 120B     		lsrs	r2, r2, #12
ARM GAS  /tmp/ccEjlq4p.s 			page 46


 1264 00ba 92B2     		uxth	r2, r2
 1265 00bc D243     		mvns	r2, r2
 1266 00be 92B2     		uxth	r2, r2
 1267 00c0 0A40     		ands	r2, r2, r1
 1268 00c2 92B2     		uxth	r2, r2
 1269 00c4 1A80     		strh	r2, [r3]	@ movhi
 1270              	.L71:
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       }
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 1271              		.loc 1 732 0
 1272 00c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1273              		.loc 1 733 0
 1274 00c8 1846     		mov	r0, r3
 1275 00ca 1037     		adds	r7, r7, #16
 1276 00cc BD46     		mov	sp, r7
 1277              		@ sp needed
 1278 00ce 80BD     		pop	{r7, pc}
 1279              	.L80:
 1280              		.align	2
 1281              	.L79:
 1282 00d0 00F0FF00 		.word	16773120
 1283 00d4 163C0240 		.word	1073888278
 1284 00d8 1A3C0240 		.word	1073888282
 1285              		.cfi_endproc
 1286              	.LFE137:
 1288              		.section	.text.FLASH_OB_DisableWRP,"ax",%progbits
 1289              		.align	2
 1290              		.thumb
 1291              		.thumb_func
 1293              	FLASH_OB_DisableWRP:
 1294              	.LFB138:
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Disable the write protection of the desired bank1 or bank 2 sectors
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  WRPSector: specifies the sector(s) to be write protected.
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg WRPSector: A value between OB_WRP_SECTOR_0 and OB_WRP_SECTOR_23
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_WRP_Sector_All
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   BANK2 starts from OB_WRP_SECTOR_12
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Disable write protection on all the sectors for the specific bank
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: Bank1 to be erased
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: Bank2 to be erased
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status   
ARM GAS  /tmp/ccEjlq4p.s 			page 47


 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 1295              		.loc 1 758 0
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 16
 1298              		@ frame_needed = 1, uses_anonymous_args = 0
 1299 0000 80B5     		push	{r7, lr}
 1300              	.LCFI37:
 1301              		.cfi_def_cfa_offset 8
 1302              		.cfi_offset 7, -8
 1303              		.cfi_offset 14, -4
 1304 0002 84B0     		sub	sp, sp, #16
 1305              	.LCFI38:
 1306              		.cfi_def_cfa_offset 24
 1307 0004 00AF     		add	r7, sp, #0
 1308              	.LCFI39:
 1309              		.cfi_def_cfa_register 7
 1310 0006 7860     		str	r0, [r7, #4]
 1311 0008 3960     		str	r1, [r7]
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1312              		.loc 1 759 0
 1313 000a 0023     		movs	r3, #0
 1314 000c FB73     		strb	r3, [r7, #15]
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1315              		.loc 1 766 0
 1316 000e 4CF25030 		movw	r0, #50000
 1317 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1318 0016 0346     		mov	r3, r0
 1319 0018 FB73     		strb	r3, [r7, #15]
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
 1320              		.loc 1 768 0
 1321 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1322 001c 002B     		cmp	r3, #0
 1323 001e 4AD1     		bne	.L82
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if(((WRPSector == OB_WRP_SECTOR_All) && ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 1324              		.loc 1 770 0
 1325 0020 7A68     		ldr	r2, [r7, #4]
 1326 0022 274B     		ldr	r3, .L90
 1327 0024 9A42     		cmp	r2, r3
 1328 0026 05D1     		bne	.L83
 1329              		.loc 1 770 0 is_stmt 0 discriminator 1
 1330 0028 3B68     		ldr	r3, [r7]
 1331 002a 012B     		cmp	r3, #1
 1332 002c 06D0     		beq	.L84
 1333 002e 3B68     		ldr	r3, [r7]
 1334 0030 032B     		cmp	r3, #3
 1335 0032 03D0     		beq	.L84
 1336              	.L83:
ARM GAS  /tmp/ccEjlq4p.s 			page 48


 1337              		.loc 1 770 0 discriminator 2
 1338 0034 7B68     		ldr	r3, [r7, #4]
 1339 0036 B3F5805F 		cmp	r3, #4096
 1340 003a 18D2     		bcs	.L85
 1341              	.L84:
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****          (WRPSector < OB_WRP_SECTOR_12))
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        if(WRPSector == OB_WRP_SECTOR_All)
 1342              		.loc 1 773 0 is_stmt 1
 1343 003c 7A68     		ldr	r2, [r7, #4]
 1344 003e 204B     		ldr	r3, .L90
 1345 0040 9A42     		cmp	r2, r3
 1346 0042 0AD1     		bne	.L86
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           /*Write protection on all sector of BANK1*/
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)(WRPSector>>12); 
 1347              		.loc 1 776 0
 1348 0044 1F4B     		ldr	r3, .L90+4
 1349 0046 1F4A     		ldr	r2, .L90+4
 1350 0048 1288     		ldrh	r2, [r2]	@ movhi
 1351 004a 91B2     		uxth	r1, r2
 1352 004c 7A68     		ldr	r2, [r7, #4]
 1353 004e 120B     		lsrs	r2, r2, #12
 1354 0050 92B2     		uxth	r2, r2
 1355 0052 0A43     		orrs	r2, r2, r1
 1356 0054 92B2     		uxth	r2, r2
 1357 0056 1A80     		strh	r2, [r3]	@ movhi
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 1358              		.loc 1 773 0
 1359 0058 13E0     		b	.L88
 1360              	.L86:
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        }
 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        else
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           /*Write protection done on sectors of BANK1*/
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****           *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 1361              		.loc 1 781 0
 1362 005a 1A4B     		ldr	r3, .L90+4
 1363 005c 194A     		ldr	r2, .L90+4
 1364 005e 1288     		ldrh	r2, [r2]	@ movhi
 1365 0060 91B2     		uxth	r1, r2
 1366 0062 7A68     		ldr	r2, [r7, #4]
 1367 0064 92B2     		uxth	r2, r2
 1368 0066 0A43     		orrs	r2, r2, r1
 1369 0068 92B2     		uxth	r2, r2
 1370 006a 1A80     		strh	r2, [r3]	@ movhi
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        {
 1371              		.loc 1 773 0
 1372 006c 09E0     		b	.L88
 1373              	.L85:
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****        }
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else 
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK2*/
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)(WRPSector>>12); 
 1374              		.loc 1 787 0
ARM GAS  /tmp/ccEjlq4p.s 			page 49


 1375 006e 164B     		ldr	r3, .L90+8
 1376 0070 154A     		ldr	r2, .L90+8
 1377 0072 1288     		ldrh	r2, [r2]	@ movhi
 1378 0074 91B2     		uxth	r1, r2
 1379 0076 7A68     		ldr	r2, [r7, #4]
 1380 0078 120B     		lsrs	r2, r2, #12
 1381 007a 92B2     		uxth	r2, r2
 1382 007c 0A43     		orrs	r2, r2, r1
 1383 007e 92B2     		uxth	r2, r2
 1384 0080 1A80     		strh	r2, [r3]	@ movhi
 1385              	.L88:
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Write protection on all sector  of BANK2*/
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if((WRPSector == OB_WRP_SECTOR_All) && (Banks == FLASH_BANK_BOTH))
 1386              		.loc 1 791 0
 1387 0082 7A68     		ldr	r2, [r7, #4]
 1388 0084 0E4B     		ldr	r3, .L90
 1389 0086 9A42     		cmp	r2, r3
 1390 0088 15D1     		bne	.L82
 1391              		.loc 1 791 0 is_stmt 0 discriminator 1
 1392 008a 3B68     		ldr	r3, [r7]
 1393 008c 032B     		cmp	r3, #3
 1394 008e 12D1     		bne	.L82
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1395              		.loc 1 794 0 is_stmt 1
 1396 0090 4CF25030 		movw	r0, #50000
 1397 0094 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1398 0098 0346     		mov	r3, r0
 1399 009a FB73     		strb	r3, [r7, #15]
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       if(status == HAL_OK)
 1400              		.loc 1 796 0
 1401 009c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1402 009e 002B     		cmp	r3, #0
 1403 00a0 09D1     		bne	.L82
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       { 
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)(WRPSector>>12); 
 1404              		.loc 1 798 0
 1405 00a2 094B     		ldr	r3, .L90+8
 1406 00a4 084A     		ldr	r2, .L90+8
 1407 00a6 1288     		ldrh	r2, [r2]	@ movhi
 1408 00a8 91B2     		uxth	r1, r2
 1409 00aa 7A68     		ldr	r2, [r7, #4]
 1410 00ac 120B     		lsrs	r2, r2, #12
 1411 00ae 92B2     		uxth	r2, r2
 1412 00b0 0A43     		orrs	r2, r2, r1
 1413 00b2 92B2     		uxth	r2, r2
 1414 00b4 1A80     		strh	r2, [r3]	@ movhi
 1415              	.L82:
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       }
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
ARM GAS  /tmp/ccEjlq4p.s 			page 50


 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 1416              		.loc 1 804 0
 1417 00b6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1418              		.loc 1 805 0
 1419 00b8 1846     		mov	r0, r3
 1420 00ba 1037     		adds	r7, r7, #16
 1421 00bc BD46     		mov	sp, r7
 1422              		@ sp needed
 1423 00be 80BD     		pop	{r7, pc}
 1424              	.L91:
 1425              		.align	2
 1426              	.L90:
 1427 00c0 00F0FF00 		.word	16773120
 1428 00c4 163C0240 		.word	1073888278
 1429 00c8 1A3C0240 		.word	1073888282
 1430              		.cfi_endproc
 1431              	.LFE138:
 1433              		.section	.text.FLASH_OB_BootConfig,"ax",%progbits
 1434              		.align	2
 1435              		.thumb
 1436              		.thumb_func
 1438              	FLASH_OB_BootConfig:
 1439              	.LFB139:
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Configure the Dual Bank Boot.
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *   
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *      
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  BootConfig specifies the Dual Bank Boot Option byte.
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t BootConfig)
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 1440              		.loc 1 819 0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 16
 1443              		@ frame_needed = 1, uses_anonymous_args = 0
 1444 0000 80B5     		push	{r7, lr}
 1445              	.LCFI40:
 1446              		.cfi_def_cfa_offset 8
 1447              		.cfi_offset 7, -8
 1448              		.cfi_offset 14, -4
 1449 0002 84B0     		sub	sp, sp, #16
 1450              	.LCFI41:
 1451              		.cfi_def_cfa_offset 24
 1452 0004 00AF     		add	r7, sp, #0
 1453              	.LCFI42:
 1454              		.cfi_def_cfa_register 7
 1455 0006 0346     		mov	r3, r0
 1456 0008 FB71     		strb	r3, [r7, #7]
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1457              		.loc 1 820 0
ARM GAS  /tmp/ccEjlq4p.s 			page 51


 1458 000a 0023     		movs	r3, #0
 1459 000c FB73     		strb	r3, [r7, #15]
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_BOOT(BootConfig));
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */  
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1460              		.loc 1 826 0
 1461 000e 4CF25030 		movw	r0, #50000
 1462 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1463 0016 0346     		mov	r3, r0
 1464 0018 FB73     		strb	r3, [r7, #15]
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
 1465              		.loc 1 828 0
 1466 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1467 001c 002B     		cmp	r3, #0
 1468 001e 0FD1     		bne	.L93
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Set Dual Bank Boot */
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 1469              		.loc 1 831 0
 1470 0020 0A4B     		ldr	r3, .L95
 1471 0022 0A4A     		ldr	r2, .L95
 1472 0024 1278     		ldrb	r2, [r2]
 1473 0026 D2B2     		uxtb	r2, r2
 1474 0028 22F01002 		bic	r2, r2, #16
 1475 002c D2B2     		uxtb	r2, r2
 1476 002e 1A70     		strb	r2, [r3]
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= BootConfig;
 1477              		.loc 1 832 0
 1478 0030 064B     		ldr	r3, .L95
 1479 0032 064A     		ldr	r2, .L95
 1480 0034 1278     		ldrb	r2, [r2]
 1481 0036 D1B2     		uxtb	r1, r2
 1482 0038 FA79     		ldrb	r2, [r7, #7]
 1483 003a 0A43     		orrs	r2, r2, r1
 1484 003c D2B2     		uxtb	r2, r2
 1485 003e 1A70     		strb	r2, [r3]
 1486              	.L93:
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 1487              		.loc 1 835 0
 1488 0040 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1489              		.loc 1 836 0
 1490 0042 1846     		mov	r0, r3
 1491 0044 1037     		adds	r7, r7, #16
 1492 0046 BD46     		mov	sp, r7
 1493              		@ sp needed
 1494 0048 80BD     		pop	{r7, pc}
 1495              	.L96:
 1496 004a 00BF     		.align	2
 1497              	.L95:
 1498 004c 143C0240 		.word	1073888276
ARM GAS  /tmp/ccEjlq4p.s 			page 52


 1499              		.cfi_endproc
 1500              	.LFE139:
 1502              		.section	.text.FLASH_OB_EnablePCROP,"ax",%progbits
 1503              		.align	2
 1504              		.thumb
 1505              		.thumb_func
 1507              	FLASH_OB_EnablePCROP:
 1508              	.LFB140:
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Enable the read/write protection (PCROP) of the desired 
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         sectors of Bank 1 and/or Bank 2.
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  SectorBank1 Specifies the sector(s) to be read/write protected or unprotected for bank1
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_SECTOR_0 and OB_PCROP_SECTOR_11
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_SECTOR__All                         
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  SectorBank2 Specifies the sector(s) to be read/write protected or unprotected for bank2
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_SECTOR_12 and OB_PCROP_SECTOR_23
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_SECTOR__All                         
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks Enable PCROP protection on all the sectors for the specific bank
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: WRP on all sectors of bank1
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: WRP on all sectors of bank2
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status  
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t 
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 1509              		.loc 1 859 0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 24
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513 0000 80B5     		push	{r7, lr}
 1514              	.LCFI43:
 1515              		.cfi_def_cfa_offset 8
 1516              		.cfi_offset 7, -8
 1517              		.cfi_offset 14, -4
 1518 0002 86B0     		sub	sp, sp, #24
 1519              	.LCFI44:
 1520              		.cfi_def_cfa_offset 32
 1521 0004 00AF     		add	r7, sp, #0
 1522              	.LCFI45:
 1523              		.cfi_def_cfa_register 7
 1524 0006 F860     		str	r0, [r7, #12]
 1525 0008 B960     		str	r1, [r7, #8]
 1526 000a 7A60     		str	r2, [r7, #4]
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1527              		.loc 1 860 0
 1528 000c 0023     		movs	r3, #0
 1529 000e FB75     		strb	r3, [r7, #23]
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
ARM GAS  /tmp/ccEjlq4p.s 			page 53


 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1530              		.loc 1 865 0
 1531 0010 4CF25030 		movw	r0, #50000
 1532 0014 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1533 0018 0346     		mov	r3, r0
 1534 001a FB75     		strb	r3, [r7, #23]
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
 1535              		.loc 1 867 0
 1536 001c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1537 001e 002B     		cmp	r3, #0
 1538 0020 2DD1     		bne	.L98
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 1539              		.loc 1 869 0
 1540 0022 7B68     		ldr	r3, [r7, #4]
 1541 0024 012B     		cmp	r3, #1
 1542 0026 02D0     		beq	.L99
 1543              		.loc 1 869 0 is_stmt 0 discriminator 1
 1544 0028 7B68     		ldr	r3, [r7, #4]
 1545 002a 032B     		cmp	r3, #3
 1546 002c 09D1     		bne	.L100
 1547              	.L99:
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank1));
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK1*/
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)SectorBank1; 
 1548              		.loc 1 873 0 is_stmt 1
 1549 002e 164B     		ldr	r3, .L103
 1550 0030 154A     		ldr	r2, .L103
 1551 0032 1288     		ldrh	r2, [r2]	@ movhi
 1552 0034 91B2     		uxth	r1, r2
 1553 0036 FA68     		ldr	r2, [r7, #12]
 1554 0038 92B2     		uxth	r2, r2
 1555 003a 0A43     		orrs	r2, r2, r1
 1556 003c 92B2     		uxth	r2, r2
 1557 003e 1A80     		strh	r2, [r3]	@ movhi
 1558 0040 08E0     		b	.L101
 1559              	.L100:
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else 
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank2));
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK2*/
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2; 
 1560              		.loc 1 879 0
 1561 0042 124B     		ldr	r3, .L103+4
 1562 0044 114A     		ldr	r2, .L103+4
 1563 0046 1288     		ldrh	r2, [r2]	@ movhi
 1564 0048 91B2     		uxth	r1, r2
 1565 004a BA68     		ldr	r2, [r7, #8]
 1566 004c 92B2     		uxth	r2, r2
 1567 004e 0A43     		orrs	r2, r2, r1
 1568 0050 92B2     		uxth	r2, r2
 1569 0052 1A80     		strh	r2, [r3]	@ movhi
 1570              	.L101:
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
ARM GAS  /tmp/ccEjlq4p.s 			page 54


 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Write protection on all sector  of BANK2*/
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if(Banks == FLASH_BANK_BOTH)
 1571              		.loc 1 883 0
 1572 0054 7B68     		ldr	r3, [r7, #4]
 1573 0056 032B     		cmp	r3, #3
 1574 0058 11D1     		bne	.L98
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank2));
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /* Wait for last operation to be completed */
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1575              		.loc 1 887 0
 1576 005a 4CF25030 		movw	r0, #50000
 1577 005e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1578 0062 0346     		mov	r3, r0
 1579 0064 FB75     		strb	r3, [r7, #23]
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       if(status == HAL_OK)
 1580              		.loc 1 889 0
 1581 0066 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1582 0068 002B     		cmp	r3, #0
 1583 006a 08D1     		bne	.L98
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       { 
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         /*Write protection done on sectors of BANK2*/
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2; 
 1584              		.loc 1 892 0
 1585 006c 074B     		ldr	r3, .L103+4
 1586 006e 074A     		ldr	r2, .L103+4
 1587 0070 1288     		ldrh	r2, [r2]	@ movhi
 1588 0072 91B2     		uxth	r1, r2
 1589 0074 BA68     		ldr	r2, [r7, #8]
 1590 0076 92B2     		uxth	r2, r2
 1591 0078 0A43     		orrs	r2, r2, r1
 1592 007a 92B2     		uxth	r2, r2
 1593 007c 1A80     		strh	r2, [r3]	@ movhi
 1594              	.L98:
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       }
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 1595              		.loc 1 898 0
 1596 007e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1597              		.loc 1 899 0
 1598 0080 1846     		mov	r0, r3
 1599 0082 1837     		adds	r7, r7, #24
 1600 0084 BD46     		mov	sp, r7
 1601              		@ sp needed
 1602 0086 80BD     		pop	{r7, pc}
 1603              	.L104:
 1604              		.align	2
 1605              	.L103:
 1606 0088 163C0240 		.word	1073888278
 1607 008c 1A3C0240 		.word	1073888282
 1608              		.cfi_endproc
ARM GAS  /tmp/ccEjlq4p.s 			page 55


 1609              	.LFE140:
 1611              		.section	.text.FLASH_OB_DisablePCROP,"ax",%progbits
 1612              		.align	2
 1613              		.thumb
 1614              		.thumb_func
 1616              	FLASH_OB_DisablePCROP:
 1617              	.LFB141:
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Disable the read/write protection (PCROP) of the desired 
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         sectors  of Bank 1 and/or Bank 2.
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  SectorBank1 specifies the sector(s) to be read/write protected or unprotected for bank1
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_SECTOR_0 and OB_PCROP_SECTOR_11
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_SECTOR__All                         
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  SectorBank2 Specifies the sector(s) to be read/write protected or unprotected for bank2
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_SECTOR_12 and OB_PCROP_SECTOR_23
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_SECTOR__All                         
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks Disable PCROP protection on all the sectors for the specific bank
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: WRP on all sectors of bank1
 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_2: WRP on all sectors of bank2
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status  
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {  
 1618              		.loc 1 923 0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 24
 1621              		@ frame_needed = 1, uses_anonymous_args = 0
 1622 0000 80B5     		push	{r7, lr}
 1623              	.LCFI46:
 1624              		.cfi_def_cfa_offset 8
 1625              		.cfi_offset 7, -8
 1626              		.cfi_offset 14, -4
 1627 0002 86B0     		sub	sp, sp, #24
 1628              	.LCFI47:
 1629              		.cfi_def_cfa_offset 32
 1630 0004 00AF     		add	r7, sp, #0
 1631              	.LCFI48:
 1632              		.cfi_def_cfa_register 7
 1633 0006 F860     		str	r0, [r7, #12]
 1634 0008 B960     		str	r1, [r7, #8]
 1635 000a 7A60     		str	r2, [r7, #4]
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1636              		.loc 1 924 0
 1637 000c 0023     		movs	r3, #0
 1638 000e FB75     		strb	r3, [r7, #23]
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
ARM GAS  /tmp/ccEjlq4p.s 			page 56


 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1639              		.loc 1 930 0
 1640 0010 4CF25030 		movw	r0, #50000
 1641 0014 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1642 0018 0346     		mov	r3, r0
 1643 001a FB75     		strb	r3, [r7, #23]
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
 1644              		.loc 1 932 0
 1645 001c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1646 001e 002B     		cmp	r3, #0
 1647 0020 33D1     		bne	.L106
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 1648              		.loc 1 934 0
 1649 0022 7B68     		ldr	r3, [r7, #4]
 1650 0024 012B     		cmp	r3, #1
 1651 0026 02D0     		beq	.L107
 1652              		.loc 1 934 0 is_stmt 0 discriminator 1
 1653 0028 7B68     		ldr	r3, [r7, #4]
 1654 002a 032B     		cmp	r3, #3
 1655 002c 0BD1     		bne	.L108
 1656              	.L107:
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank1));
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK1*/
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~SectorBank1); 
 1657              		.loc 1 938 0 is_stmt 1
 1658 002e 194B     		ldr	r3, .L111
 1659 0030 184A     		ldr	r2, .L111
 1660 0032 1288     		ldrh	r2, [r2]	@ movhi
 1661 0034 91B2     		uxth	r1, r2
 1662 0036 FA68     		ldr	r2, [r7, #12]
 1663 0038 92B2     		uxth	r2, r2
 1664 003a D243     		mvns	r2, r2
 1665 003c 92B2     		uxth	r2, r2
 1666 003e 0A40     		ands	r2, r2, r1
 1667 0040 92B2     		uxth	r2, r2
 1668 0042 1A80     		strh	r2, [r3]	@ movhi
 1669 0044 0AE0     		b	.L109
 1670              	.L108:
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     else 
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       /*Write protection done on sectors of BANK2*/
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank2));
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2); 
 1671              		.loc 1 944 0
 1672 0046 144B     		ldr	r3, .L111+4
 1673 0048 134A     		ldr	r2, .L111+4
 1674 004a 1288     		ldrh	r2, [r2]	@ movhi
 1675 004c 91B2     		uxth	r1, r2
 1676 004e BA68     		ldr	r2, [r7, #8]
 1677 0050 92B2     		uxth	r2, r2
 1678 0052 D243     		mvns	r2, r2
 1679 0054 92B2     		uxth	r2, r2
ARM GAS  /tmp/ccEjlq4p.s 			page 57


 1680 0056 0A40     		ands	r2, r2, r1
 1681 0058 92B2     		uxth	r2, r2
 1682 005a 1A80     		strh	r2, [r3]	@ movhi
 1683              	.L109:
 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /*Write protection on all sector  of BANK2*/
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     if(Banks == FLASH_BANK_BOTH)
 1684              		.loc 1 948 0
 1685 005c 7B68     		ldr	r3, [r7, #4]
 1686 005e 032B     		cmp	r3, #3
 1687 0060 13D1     		bne	.L106
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     {
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       assert_param(IS_OB_PCROP(SectorBank2));
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****      /* Wait for last operation to be completed */
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1688              		.loc 1 952 0
 1689 0062 4CF25030 		movw	r0, #50000
 1690 0066 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1691 006a 0346     		mov	r3, r0
 1692 006c FB75     		strb	r3, [r7, #23]
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       if(status == HAL_OK)
 1693              		.loc 1 954 0
 1694 006e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1695 0070 002B     		cmp	r3, #0
 1696 0072 0AD1     		bne	.L106
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       { 
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         /*Write protection done on sectors of BANK2*/
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2); 
 1697              		.loc 1 957 0
 1698 0074 084B     		ldr	r3, .L111+4
 1699 0076 084A     		ldr	r2, .L111+4
 1700 0078 1288     		ldrh	r2, [r2]	@ movhi
 1701 007a 91B2     		uxth	r1, r2
 1702 007c BA68     		ldr	r2, [r7, #8]
 1703 007e 92B2     		uxth	r2, r2
 1704 0080 D243     		mvns	r2, r2
 1705 0082 92B2     		uxth	r2, r2
 1706 0084 0A40     		ands	r2, r2, r1
 1707 0086 92B2     		uxth	r2, r2
 1708 0088 1A80     		strh	r2, [r3]	@ movhi
 1709              	.L106:
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****       }
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     }
 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 1710              		.loc 1 963 0
 1711 008a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1712              		.loc 1 965 0
 1713 008c 1846     		mov	r0, r3
 1714 008e 1837     		adds	r7, r7, #24
 1715 0090 BD46     		mov	sp, r7
ARM GAS  /tmp/ccEjlq4p.s 			page 58


 1716              		@ sp needed
 1717 0092 80BD     		pop	{r7, pc}
 1718              	.L112:
 1719              		.align	2
 1720              	.L111:
 1721 0094 163C0240 		.word	1073888278
 1722 0098 1A3C0240 		.word	1073888282
 1723              		.cfi_endproc
 1724              	.LFE141:
 1726              		.section	.text.FLASH_OB_RDP_LevelConfig,"ax",%progbits
 1727              		.align	2
 1728              		.thumb
 1729              		.thumb_func
 1731              	FLASH_OB_RDP_LevelConfig:
 1732              	.LFB142:
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx) ||
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) ||
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F410Rx) || defined(STM32F411xE) || defined(STM32F446xx) 
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Mass erase of FLASH memory
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Banks to be erased
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: Bank1 to be erased
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* If the previous operation is completed, proceed to erase all sectors */
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_MER;
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Erase the specified FLASH memory sector
ARM GAS  /tmp/ccEjlq4p.s 			page 59


1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Sector: FLASH sector to erase
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series      
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_1: when the device voltage range is 1.8V to 2.1V, 
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by byte (8-bit) 
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_2: when the device voltage range is 2.1V to 2.7V,
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by half word (16-bit)
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_3: when the device voltage range is 2.7V to 3.6V,
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by word (32-bit)
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_VOLTAGE_RANGE_4: when the device voltage range is 2.7V to 3.6V + External
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *                                  the operation will be done by double word (64-bit)
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval None
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint32_t tmp_psize = 0;
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_SECTOR(Sector));
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****      tmp_psize = FLASH_PSIZE_BYTE;
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_WORD;
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* If the previous operation is completed, proceed to erase the sector */
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= tmp_psize;
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   FLASH->CR |= FLASH_CR_STRT;
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Enable the write protection of the desired bank 1 sectors
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  WRPSector: specifies the sector(s) to be write protected.
ARM GAS  /tmp/ccEjlq4p.s 			page 60


1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series 
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Enable write protection on all the sectors for the specific bank
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: WRP on all sectors of bank1
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status 
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Disable the write protection of the desired bank 1 sectors
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  WRPSector: specifies the sector(s) to be write protected.
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         The value of this parameter depend on device used within the same series 
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * 
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Banks: Enable write protection on all the sectors for the specific bank
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg FLASH_BANK_1: WRP on all sectors of bank1
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status 
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_WRP_SECTOR(WRPSector));
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_FLASH_BANK(Banks));
1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
ARM GAS  /tmp/ccEjlq4p.s 			page 61


1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F40xxx || STM32F41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx  *
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) ||
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     defined(STM32F411xE) || defined(STM32F446xx) 
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Enable the read/write protection (PCROP) of the desired sectors.
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F401xx devices.
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Sector specifies the sector(s) to be read/write protected or unprotected.
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_Sector_All                         
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status  
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t Sector)
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_PCROP(Sector));
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */  
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)Sector;
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Disable the read/write protection (PCROP) of the desired sectors.
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note   This function can be used only for STM32F401xx devices.
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Sector specifies the sector(s) to be read/write protected or unprotected.
1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_PCROP_Sector_All                         
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status  
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t Sector)
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {  
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_PCROP(Sector));
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */  
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
ARM GAS  /tmp/ccEjlq4p.s 			page 62


1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~Sector);
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F411xE || STM32F446xx  */
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Set the read protection level.
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Level: specifies the read protection level.
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_0: No protection
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_1: Read protection of the memory
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_2: Full chip protection
1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *   
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *    
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 1733              		.loc 1 1201 0
 1734              		.cfi_startproc
 1735              		@ args = 0, pretend = 0, frame = 16
 1736              		@ frame_needed = 1, uses_anonymous_args = 0
 1737 0000 80B5     		push	{r7, lr}
 1738              	.LCFI49:
 1739              		.cfi_def_cfa_offset 8
 1740              		.cfi_offset 7, -8
 1741              		.cfi_offset 14, -4
 1742 0002 84B0     		sub	sp, sp, #16
 1743              	.LCFI50:
 1744              		.cfi_def_cfa_offset 24
 1745 0004 00AF     		add	r7, sp, #0
 1746              	.LCFI51:
 1747              		.cfi_def_cfa_register 7
 1748 0006 0346     		mov	r3, r0
 1749 0008 FB71     		strb	r3, [r7, #7]
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1750              		.loc 1 1202 0
 1751 000a 0023     		movs	r3, #0
 1752 000c FB73     		strb	r3, [r7, #15]
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_RDP_LEVEL(Level));
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1753              		.loc 1 1208 0
 1754 000e 4CF25030 		movw	r0, #50000
 1755 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1756 0016 0346     		mov	r3, r0
 1757 0018 FB73     		strb	r3, [r7, #15]
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
ARM GAS  /tmp/ccEjlq4p.s 			page 63


 1758              		.loc 1 1210 0
 1759 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1760 001c 002B     		cmp	r3, #0
 1761 001e 02D1     		bne	.L114
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   { 
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 1762              		.loc 1 1212 0
 1763 0020 034B     		ldr	r3, .L116
 1764 0022 FA79     		ldrb	r2, [r7, #7]
 1765 0024 1A70     		strb	r2, [r3]
 1766              	.L114:
1213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status;
 1767              		.loc 1 1215 0
 1768 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1769              		.loc 1 1216 0
 1770 0028 1846     		mov	r0, r3
 1771 002a 1037     		adds	r7, r7, #16
 1772 002c BD46     		mov	sp, r7
 1773              		@ sp needed
 1774 002e 80BD     		pop	{r7, pc}
 1775              	.L117:
 1776              		.align	2
 1777              	.L116:
 1778 0030 153C0240 		.word	1073888277
 1779              		.cfi_endproc
 1780              	.LFE142:
 1782              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 1783              		.align	2
 1784              		.thumb
 1785              		.thumb_func
 1787              	FLASH_OB_UserConfig:
 1788              	.LFB143:
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Program the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Iwdg: Selects the IWDG mode
1221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
1223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Stop: Reset event when entering STOP mode.
1225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_STOP_NO_RST: No reset generated when entering in STOP
1227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
1228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Stdby: Reset event when entering Standby mode.
1229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter  can be one of the following values:
1230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
1231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
1232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
1233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
1235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 1789              		.loc 1 1235 0
 1790              		.cfi_startproc
 1791              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccEjlq4p.s 			page 64


 1792              		@ frame_needed = 1, uses_anonymous_args = 0
 1793 0000 80B5     		push	{r7, lr}
 1794              	.LCFI52:
 1795              		.cfi_def_cfa_offset 8
 1796              		.cfi_offset 7, -8
 1797              		.cfi_offset 14, -4
 1798 0002 84B0     		sub	sp, sp, #16
 1799              	.LCFI53:
 1800              		.cfi_def_cfa_offset 24
 1801 0004 00AF     		add	r7, sp, #0
 1802              	.LCFI54:
 1803              		.cfi_def_cfa_register 7
 1804 0006 1346     		mov	r3, r2
 1805 0008 0246     		mov	r2, r0
 1806 000a FA71     		strb	r2, [r7, #7]
 1807 000c 0A46     		mov	r2, r1
 1808 000e BA71     		strb	r2, [r7, #6]
 1809 0010 7B71     		strb	r3, [r7, #5]
1236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint8_t optiontmp = 0xFF;
 1810              		.loc 1 1236 0
 1811 0012 FF23     		movs	r3, #255
 1812 0014 FB73     		strb	r3, [r7, #15]
1237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1813              		.loc 1 1237 0
 1814 0016 0023     		movs	r3, #0
 1815 0018 BB73     		strb	r3, [r7, #14]
1238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_IWDG_SOURCE(Iwdg));
1241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_STOP_SOURCE(Stop));
1242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_STDBY_SOURCE(Stdby));
1243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Wait for last operation to be completed */
1245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 1816              		.loc 1 1245 0
 1817 001a 4CF25030 		movw	r0, #50000
 1818 001e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1819 0022 0346     		mov	r3, r0
 1820 0024 BB73     		strb	r3, [r7, #14]
1246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if(status == HAL_OK)
 1821              		.loc 1 1247 0
 1822 0026 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1823 0028 002B     		cmp	r3, #0
 1824 002a 11D1     		bne	.L119
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {     
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 1825              		.loc 1 1250 0
 1826 002c 0B4B     		ldr	r3, .L121
 1827 002e 1B78     		ldrb	r3, [r3]
 1828 0030 DBB2     		uxtb	r3, r3
 1829 0032 03F01F03 		and	r3, r3, #31
 1830 0036 FB73     		strb	r3, [r7, #15]
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     /* Update User Option Byte */
1253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)opti
ARM GAS  /tmp/ccEjlq4p.s 			page 65


 1831              		.loc 1 1253 0
 1832 0038 084B     		ldr	r3, .L121
 1833 003a B979     		ldrb	r1, [r7, #6]
 1834 003c FA7B     		ldrb	r2, [r7, #15]
 1835 003e 0A43     		orrs	r2, r2, r1
 1836 0040 D1B2     		uxtb	r1, r2
 1837 0042 7A79     		ldrb	r2, [r7, #5]
 1838 0044 0A43     		orrs	r2, r2, r1
 1839 0046 D1B2     		uxtb	r1, r2
 1840 0048 FA79     		ldrb	r2, [r7, #7]
 1841 004a 0A43     		orrs	r2, r2, r1
 1842 004c D2B2     		uxtb	r2, r2
 1843 004e 1A70     		strb	r2, [r3]
 1844              	.L119:
1254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return status; 
 1845              		.loc 1 1256 0
 1846 0050 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
1257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1847              		.loc 1 1257 0
 1848 0052 1846     		mov	r0, r3
 1849 0054 1037     		adds	r7, r7, #16
 1850 0056 BD46     		mov	sp, r7
 1851              		@ sp needed
 1852 0058 80BD     		pop	{r7, pc}
 1853              	.L122:
 1854 005a 00BF     		.align	2
 1855              	.L121:
 1856 005c 143C0240 		.word	1073888276
 1857              		.cfi_endproc
 1858              	.LFE143:
 1860              		.section	.text.FLASH_OB_BOR_LevelConfig,"ax",%progbits
 1861              		.align	2
 1862              		.thumb
 1863              		.thumb_func
 1865              	FLASH_OB_BOR_LevelConfig:
 1866              	.LFB144:
1258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Set the BOR Level. 
1261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @param  Level: specifies the Option Bytes BOR Reset Level.
1262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *          This parameter can be one of the following values:
1263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval HAL Status
1268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
1270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 1867              		.loc 1 1270 0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 8
 1870              		@ frame_needed = 1, uses_anonymous_args = 0
 1871              		@ link register save eliminated.
 1872 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccEjlq4p.s 			page 66


 1873              	.LCFI55:
 1874              		.cfi_def_cfa_offset 4
 1875              		.cfi_offset 7, -4
 1876 0002 83B0     		sub	sp, sp, #12
 1877              	.LCFI56:
 1878              		.cfi_def_cfa_offset 16
 1879 0004 00AF     		add	r7, sp, #0
 1880              	.LCFI57:
 1881              		.cfi_def_cfa_register 7
 1882 0006 0346     		mov	r3, r0
 1883 0008 FB71     		strb	r3, [r7, #7]
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Check the parameters */
1272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   assert_param(IS_OB_BOR_LEVEL(Level));
1273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Set the BOR Level */
1275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 1884              		.loc 1 1275 0
 1885 000a 0B4B     		ldr	r3, .L125
 1886 000c 0A4A     		ldr	r2, .L125
 1887 000e 1278     		ldrb	r2, [r2]
 1888 0010 D2B2     		uxtb	r2, r2
 1889 0012 22F00C02 		bic	r2, r2, #12
 1890 0016 D2B2     		uxtb	r2, r2
 1891 0018 1A70     		strb	r2, [r3]
1276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 1892              		.loc 1 1276 0
 1893 001a 074B     		ldr	r3, .L125
 1894 001c 064A     		ldr	r2, .L125
 1895 001e 1278     		ldrb	r2, [r2]
 1896 0020 D1B2     		uxtb	r1, r2
 1897 0022 FA79     		ldrb	r2, [r7, #7]
 1898 0024 0A43     		orrs	r2, r2, r1
 1899 0026 D2B2     		uxtb	r2, r2
 1900 0028 1A70     		strb	r2, [r3]
1277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return HAL_OK;
 1901              		.loc 1 1278 0
 1902 002a 0023     		movs	r3, #0
1279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1903              		.loc 1 1280 0
 1904 002c 1846     		mov	r0, r3
 1905 002e 0C37     		adds	r7, r7, #12
 1906 0030 BD46     		mov	sp, r7
 1907              		@ sp needed
 1908 0032 5DF8047B 		ldr	r7, [sp], #4
 1909 0036 7047     		bx	lr
 1910              	.L126:
 1911              		.align	2
 1912              	.L125:
 1913 0038 143C0240 		.word	1073888276
 1914              		.cfi_endproc
 1915              	.LFE144:
 1917              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 1918              		.align	2
 1919              		.thumb
 1920              		.thumb_func
ARM GAS  /tmp/ccEjlq4p.s 			page 67


 1922              	FLASH_OB_GetUser:
 1923              	.LFB145:
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Return the FLASH User Option Byte value.
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
1285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         and RST_STDBY(Bit2).
1286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetUser(void)
1288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 1924              		.loc 1 1288 0
 1925              		.cfi_startproc
 1926              		@ args = 0, pretend = 0, frame = 0
 1927              		@ frame_needed = 1, uses_anonymous_args = 0
 1928              		@ link register save eliminated.
 1929 0000 80B4     		push	{r7}
 1930              	.LCFI58:
 1931              		.cfi_def_cfa_offset 4
 1932              		.cfi_offset 7, -4
 1933 0002 00AF     		add	r7, sp, #0
 1934              	.LCFI59:
 1935              		.cfi_def_cfa_register 7
1289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Return the User Option Byte */
1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return ((uint8_t)(FLASH->OPTCR & 0xE0));
 1936              		.loc 1 1290 0
 1937 0004 054B     		ldr	r3, .L129
 1938 0006 5B69     		ldr	r3, [r3, #20]
 1939 0008 DBB2     		uxtb	r3, r3
 1940 000a 23F01F03 		bic	r3, r3, #31
 1941 000e DBB2     		uxtb	r3, r3
1291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1942              		.loc 1 1291 0
 1943 0010 1846     		mov	r0, r3
 1944 0012 BD46     		mov	sp, r7
 1945              		@ sp needed
 1946 0014 5DF8047B 		ldr	r7, [sp], #4
 1947 0018 7047     		bx	lr
 1948              	.L130:
 1949 001a 00BF     		.align	2
 1950              	.L129:
 1951 001c 003C0240 		.word	1073888256
 1952              		.cfi_endproc
 1953              	.LFE145:
 1955              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 1956              		.align	2
 1957              		.thumb
 1958              		.thumb_func
 1960              	FLASH_OB_GetWRP:
 1961              	.LFB146:
1292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Return the FLASH Write Protection Option Bytes value.
1295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval uint16_t FLASH Write Protection Option Bytes value
1296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint16_t FLASH_OB_GetWRP(void)
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 1962              		.loc 1 1298 0
ARM GAS  /tmp/ccEjlq4p.s 			page 68


 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 0
 1965              		@ frame_needed = 1, uses_anonymous_args = 0
 1966              		@ link register save eliminated.
 1967 0000 80B4     		push	{r7}
 1968              	.LCFI60:
 1969              		.cfi_def_cfa_offset 4
 1970              		.cfi_offset 7, -4
 1971 0002 00AF     		add	r7, sp, #0
 1972              	.LCFI61:
 1973              		.cfi_def_cfa_register 7
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Return the FLASH write protection Register value */
1300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 1974              		.loc 1 1300 0
 1975 0004 034B     		ldr	r3, .L133
 1976 0006 1B88     		ldrh	r3, [r3]	@ movhi
 1977 0008 9BB2     		uxth	r3, r3
1301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 1978              		.loc 1 1301 0
 1979 000a 1846     		mov	r0, r3
 1980 000c BD46     		mov	sp, r7
 1981              		@ sp needed
 1982 000e 5DF8047B 		ldr	r7, [sp], #4
 1983 0012 7047     		bx	lr
 1984              	.L134:
 1985              		.align	2
 1986              	.L133:
 1987 0014 163C0240 		.word	1073888278
 1988              		.cfi_endproc
 1989              	.LFE146:
 1991              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 1992              		.align	2
 1993              		.thumb
 1994              		.thumb_func
 1996              	FLASH_OB_GetRDP:
 1997              	.LFB147:
1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Returns the FLASH Read Protection level.
1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval FLASH ReadOut Protection Status:
1306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *         This parameter can be one of the following values:
1307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_0: No protection
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_1: Read protection of the memory
1309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *            @arg OB_RDP_LEVEL_2: Full chip protection
1310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetRDP(void)
1312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 1998              		.loc 1 1312 0
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 8
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002              		@ link register save eliminated.
 2003 0000 80B4     		push	{r7}
 2004              	.LCFI62:
 2005              		.cfi_def_cfa_offset 4
 2006              		.cfi_offset 7, -4
 2007 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccEjlq4p.s 			page 69


 2008              	.LCFI63:
 2009              		.cfi_def_cfa_offset 16
 2010 0004 00AF     		add	r7, sp, #0
 2011              	.LCFI64:
 2012              		.cfi_def_cfa_register 7
1313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   uint8_t readstatus = OB_RDP_LEVEL_0;
 2013              		.loc 1 1313 0
 2014 0006 AA23     		movs	r3, #170
 2015 0008 FB71     		strb	r3, [r7, #7]
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 2016              		.loc 1 1315 0
 2017 000a 0C4B     		ldr	r3, .L140
 2018 000c 1B78     		ldrb	r3, [r3]
 2019 000e DBB2     		uxtb	r3, r3
 2020 0010 CC2B     		cmp	r3, #204
 2021 0012 02D1     		bne	.L136
1316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     readstatus = OB_RDP_LEVEL_2;
 2022              		.loc 1 1317 0
 2023 0014 CC23     		movs	r3, #204
 2024 0016 FB71     		strb	r3, [r7, #7]
 2025 0018 09E0     		b	.L137
 2026              	.L136:
1318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_1))
 2027              		.loc 1 1319 0
 2028 001a 084B     		ldr	r3, .L140
 2029 001c 1B78     		ldrb	r3, [r3]
 2030 001e DBB2     		uxtb	r3, r3
 2031 0020 552B     		cmp	r3, #85
 2032 0022 02D1     		bne	.L138
1320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
1321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     readstatus = OB_RDP_LEVEL_1;
 2033              		.loc 1 1321 0
 2034 0024 5523     		movs	r3, #85
 2035 0026 FB71     		strb	r3, [r7, #7]
 2036 0028 01E0     		b	.L137
 2037              	.L138:
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   else 
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   {
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****     readstatus = OB_RDP_LEVEL_0;
 2038              		.loc 1 1325 0
 2039 002a AA23     		movs	r3, #170
 2040 002c FB71     		strb	r3, [r7, #7]
 2041              	.L137:
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   }
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return readstatus;
 2042              		.loc 1 1328 0
 2043 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 2044              		.loc 1 1329 0
 2045 0030 1846     		mov	r0, r3
 2046 0032 0C37     		adds	r7, r7, #12
 2047 0034 BD46     		mov	sp, r7
ARM GAS  /tmp/ccEjlq4p.s 			page 70


 2048              		@ sp needed
 2049 0036 5DF8047B 		ldr	r7, [sp], #4
 2050 003a 7047     		bx	lr
 2051              	.L141:
 2052              		.align	2
 2053              	.L140:
 2054 003c 153C0240 		.word	1073888277
 2055              		.cfi_endproc
 2056              	.LFE147:
 2058              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
 2059              		.align	2
 2060              		.thumb
 2061              		.thumb_func
 2063              	FLASH_OB_GetBOR:
 2064              	.LFB148:
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** 
1331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** /**
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @brief  Returns the FLASH BOR level.
1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   * @retval uint8_t The FLASH BOR level:
1334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   */
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** static uint8_t FLASH_OB_GetBOR(void)
1340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** {
 2065              		.loc 1 1340 0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 0
 2068              		@ frame_needed = 1, uses_anonymous_args = 0
 2069              		@ link register save eliminated.
 2070 0000 80B4     		push	{r7}
 2071              	.LCFI65:
 2072              		.cfi_def_cfa_offset 4
 2073              		.cfi_offset 7, -4
 2074 0002 00AF     		add	r7, sp, #0
 2075              	.LCFI66:
 2076              		.cfi_def_cfa_register 7
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   /* Return the FLASH BOR level */
1342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c ****   return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 2077              		.loc 1 1342 0
 2078 0004 054B     		ldr	r3, .L144
 2079 0006 1B78     		ldrb	r3, [r3]
 2080 0008 DBB2     		uxtb	r3, r3
 2081 000a 03F00C03 		and	r3, r3, #12
 2082 000e DBB2     		uxtb	r3, r3
1343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c **** }
 2083              		.loc 1 1343 0
 2084 0010 1846     		mov	r0, r3
 2085 0012 BD46     		mov	sp, r7
 2086              		@ sp needed
 2087 0014 5DF8047B 		ldr	r7, [sp], #4
 2088 0018 7047     		bx	lr
 2089              	.L145:
 2090 001a 00BF     		.align	2
 2091              	.L144:
 2092 001c 143C0240 		.word	1073888276
ARM GAS  /tmp/ccEjlq4p.s 			page 71


 2093              		.cfi_endproc
 2094              	.LFE148:
 2096              		.text
 2097              	.Letext0:
 2098              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2099              		.file 4 "/usr/include/newlib/stdint.h"
 2100              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 2101              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2102              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_flash.h"
 2103              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_flash_ex.h"
 2104              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccEjlq4p.s 			page 72


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_flash_ex.c
     /tmp/ccEjlq4p.s:20     .text.HAL_FLASHEx_Erase:0000000000000000 $t
     /tmp/ccEjlq4p.s:25     .text.HAL_FLASHEx_Erase:0000000000000000 HAL_FLASHEx_Erase
     /tmp/ccEjlq4p.s:914    .text.FLASH_MassErase:0000000000000000 FLASH_MassErase
     /tmp/ccEjlq4p.s:1007   .text.FLASH_Erase_Sector:0000000000000000 FLASH_Erase_Sector
     /tmp/ccEjlq4p.s:467    .text.FLASH_FlushCaches:0000000000000000 FLASH_FlushCaches
     /tmp/ccEjlq4p.s:174    .text.HAL_FLASHEx_Erase:00000000000000dc $d
     /tmp/ccEjlq4p.s:180    .text.HAL_FLASHEx_Erase_IT:0000000000000000 $t
     /tmp/ccEjlq4p.s:185    .text.HAL_FLASHEx_Erase_IT:0000000000000000 HAL_FLASHEx_Erase_IT
     /tmp/ccEjlq4p.s:302    .text.HAL_FLASHEx_Erase_IT:00000000000000a4 $d
     /tmp/ccEjlq4p.s:308    .text.HAL_FLASHEx_OBProgram:0000000000000000 $t
     /tmp/ccEjlq4p.s:313    .text.HAL_FLASHEx_OBProgram:0000000000000000 HAL_FLASHEx_OBProgram
     /tmp/ccEjlq4p.s:1140   .text.FLASH_OB_EnableWRP:0000000000000000 FLASH_OB_EnableWRP
     /tmp/ccEjlq4p.s:1293   .text.FLASH_OB_DisableWRP:0000000000000000 FLASH_OB_DisableWRP
     /tmp/ccEjlq4p.s:1731   .text.FLASH_OB_RDP_LevelConfig:0000000000000000 FLASH_OB_RDP_LevelConfig
     /tmp/ccEjlq4p.s:1787   .text.FLASH_OB_UserConfig:0000000000000000 FLASH_OB_UserConfig
     /tmp/ccEjlq4p.s:1865   .text.FLASH_OB_BOR_LevelConfig:0000000000000000 FLASH_OB_BOR_LevelConfig
     /tmp/ccEjlq4p.s:457    .text.HAL_FLASHEx_OBProgram:00000000000000dc $d
     /tmp/ccEjlq4p.s:462    .text.FLASH_FlushCaches:0000000000000000 $t
     /tmp/ccEjlq4p.s:549    .text.FLASH_FlushCaches:0000000000000084 $d
     /tmp/ccEjlq4p.s:554    .text.HAL_FLASHEx_OBGetConfig:0000000000000000 $t
     /tmp/ccEjlq4p.s:559    .text.HAL_FLASHEx_OBGetConfig:0000000000000000 HAL_FLASHEx_OBGetConfig
     /tmp/ccEjlq4p.s:1960   .text.FLASH_OB_GetWRP:0000000000000000 FLASH_OB_GetWRP
     /tmp/ccEjlq4p.s:1996   .text.FLASH_OB_GetRDP:0000000000000000 FLASH_OB_GetRDP
     /tmp/ccEjlq4p.s:1922   .text.FLASH_OB_GetUser:0000000000000000 FLASH_OB_GetUser
     /tmp/ccEjlq4p.s:2063   .text.FLASH_OB_GetBOR:0000000000000000 FLASH_OB_GetBOR
     /tmp/ccEjlq4p.s:614    .text.HAL_FLASHEx_AdvOBProgram:0000000000000000 $t
     /tmp/ccEjlq4p.s:619    .text.HAL_FLASHEx_AdvOBProgram:0000000000000000 HAL_FLASHEx_AdvOBProgram
     /tmp/ccEjlq4p.s:1507   .text.FLASH_OB_EnablePCROP:0000000000000000 FLASH_OB_EnablePCROP
     /tmp/ccEjlq4p.s:1616   .text.FLASH_OB_DisablePCROP:0000000000000000 FLASH_OB_DisablePCROP
     /tmp/ccEjlq4p.s:1438   .text.FLASH_OB_BootConfig:0000000000000000 FLASH_OB_BootConfig
     /tmp/ccEjlq4p.s:710    .text.HAL_FLASHEx_AdvOBGetConfig:0000000000000000 $t
     /tmp/ccEjlq4p.s:715    .text.HAL_FLASHEx_AdvOBGetConfig:0000000000000000 HAL_FLASHEx_AdvOBGetConfig
     /tmp/ccEjlq4p.s:760    .text.HAL_FLASHEx_AdvOBGetConfig:0000000000000030 $d
     /tmp/ccEjlq4p.s:767    .text.HAL_FLASHEx_OB_SelectPCROP:0000000000000000 $t
     /tmp/ccEjlq4p.s:772    .text.HAL_FLASHEx_OB_SelectPCROP:0000000000000000 HAL_FLASHEx_OB_SelectPCROP
     /tmp/ccEjlq4p.s:816    .text.HAL_FLASHEx_OB_SelectPCROP:0000000000000030 $d
     /tmp/ccEjlq4p.s:821    .text.HAL_FLASHEx_OB_DeSelectPCROP:0000000000000000 $t
     /tmp/ccEjlq4p.s:826    .text.HAL_FLASHEx_OB_DeSelectPCROP:0000000000000000 HAL_FLASHEx_OB_DeSelectPCROP
     /tmp/ccEjlq4p.s:868    .text.HAL_FLASHEx_OB_DeSelectPCROP:000000000000002c $d
     /tmp/ccEjlq4p.s:873    .text.HAL_FLASHEx_OB_GetBank2WRP:0000000000000000 $t
     /tmp/ccEjlq4p.s:878    .text.HAL_FLASHEx_OB_GetBank2WRP:0000000000000000 HAL_FLASHEx_OB_GetBank2WRP
     /tmp/ccEjlq4p.s:905    .text.HAL_FLASHEx_OB_GetBank2WRP:0000000000000014 $d
     /tmp/ccEjlq4p.s:910    .text.FLASH_MassErase:0000000000000000 $t
     /tmp/ccEjlq4p.s:997    .text.FLASH_MassErase:0000000000000078 $d
     /tmp/ccEjlq4p.s:1002   .text.FLASH_Erase_Sector:0000000000000000 $t
     /tmp/ccEjlq4p.s:1131   .text.FLASH_Erase_Sector:00000000000000ac $d
     /tmp/ccEjlq4p.s:1136   .text.FLASH_OB_EnableWRP:0000000000000000 $t
     /tmp/ccEjlq4p.s:1282   .text.FLASH_OB_EnableWRP:00000000000000d0 $d
     /tmp/ccEjlq4p.s:1289   .text.FLASH_OB_DisableWRP:0000000000000000 $t
     /tmp/ccEjlq4p.s:1427   .text.FLASH_OB_DisableWRP:00000000000000c0 $d
     /tmp/ccEjlq4p.s:1434   .text.FLASH_OB_BootConfig:0000000000000000 $t
     /tmp/ccEjlq4p.s:1498   .text.FLASH_OB_BootConfig:000000000000004c $d
     /tmp/ccEjlq4p.s:1503   .text.FLASH_OB_EnablePCROP:0000000000000000 $t
     /tmp/ccEjlq4p.s:1606   .text.FLASH_OB_EnablePCROP:0000000000000088 $d
     /tmp/ccEjlq4p.s:1612   .text.FLASH_OB_DisablePCROP:0000000000000000 $t
ARM GAS  /tmp/ccEjlq4p.s 			page 73


     /tmp/ccEjlq4p.s:1721   .text.FLASH_OB_DisablePCROP:0000000000000094 $d
     /tmp/ccEjlq4p.s:1727   .text.FLASH_OB_RDP_LevelConfig:0000000000000000 $t
     /tmp/ccEjlq4p.s:1778   .text.FLASH_OB_RDP_LevelConfig:0000000000000030 $d
     /tmp/ccEjlq4p.s:1783   .text.FLASH_OB_UserConfig:0000000000000000 $t
     /tmp/ccEjlq4p.s:1856   .text.FLASH_OB_UserConfig:000000000000005c $d
     /tmp/ccEjlq4p.s:1861   .text.FLASH_OB_BOR_LevelConfig:0000000000000000 $t
     /tmp/ccEjlq4p.s:1913   .text.FLASH_OB_BOR_LevelConfig:0000000000000038 $d
     /tmp/ccEjlq4p.s:1918   .text.FLASH_OB_GetUser:0000000000000000 $t
     /tmp/ccEjlq4p.s:1951   .text.FLASH_OB_GetUser:000000000000001c $d
     /tmp/ccEjlq4p.s:1956   .text.FLASH_OB_GetWRP:0000000000000000 $t
     /tmp/ccEjlq4p.s:1987   .text.FLASH_OB_GetWRP:0000000000000014 $d
     /tmp/ccEjlq4p.s:1992   .text.FLASH_OB_GetRDP:0000000000000000 $t
     /tmp/ccEjlq4p.s:2054   .text.FLASH_OB_GetRDP:000000000000003c $d
     /tmp/ccEjlq4p.s:2059   .text.FLASH_OB_GetBOR:0000000000000000 $t
     /tmp/ccEjlq4p.s:2092   .text.FLASH_OB_GetBOR:000000000000001c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
FLASH_WaitForLastOperation
pFlash
