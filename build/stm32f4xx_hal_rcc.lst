ARM GAS  /tmp/cco2UtZg.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_hal_rcc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	APBAHBPrescTable
  20              		.section	.rodata.APBAHBPrescTable,"a",%progbits
  21              		.align	2
  24              	APBAHBPrescTable:
  25 0000 00       		.byte	0
  26 0001 00       		.byte	0
  27 0002 00       		.byte	0
  28 0003 00       		.byte	0
  29 0004 01       		.byte	1
  30 0005 02       		.byte	2
  31 0006 03       		.byte	3
  32 0007 04       		.byte	4
  33 0008 01       		.byte	1
  34 0009 02       		.byte	2
  35 000a 03       		.byte	3
  36 000b 04       		.byte	4
  37 000c 06       		.byte	6
  38 000d 07       		.byte	7
  39 000e 08       		.byte	8
  40 000f 09       		.byte	9
  41              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  42              		.align	2
  43              		.weak	HAL_RCC_DeInit
  44              		.thumb
  45              		.thumb_func
  47              	HAL_RCC_DeInit:
  48              	.LFB125:
  49              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @file    stm32f4xx_hal_rcc.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @version V1.4.1
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @date    09-October-2015
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following 
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           + Peripheral Control functions
ARM GAS  /tmp/cco2UtZg.s 			page 2


  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *       
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   @verbatim                
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                       ##### RCC specific features #####
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]  
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       SRAM, Flash and JTAG.
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]          
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       Once the device started from reset, the user application has to:        
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                       ##### RCC Limitations #####
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ==============================================================================
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]  
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral 
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write 
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       from/to registers.
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) If peripheral is mapped on AHB: the delay is 2 AHB clock cycle 
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (+) If peripheral is mapped on APB: the delay is 2 APB clock cycle 
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]  
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       Possible Workarounds:
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (#) Enable the peripheral clock sometimes before the peripheral read/write 
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           register is required.
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (#) For AHB peripheral, insert two dummy read to the peripheral register.
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (#) For APB peripheral, insert a dummy read to the peripheral register.
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   @endverbatim
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @attention
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
ARM GAS  /tmp/cco2UtZg.s 			page 3


  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *      without specific prior written permission.
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   ******************************************************************************
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */ 
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #include "stm32f4xx_hal.h"
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @addtogroup STM32F4xx_HAL_Driver
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC RCC
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief RCC HAL module driver
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @addtogroup RCC_Private_Constants
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define CLOCKSWITCH_TIMEOUT_VALUE  ((uint32_t)5000) /* 5 s    */
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define __MCO1_CLK_ENABLE()   __HAL_RCC_GPIOA_CLK_ENABLE()
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8 
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define __MCO2_CLK_ENABLE()   __HAL_RCC_GPIOC_CLK_ENABLE()
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO2_GPIO_PORT         GPIOC
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #define MCO2_PIN               GPIO_PIN_9
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @}
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */    
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** const uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
ARM GAS  /tmp/cco2UtZg.s 			page 4


 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @}
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /* Private functions ---------------------------------------------------------*/
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *  @{
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions 
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *  @brief    Initialization and Configuration functions 
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @verbatim    
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]
 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System busses clocks (SYSCLK, AHB, APB1 
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****        and APB2).
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              the PLL as System clock source.
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock source.
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              and if a HSE clock failure occurs(HSE used directly or through PLL as System 
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock source), the System clocks automatically switched to HSI and an interrupt
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              is generated if enabled. The interrupt is linked to the Cortex-M4 NMI 
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              (Non-Maskable Interrupt) exception vector.   
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock (through a configurable prescaler) on PA8 pin.
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              clock (through a configurable prescaler) on PC9 pin.
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..] System, AHB and APB busses clocks configuration  
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              HSE and PLL.
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable 
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              prescaler and used to clock the CPU, memory and peripherals mapped 
ARM GAS  /tmp/cco2UtZg.s 			page 5


 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              from AHB clock through configurable prescalers and used to clock 
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              the peripherals mapped on these busses. You can use 
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              "HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.  
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 from an external clock mapped on the I2S_CKIN pin. 
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock.
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           (+@) SAI: the SAI clock can be derived either from a specific PLL (PLLI2S) or (PLLSAI) or
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 from an external clock mapped on the I2S_CKIN pin. 
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock. 
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 divided by 2 to 31. You have to use __HAL_RCC_RTC_CONFIG() and __HAL_RCC_RTC_ENABLE
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 macros to configure this clock. 
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 to work correctly, while the SDIO require a frequency equal or lower than
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 to 48. This clock is derived of the main PLL through PLLQ divider.
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****            (+@) IWDG clock which is always the LSI clock.
 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****        
 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F405xx/07xx and STM32F415xx/17xx devices, the maximum
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              frequency of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. 
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F42xxx and STM32F43xxx devices, the maximum frequency
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              of the SYSCLK and HCLK is 180 MHz, PCLK2 90 MHz and PCLK1 45 MHz. 
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F401xx, the maximum frequency of the SYSCLK and HCLK is 84 MHz,
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              PCLK2 84 MHz and PCLK1 42 MHz. 
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****          (#) For the STM32F41xxx, the maximum frequency of the SYSCLK and HCLK is 100 MHz,
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              PCLK2 100 MHz and PCLK1 50 MHz. 
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              be adapted accordingly (refer to the product datasheets for more details).
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****              
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @endverbatim
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - HSE and PLL OFF
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - All interrupts disabled
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - Peripheral clocks  
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks 
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
ARM GAS  /tmp/cco2UtZg.s 			page 6


 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak void HAL_RCC_DeInit(void)
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {}
  50              		.loc 1 241 0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 1, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55 0000 80B4     		push	{r7}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 4
  58              		.cfi_offset 7, -4
  59 0002 00AF     		add	r7, sp, #0
  60              	.LCFI1:
  61              		.cfi_def_cfa_register 7
  62              		.loc 1 241 0
  63 0004 BD46     		mov	sp, r7
  64              		@ sp needed
  65 0006 5DF8047B 		ldr	r7, [sp], #4
  66 000a 7047     		bx	lr
  67              		.cfi_endproc
  68              	.LFE125:
  70              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
  71              		.align	2
  72              		.weak	HAL_RCC_OscConfig
  73              		.thumb
  74              		.thumb_func
  76              	HAL_RCC_OscConfig:
  77              	.LFB126:
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval HAL status
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
  78              		.loc 1 252 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 56
  81              		@ frame_needed = 1, uses_anonymous_args = 0
  82 0000 80B5     		push	{r7, lr}
  83              	.LCFI2:
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 7, -8
  86              		.cfi_offset 14, -4
  87 0002 8EB0     		sub	sp, sp, #56
  88              	.LCFI3:
  89              		.cfi_def_cfa_offset 64
  90 0004 00AF     		add	r7, sp, #0
  91              	.LCFI4:
  92              		.cfi_def_cfa_register 7
  93 0006 7860     		str	r0, [r7, #4]
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  uint32_t tickstart = 0;  
  94              		.loc 1 253 0
ARM GAS  /tmp/cco2UtZg.s 			page 7


  95 0008 0023     		movs	r3, #0
  96 000a 7B63     		str	r3, [r7, #52]
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  97              		.loc 1 258 0
  98 000c 7B68     		ldr	r3, [r7, #4]
  99 000e 1B68     		ldr	r3, [r3]
 100 0010 03F00103 		and	r3, r3, #1
 101 0014 002B     		cmp	r3, #0
 102 0016 6AD0     		beq	.L3
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not dis
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                         
 103              		.loc 1 263 0
 104 0018 A24B     		ldr	r3, .L54
 105 001a 9B68     		ldr	r3, [r3, #8]
 106 001c 03F00C03 		and	r3, r3, #12
 107 0020 042B     		cmp	r3, #4
 108 0022 0BD0     		beq	.L4
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 109              		.loc 1 264 0 discriminator 1
 110 0024 9F4B     		ldr	r3, .L54
 111 0026 9B68     		ldr	r3, [r3, #8]
 112 0028 03F00C03 		and	r3, r3, #12
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 113              		.loc 1 263 0 discriminator 1
 114 002c 082B     		cmp	r3, #8
 115 002e 12D1     		bne	.L5
 116              		.loc 1 264 0
 117 0030 9C4B     		ldr	r3, .L54
 118 0032 5B68     		ldr	r3, [r3, #4]
 119 0034 03F48003 		and	r3, r3, #4194304
 120 0038 002B     		cmp	r3, #0
 121 003a 0CD0     		beq	.L5
 122              	.L4:
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 123              		.loc 1 266 0
 124 003c 994B     		ldr	r3, .L54
 125 003e 1B68     		ldr	r3, [r3]
 126 0040 03F40033 		and	r3, r3, #131072
 127 0044 002B     		cmp	r3, #0
 128 0046 05D0     		beq	.L6
 129              		.loc 1 266 0 is_stmt 0 discriminator 1
 130 0048 7B68     		ldr	r3, [r7, #4]
 131 004a 5B68     		ldr	r3, [r3, #4]
 132 004c 002B     		cmp	r3, #0
 133 004e 01D1     		bne	.L6
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 134              		.loc 1 268 0 is_stmt 1
 135 0050 0123     		movs	r3, #1
ARM GAS  /tmp/cco2UtZg.s 			page 8


 136 0052 0FE2     		b	.L7
 137              	.L6:
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 138              		.loc 1 266 0 discriminator 2
 139 0054 4BE0     		b	.L3
 140              	.L5:
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 141              		.loc 1 274 0
 142 0056 944B     		ldr	r3, .L54+4
 143 0058 0022     		movs	r2, #0
 144 005a 1A70     		strb	r2, [r3]
 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 145              		.loc 1 277 0
 146 005c FFF7FEFF 		bl	HAL_GetTick
 147 0060 7863     		str	r0, [r7, #52]
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till HSE is disabled */  
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 148              		.loc 1 280 0
 149 0062 0AE0     		b	.L8
 150              	.L9:
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 151              		.loc 1 282 0
 152 0064 FFF7FEFF 		bl	HAL_GetTick
 153 0068 0246     		mov	r2, r0
 154 006a 7B6B     		ldr	r3, [r7, #52]
 155 006c D21A     		subs	r2, r2, r3
 156 006e 41F28833 		movw	r3, #5000
 157 0072 9A42     		cmp	r2, r3
 158 0074 01D9     		bls	.L8
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 159              		.loc 1 284 0
 160 0076 0323     		movs	r3, #3
 161 0078 FCE1     		b	.L7
 162              	.L8:
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 163              		.loc 1 280 0 discriminator 1
 164 007a 8A4B     		ldr	r3, .L54
 165 007c 1B68     		ldr	r3, [r3]
 166 007e 03F40033 		and	r3, r3, #131072
 167 0082 002B     		cmp	r3, #0
 168 0084 EED1     		bne	.L9
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 169              		.loc 1 289 0
ARM GAS  /tmp/cco2UtZg.s 			page 9


 170 0086 884B     		ldr	r3, .L54+4
 171 0088 7A68     		ldr	r2, [r7, #4]
 172 008a 5268     		ldr	r2, [r2, #4]
 173 008c D2B2     		uxtb	r2, r2
 174 008e 1A70     		strb	r2, [r3]
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSE State */
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 175              		.loc 1 292 0
 176 0090 7B68     		ldr	r3, [r7, #4]
 177 0092 5B68     		ldr	r3, [r3, #4]
 178 0094 002B     		cmp	r3, #0
 179 0096 15D0     		beq	.L10
 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 180              		.loc 1 295 0
 181 0098 FFF7FEFF 		bl	HAL_GetTick
 182 009c 7863     		str	r0, [r7, #52]
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSE is ready */  
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 183              		.loc 1 298 0
 184 009e 0AE0     		b	.L11
 185              	.L12:
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 186              		.loc 1 300 0
 187 00a0 FFF7FEFF 		bl	HAL_GetTick
 188 00a4 0246     		mov	r2, r0
 189 00a6 7B6B     		ldr	r3, [r7, #52]
 190 00a8 D21A     		subs	r2, r2, r3
 191 00aa 41F28833 		movw	r3, #5000
 192 00ae 9A42     		cmp	r2, r3
 193 00b0 01D9     		bls	.L11
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 194              		.loc 1 302 0
 195 00b2 0323     		movs	r3, #3
 196 00b4 DEE1     		b	.L7
 197              	.L11:
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 198              		.loc 1 298 0 discriminator 1
 199 00b6 7B4B     		ldr	r3, .L54
 200 00b8 1B68     		ldr	r3, [r3]
 201 00ba 03F40033 		and	r3, r3, #131072
 202 00be 002B     		cmp	r3, #0
 203 00c0 EED0     		beq	.L12
 204 00c2 14E0     		b	.L3
 205              	.L10:
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
ARM GAS  /tmp/cco2UtZg.s 			page 10


 206              		.loc 1 309 0
 207 00c4 FFF7FEFF 		bl	HAL_GetTick
 208 00c8 7863     		str	r0, [r7, #52]
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSE is bypassed or disabled */
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 209              		.loc 1 312 0
 210 00ca 0AE0     		b	.L13
 211              	.L14:
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 212              		.loc 1 314 0
 213 00cc FFF7FEFF 		bl	HAL_GetTick
 214 00d0 0246     		mov	r2, r0
 215 00d2 7B6B     		ldr	r3, [r7, #52]
 216 00d4 D21A     		subs	r2, r2, r3
 217 00d6 41F28833 		movw	r3, #5000
 218 00da 9A42     		cmp	r2, r3
 219 00dc 01D9     		bls	.L13
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 220              		.loc 1 316 0
 221 00de 0323     		movs	r3, #3
 222 00e0 C8E1     		b	.L7
 223              	.L13:
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 224              		.loc 1 312 0 discriminator 1
 225 00e2 704B     		ldr	r3, .L54
 226 00e4 1B68     		ldr	r3, [r3]
 227 00e6 03F40033 		and	r3, r3, #131072
 228 00ea 002B     		cmp	r3, #0
 229 00ec EED1     		bne	.L14
 230              	.L3:
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 231              		.loc 1 323 0
 232 00ee 7B68     		ldr	r3, [r7, #4]
 233 00f0 1B68     		ldr	r3, [r3]
 234 00f2 03F00203 		and	r3, r3, #2
 235 00f6 002B     		cmp	r3, #0
 236 00f8 77D0     		beq	.L15
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                         
 237              		.loc 1 330 0
 238 00fa 6A4B     		ldr	r3, .L54
 239 00fc 9B68     		ldr	r3, [r3, #8]
 240 00fe 03F00C03 		and	r3, r3, #12
ARM GAS  /tmp/cco2UtZg.s 			page 11


 241 0102 002B     		cmp	r3, #0
 242 0104 0BD0     		beq	.L16
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 243              		.loc 1 331 0 discriminator 1
 244 0106 674B     		ldr	r3, .L54
 245 0108 9B68     		ldr	r3, [r3, #8]
 246 010a 03F00C03 		and	r3, r3, #12
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 247              		.loc 1 330 0 discriminator 1
 248 010e 082B     		cmp	r3, #8
 249 0110 26D1     		bne	.L17
 250              		.loc 1 331 0
 251 0112 644B     		ldr	r3, .L54
 252 0114 5B68     		ldr	r3, [r3, #4]
 253 0116 03F48003 		and	r3, r3, #4194304
 254 011a 002B     		cmp	r3, #0
 255 011c 20D1     		bne	.L17
 256              	.L16:
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 257              		.loc 1 334 0
 258 011e 614B     		ldr	r3, .L54
 259 0120 1B68     		ldr	r3, [r3]
 260 0122 03F00203 		and	r3, r3, #2
 261 0126 002B     		cmp	r3, #0
 262 0128 05D0     		beq	.L18
 263              		.loc 1 334 0 is_stmt 0 discriminator 1
 264 012a 7B68     		ldr	r3, [r7, #4]
 265 012c DB68     		ldr	r3, [r3, #12]
 266 012e 012B     		cmp	r3, #1
 267 0130 01D0     		beq	.L18
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_ERROR;
 268              		.loc 1 336 0 is_stmt 1
 269 0132 0123     		movs	r3, #1
 270 0134 9EE1     		b	.L7
 271              	.L18:
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 272              		.loc 1 342 0 discriminator 2
 273 0136 5B4B     		ldr	r3, .L54
 274 0138 5A4A     		ldr	r2, .L54
 275 013a 1268     		ldr	r2, [r2]
 276 013c 22F0F801 		bic	r1, r2, #248
 277 0140 7A68     		ldr	r2, [r7, #4]
 278 0142 1069     		ldr	r0, [r2, #16]
 279 0144 F822     		movs	r2, #248
 280 0146 3A63     		str	r2, [r7, #48]
 281              	.LBB33:
 282              	.LBB34:
 283              		.file 2 "Drivers/CMSIS/Include/core_cmInstr.h"
   1:Drivers/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
ARM GAS  /tmp/cco2UtZg.s 			page 12


   2:Drivers/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:Drivers/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:Drivers/CMSIS/Include/core_cmInstr.h ****  * @version  V4.10
   5:Drivers/CMSIS/Include/core_cmInstr.h ****  * @date     18. March 2015
   6:Drivers/CMSIS/Include/core_cmInstr.h ****  *
   7:Drivers/CMSIS/Include/core_cmInstr.h ****  * @note
   8:Drivers/CMSIS/Include/core_cmInstr.h ****  *
   9:Drivers/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  10:Drivers/CMSIS/Include/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:Drivers/CMSIS/Include/core_cmInstr.h **** 
  12:Drivers/CMSIS/Include/core_cmInstr.h ****    All rights reserved.
  13:Drivers/CMSIS/Include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:Drivers/CMSIS/Include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:Drivers/CMSIS/Include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:Drivers/CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:Drivers/CMSIS/Include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:Drivers/CMSIS/Include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:Drivers/CMSIS/Include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:Drivers/CMSIS/Include/core_cmInstr.h ****      specific prior written permission.
  23:Drivers/CMSIS/Include/core_cmInstr.h ****    *
  24:Drivers/CMSIS/Include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:Drivers/CMSIS/Include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:Drivers/CMSIS/Include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:Drivers/CMSIS/Include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:Drivers/CMSIS/Include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:Drivers/CMSIS/Include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:Drivers/CMSIS/Include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:Drivers/CMSIS/Include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:Drivers/CMSIS/Include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:Drivers/CMSIS/Include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:Drivers/CMSIS/Include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:Drivers/CMSIS/Include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:Drivers/CMSIS/Include/core_cmInstr.h **** 
  37:Drivers/CMSIS/Include/core_cmInstr.h **** 
  38:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:Drivers/CMSIS/Include/core_cmInstr.h **** 
  41:Drivers/CMSIS/Include/core_cmInstr.h **** 
  42:Drivers/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:Drivers/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:Drivers/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  45:Drivers/CMSIS/Include/core_cmInstr.h ****   @{
  46:Drivers/CMSIS/Include/core_cmInstr.h **** */
  47:Drivers/CMSIS/Include/core_cmInstr.h **** 
  48:Drivers/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:Drivers/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:Drivers/CMSIS/Include/core_cmInstr.h **** 
  51:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:Drivers/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
  54:Drivers/CMSIS/Include/core_cmInstr.h **** 
  55:Drivers/CMSIS/Include/core_cmInstr.h **** 
  56:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  57:Drivers/CMSIS/Include/core_cmInstr.h **** 
  58:Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
ARM GAS  /tmp/cco2UtZg.s 			page 13


  59:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  60:Drivers/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  61:Drivers/CMSIS/Include/core_cmInstr.h **** 
  62:Drivers/CMSIS/Include/core_cmInstr.h **** 
  63:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:Drivers/CMSIS/Include/core_cmInstr.h **** 
  65:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  67:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  68:Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  69:Drivers/CMSIS/Include/core_cmInstr.h **** 
  70:Drivers/CMSIS/Include/core_cmInstr.h **** 
  71:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  72:Drivers/CMSIS/Include/core_cmInstr.h **** 
  73:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  76:Drivers/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  77:Drivers/CMSIS/Include/core_cmInstr.h **** 
  78:Drivers/CMSIS/Include/core_cmInstr.h **** 
  79:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  80:Drivers/CMSIS/Include/core_cmInstr.h **** 
  81:Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  83:Drivers/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  84:Drivers/CMSIS/Include/core_cmInstr.h **** 
  85:Drivers/CMSIS/Include/core_cmInstr.h **** 
  86:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:Drivers/CMSIS/Include/core_cmInstr.h **** 
  88:Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:Drivers/CMSIS/Include/core_cmInstr.h ****  */
  92:Drivers/CMSIS/Include/core_cmInstr.h **** #define __ISB() do {\
  93:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
  94:Drivers/CMSIS/Include/core_cmInstr.h ****                    __isb(0xF);\
  95:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
  96:Drivers/CMSIS/Include/core_cmInstr.h ****                 } while (0)
  97:Drivers/CMSIS/Include/core_cmInstr.h **** 
  98:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:Drivers/CMSIS/Include/core_cmInstr.h **** 
 100:Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 103:Drivers/CMSIS/Include/core_cmInstr.h **** #define __DSB() do {\
 104:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 105:Drivers/CMSIS/Include/core_cmInstr.h ****                    __dsb(0xF);\
 106:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 107:Drivers/CMSIS/Include/core_cmInstr.h ****                 } while (0)
 108:Drivers/CMSIS/Include/core_cmInstr.h **** 
 109:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:Drivers/CMSIS/Include/core_cmInstr.h **** 
 111:Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 114:Drivers/CMSIS/Include/core_cmInstr.h **** #define __DMB() do {\
 115:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
ARM GAS  /tmp/cco2UtZg.s 			page 14


 116:Drivers/CMSIS/Include/core_cmInstr.h ****                    __dmb(0xF);\
 117:Drivers/CMSIS/Include/core_cmInstr.h ****                    __schedule_barrier();\
 118:Drivers/CMSIS/Include/core_cmInstr.h ****                 } while (0)
 119:Drivers/CMSIS/Include/core_cmInstr.h **** 
 120:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:Drivers/CMSIS/Include/core_cmInstr.h **** 
 122:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:Drivers/CMSIS/Include/core_cmInstr.h **** 
 124:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 126:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 127:Drivers/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 128:Drivers/CMSIS/Include/core_cmInstr.h **** 
 129:Drivers/CMSIS/Include/core_cmInstr.h **** 
 130:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:Drivers/CMSIS/Include/core_cmInstr.h **** 
 132:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:Drivers/CMSIS/Include/core_cmInstr.h **** 
 134:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 136:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 137:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:Drivers/CMSIS/Include/core_cmInstr.h **** {
 140:Drivers/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 141:Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 142:Drivers/CMSIS/Include/core_cmInstr.h **** }
 143:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 144:Drivers/CMSIS/Include/core_cmInstr.h **** 
 145:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:Drivers/CMSIS/Include/core_cmInstr.h **** 
 147:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:Drivers/CMSIS/Include/core_cmInstr.h **** 
 149:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 151:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 152:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:Drivers/CMSIS/Include/core_cmInstr.h **** {
 155:Drivers/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 156:Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 157:Drivers/CMSIS/Include/core_cmInstr.h **** }
 158:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 159:Drivers/CMSIS/Include/core_cmInstr.h **** 
 160:Drivers/CMSIS/Include/core_cmInstr.h **** 
 161:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:Drivers/CMSIS/Include/core_cmInstr.h **** 
 163:Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:Drivers/CMSIS/Include/core_cmInstr.h **** 
 165:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 168:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 169:Drivers/CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 170:Drivers/CMSIS/Include/core_cmInstr.h **** 
 171:Drivers/CMSIS/Include/core_cmInstr.h **** 
 172:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
ARM GAS  /tmp/cco2UtZg.s 			page 15


 173:Drivers/CMSIS/Include/core_cmInstr.h **** 
 174:Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:Drivers/CMSIS/Include/core_cmInstr.h **** 
 177:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 180:Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:Drivers/CMSIS/Include/core_cmInstr.h **** 
 182:Drivers/CMSIS/Include/core_cmInstr.h **** 
 183:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:Drivers/CMSIS/Include/core_cmInstr.h **** 
 185:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:Drivers/CMSIS/Include/core_cmInstr.h **** 
 187:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 189:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 190:Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:Drivers/CMSIS/Include/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 193:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:Drivers/CMSIS/Include/core_cmInstr.h **** {
 195:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 196:Drivers/CMSIS/Include/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:Drivers/CMSIS/Include/core_cmInstr.h **** 
 198:Drivers/CMSIS/Include/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:Drivers/CMSIS/Include/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:Drivers/CMSIS/Include/core_cmInstr.h ****   {
 201:Drivers/CMSIS/Include/core_cmInstr.h ****     result <<= 1;
 202:Drivers/CMSIS/Include/core_cmInstr.h ****     result |= value & 1;
 203:Drivers/CMSIS/Include/core_cmInstr.h ****     s--;
 204:Drivers/CMSIS/Include/core_cmInstr.h ****   }
 205:Drivers/CMSIS/Include/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 207:Drivers/CMSIS/Include/core_cmInstr.h **** }
 208:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 209:Drivers/CMSIS/Include/core_cmInstr.h **** 
 210:Drivers/CMSIS/Include/core_cmInstr.h **** 
 211:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 212:Drivers/CMSIS/Include/core_cmInstr.h **** 
 213:Drivers/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:Drivers/CMSIS/Include/core_cmInstr.h **** 
 215:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 217:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 218:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 219:Drivers/CMSIS/Include/core_cmInstr.h **** 
 220:Drivers/CMSIS/Include/core_cmInstr.h **** 
 221:Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:Drivers/CMSIS/Include/core_cmInstr.h **** 
 223:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:Drivers/CMSIS/Include/core_cmInstr.h **** 
 225:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:Drivers/CMSIS/Include/core_cmInstr.h **** 
 227:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:Drivers/CMSIS/Include/core_cmInstr.h ****  */
ARM GAS  /tmp/cco2UtZg.s 			page 16


 230:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:Drivers/CMSIS/Include/core_cmInstr.h **** 
 232:Drivers/CMSIS/Include/core_cmInstr.h **** 
 233:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:Drivers/CMSIS/Include/core_cmInstr.h **** 
 235:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:Drivers/CMSIS/Include/core_cmInstr.h **** 
 237:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 240:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:Drivers/CMSIS/Include/core_cmInstr.h **** 
 242:Drivers/CMSIS/Include/core_cmInstr.h **** 
 243:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:Drivers/CMSIS/Include/core_cmInstr.h **** 
 245:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:Drivers/CMSIS/Include/core_cmInstr.h **** 
 247:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 250:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:Drivers/CMSIS/Include/core_cmInstr.h **** 
 252:Drivers/CMSIS/Include/core_cmInstr.h **** 
 253:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:Drivers/CMSIS/Include/core_cmInstr.h **** 
 255:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:Drivers/CMSIS/Include/core_cmInstr.h **** 
 257:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 258:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 260:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 261:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 262:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:Drivers/CMSIS/Include/core_cmInstr.h **** 
 264:Drivers/CMSIS/Include/core_cmInstr.h **** 
 265:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:Drivers/CMSIS/Include/core_cmInstr.h **** 
 267:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:Drivers/CMSIS/Include/core_cmInstr.h **** 
 269:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 270:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 272:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 273:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 274:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:Drivers/CMSIS/Include/core_cmInstr.h **** 
 276:Drivers/CMSIS/Include/core_cmInstr.h **** 
 277:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:Drivers/CMSIS/Include/core_cmInstr.h **** 
 279:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:Drivers/CMSIS/Include/core_cmInstr.h **** 
 281:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 282:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 284:Drivers/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 285:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 286:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
ARM GAS  /tmp/cco2UtZg.s 			page 17


 287:Drivers/CMSIS/Include/core_cmInstr.h **** 
 288:Drivers/CMSIS/Include/core_cmInstr.h **** 
 289:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:Drivers/CMSIS/Include/core_cmInstr.h **** 
 291:Drivers/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:Drivers/CMSIS/Include/core_cmInstr.h **** 
 293:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 294:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 295:Drivers/CMSIS/Include/core_cmInstr.h **** 
 296:Drivers/CMSIS/Include/core_cmInstr.h **** 
 297:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 298:Drivers/CMSIS/Include/core_cmInstr.h **** 
 299:Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 300:Drivers/CMSIS/Include/core_cmInstr.h **** 
 301:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 304:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 305:Drivers/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 306:Drivers/CMSIS/Include/core_cmInstr.h **** 
 307:Drivers/CMSIS/Include/core_cmInstr.h **** 
 308:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:Drivers/CMSIS/Include/core_cmInstr.h **** 
 310:Drivers/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 311:Drivers/CMSIS/Include/core_cmInstr.h **** 
 312:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 315:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 316:Drivers/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 317:Drivers/CMSIS/Include/core_cmInstr.h **** 
 318:Drivers/CMSIS/Include/core_cmInstr.h **** 
 319:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:Drivers/CMSIS/Include/core_cmInstr.h **** 
 321:Drivers/CMSIS/Include/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:Drivers/CMSIS/Include/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:Drivers/CMSIS/Include/core_cmInstr.h **** 
 324:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 326:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 327:Drivers/CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:Drivers/CMSIS/Include/core_cmInstr.h **** {
 330:Drivers/CMSIS/Include/core_cmInstr.h ****   rrx r0, r0
 331:Drivers/CMSIS/Include/core_cmInstr.h ****   bx lr
 332:Drivers/CMSIS/Include/core_cmInstr.h **** }
 333:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 334:Drivers/CMSIS/Include/core_cmInstr.h **** 
 335:Drivers/CMSIS/Include/core_cmInstr.h **** 
 336:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:Drivers/CMSIS/Include/core_cmInstr.h **** 
 338:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:Drivers/CMSIS/Include/core_cmInstr.h **** 
 340:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:Drivers/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 343:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
ARM GAS  /tmp/cco2UtZg.s 			page 18


 344:Drivers/CMSIS/Include/core_cmInstr.h **** 
 345:Drivers/CMSIS/Include/core_cmInstr.h **** 
 346:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:Drivers/CMSIS/Include/core_cmInstr.h **** 
 348:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:Drivers/CMSIS/Include/core_cmInstr.h **** 
 350:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 353:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:Drivers/CMSIS/Include/core_cmInstr.h **** 
 355:Drivers/CMSIS/Include/core_cmInstr.h **** 
 356:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:Drivers/CMSIS/Include/core_cmInstr.h **** 
 358:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:Drivers/CMSIS/Include/core_cmInstr.h **** 
 360:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:Drivers/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 363:Drivers/CMSIS/Include/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:Drivers/CMSIS/Include/core_cmInstr.h **** 
 365:Drivers/CMSIS/Include/core_cmInstr.h **** 
 366:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:Drivers/CMSIS/Include/core_cmInstr.h **** 
 368:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:Drivers/CMSIS/Include/core_cmInstr.h **** 
 370:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 371:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 373:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:Drivers/CMSIS/Include/core_cmInstr.h **** 
 375:Drivers/CMSIS/Include/core_cmInstr.h **** 
 376:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:Drivers/CMSIS/Include/core_cmInstr.h **** 
 378:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:Drivers/CMSIS/Include/core_cmInstr.h **** 
 380:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 381:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 383:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:Drivers/CMSIS/Include/core_cmInstr.h **** 
 385:Drivers/CMSIS/Include/core_cmInstr.h **** 
 386:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:Drivers/CMSIS/Include/core_cmInstr.h **** 
 388:Drivers/CMSIS/Include/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:Drivers/CMSIS/Include/core_cmInstr.h **** 
 390:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 391:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 393:Drivers/CMSIS/Include/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:Drivers/CMSIS/Include/core_cmInstr.h **** 
 395:Drivers/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:Drivers/CMSIS/Include/core_cmInstr.h **** 
 397:Drivers/CMSIS/Include/core_cmInstr.h **** 
 398:Drivers/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:Drivers/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 400:Drivers/CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/cco2UtZg.s 			page 19


 401:Drivers/CMSIS/Include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:Drivers/CMSIS/Include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:Drivers/CMSIS/Include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:Drivers/CMSIS/Include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 408:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:Drivers/CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 411:Drivers/CMSIS/Include/core_cmInstr.h **** 
 412:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 413:Drivers/CMSIS/Include/core_cmInstr.h **** 
 414:Drivers/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 416:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:Drivers/CMSIS/Include/core_cmInstr.h **** {
 418:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 419:Drivers/CMSIS/Include/core_cmInstr.h **** }
 420:Drivers/CMSIS/Include/core_cmInstr.h **** 
 421:Drivers/CMSIS/Include/core_cmInstr.h **** 
 422:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:Drivers/CMSIS/Include/core_cmInstr.h **** 
 424:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:Drivers/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 426:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 427:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:Drivers/CMSIS/Include/core_cmInstr.h **** {
 429:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:Drivers/CMSIS/Include/core_cmInstr.h **** }
 431:Drivers/CMSIS/Include/core_cmInstr.h **** 
 432:Drivers/CMSIS/Include/core_cmInstr.h **** 
 433:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 434:Drivers/CMSIS/Include/core_cmInstr.h **** 
 435:Drivers/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:Drivers/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 438:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:Drivers/CMSIS/Include/core_cmInstr.h **** {
 440:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:Drivers/CMSIS/Include/core_cmInstr.h **** }
 442:Drivers/CMSIS/Include/core_cmInstr.h **** 
 443:Drivers/CMSIS/Include/core_cmInstr.h **** 
 444:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 445:Drivers/CMSIS/Include/core_cmInstr.h **** 
 446:Drivers/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 448:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:Drivers/CMSIS/Include/core_cmInstr.h **** {
 450:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 451:Drivers/CMSIS/Include/core_cmInstr.h **** }
 452:Drivers/CMSIS/Include/core_cmInstr.h **** 
 453:Drivers/CMSIS/Include/core_cmInstr.h **** 
 454:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:Drivers/CMSIS/Include/core_cmInstr.h **** 
 456:Drivers/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:Drivers/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
ARM GAS  /tmp/cco2UtZg.s 			page 20


 458:Drivers/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 460:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:Drivers/CMSIS/Include/core_cmInstr.h **** {
 462:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:Drivers/CMSIS/Include/core_cmInstr.h **** }
 464:Drivers/CMSIS/Include/core_cmInstr.h **** 
 465:Drivers/CMSIS/Include/core_cmInstr.h **** 
 466:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:Drivers/CMSIS/Include/core_cmInstr.h **** 
 468:Drivers/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:Drivers/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 471:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:Drivers/CMSIS/Include/core_cmInstr.h **** {
 473:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:Drivers/CMSIS/Include/core_cmInstr.h **** }
 475:Drivers/CMSIS/Include/core_cmInstr.h **** 
 476:Drivers/CMSIS/Include/core_cmInstr.h **** 
 477:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:Drivers/CMSIS/Include/core_cmInstr.h **** 
 479:Drivers/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:Drivers/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 482:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:Drivers/CMSIS/Include/core_cmInstr.h **** {
 484:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:Drivers/CMSIS/Include/core_cmInstr.h **** }
 486:Drivers/CMSIS/Include/core_cmInstr.h **** 
 487:Drivers/CMSIS/Include/core_cmInstr.h **** 
 488:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:Drivers/CMSIS/Include/core_cmInstr.h **** 
 490:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:Drivers/CMSIS/Include/core_cmInstr.h **** 
 492:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 494:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 495:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:Drivers/CMSIS/Include/core_cmInstr.h **** {
 497:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:Drivers/CMSIS/Include/core_cmInstr.h ****   return __builtin_bswap32(value);
 499:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 500:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 501:Drivers/CMSIS/Include/core_cmInstr.h **** 
 502:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 503:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 504:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 505:Drivers/CMSIS/Include/core_cmInstr.h **** }
 506:Drivers/CMSIS/Include/core_cmInstr.h **** 
 507:Drivers/CMSIS/Include/core_cmInstr.h **** 
 508:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 509:Drivers/CMSIS/Include/core_cmInstr.h **** 
 510:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 511:Drivers/CMSIS/Include/core_cmInstr.h **** 
 512:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 513:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 514:Drivers/CMSIS/Include/core_cmInstr.h ****  */
ARM GAS  /tmp/cco2UtZg.s 			page 21


 515:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 516:Drivers/CMSIS/Include/core_cmInstr.h **** {
 517:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 518:Drivers/CMSIS/Include/core_cmInstr.h **** 
 519:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 520:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 521:Drivers/CMSIS/Include/core_cmInstr.h **** }
 522:Drivers/CMSIS/Include/core_cmInstr.h **** 
 523:Drivers/CMSIS/Include/core_cmInstr.h **** 
 524:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 525:Drivers/CMSIS/Include/core_cmInstr.h **** 
 526:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 527:Drivers/CMSIS/Include/core_cmInstr.h **** 
 528:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 529:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 530:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 531:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 532:Drivers/CMSIS/Include/core_cmInstr.h **** {
 533:Drivers/CMSIS/Include/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 534:Drivers/CMSIS/Include/core_cmInstr.h ****   return (short)__builtin_bswap16(value);
 535:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 536:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 537:Drivers/CMSIS/Include/core_cmInstr.h **** 
 538:Drivers/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 539:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 540:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 541:Drivers/CMSIS/Include/core_cmInstr.h **** }
 542:Drivers/CMSIS/Include/core_cmInstr.h **** 
 543:Drivers/CMSIS/Include/core_cmInstr.h **** 
 544:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 545:Drivers/CMSIS/Include/core_cmInstr.h **** 
 546:Drivers/CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 547:Drivers/CMSIS/Include/core_cmInstr.h **** 
 548:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 549:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 550:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 551:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 552:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 553:Drivers/CMSIS/Include/core_cmInstr.h **** {
 554:Drivers/CMSIS/Include/core_cmInstr.h ****   return (op1 >> op2) | (op1 << (32 - op2));
 555:Drivers/CMSIS/Include/core_cmInstr.h **** }
 556:Drivers/CMSIS/Include/core_cmInstr.h **** 
 557:Drivers/CMSIS/Include/core_cmInstr.h **** 
 558:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 559:Drivers/CMSIS/Include/core_cmInstr.h **** 
 560:Drivers/CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 561:Drivers/CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 562:Drivers/CMSIS/Include/core_cmInstr.h **** 
 563:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 564:Drivers/CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 565:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 566:Drivers/CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 567:Drivers/CMSIS/Include/core_cmInstr.h **** 
 568:Drivers/CMSIS/Include/core_cmInstr.h **** 
 569:Drivers/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 570:Drivers/CMSIS/Include/core_cmInstr.h **** 
 571:Drivers/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
ARM GAS  /tmp/cco2UtZg.s 			page 22


 572:Drivers/CMSIS/Include/core_cmInstr.h **** 
 573:Drivers/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 574:Drivers/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 575:Drivers/CMSIS/Include/core_cmInstr.h ****  */
 576:Drivers/CMSIS/Include/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 577:Drivers/CMSIS/Include/core_cmInstr.h **** {
 578:Drivers/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 579:Drivers/CMSIS/Include/core_cmInstr.h **** 
 580:Drivers/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 581:Drivers/CMSIS/Include/core_cmInstr.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 284              		.loc 2 581 0 discriminator 2
 285 0148 3A6B     		ldr	r2, [r7, #48]
 286              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 287 014a 92FAA2F2 		rbit r2, r2
 288              	@ 0 "" 2
 289              		.thumb
 290 014e FA62     		str	r2, [r7, #44]
 582:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 583:Drivers/CMSIS/Include/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 584:Drivers/CMSIS/Include/core_cmInstr.h **** 
 585:Drivers/CMSIS/Include/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 586:Drivers/CMSIS/Include/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 587:Drivers/CMSIS/Include/core_cmInstr.h ****   {
 588:Drivers/CMSIS/Include/core_cmInstr.h ****     result <<= 1;
 589:Drivers/CMSIS/Include/core_cmInstr.h ****     result |= value & 1;
 590:Drivers/CMSIS/Include/core_cmInstr.h ****     s--;
 591:Drivers/CMSIS/Include/core_cmInstr.h ****   }
 592:Drivers/CMSIS/Include/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 593:Drivers/CMSIS/Include/core_cmInstr.h **** #endif
 594:Drivers/CMSIS/Include/core_cmInstr.h ****   return(result);
 291              		.loc 2 594 0 discriminator 2
 292 0150 FA6A     		ldr	r2, [r7, #44]
 293              	.LBE34:
 294              	.LBE33:
 295              		.loc 1 342 0 discriminator 2
 296 0152 B2FA82F2 		clz	r2, r2
 297 0156 00FA02F2 		lsl	r2, r0, r2
 298 015a 0A43     		orrs	r2, r2, r1
 299 015c 1A60     		str	r2, [r3]
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 300              		.loc 1 334 0 discriminator 2
 301 015e 44E0     		b	.L15
 302              	.L17:
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Check the HSI State */
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 303              		.loc 1 348 0
 304 0160 7B68     		ldr	r3, [r7, #4]
 305 0162 DB68     		ldr	r3, [r3, #12]
 306 0164 002B     		cmp	r3, #0
 307 0166 2AD0     		beq	.L20
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
ARM GAS  /tmp/cco2UtZg.s 			page 23


 308              		.loc 1 351 0
 309 0168 504B     		ldr	r3, .L54+8
 310 016a 0122     		movs	r2, #1
 311 016c 1A60     		str	r2, [r3]
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 312              		.loc 1 354 0
 313 016e FFF7FEFF 		bl	HAL_GetTick
 314 0172 7863     		str	r0, [r7, #52]
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 315              		.loc 1 357 0
 316 0174 08E0     		b	.L21
 317              	.L22:
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 318              		.loc 1 359 0
 319 0176 FFF7FEFF 		bl	HAL_GetTick
 320 017a 0246     		mov	r2, r0
 321 017c 7B6B     		ldr	r3, [r7, #52]
 322 017e D31A     		subs	r3, r2, r3
 323 0180 642B     		cmp	r3, #100
 324 0182 01D9     		bls	.L21
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 325              		.loc 1 361 0
 326 0184 0323     		movs	r3, #3
 327 0186 75E1     		b	.L7
 328              	.L21:
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 329              		.loc 1 357 0 discriminator 1
 330 0188 464B     		ldr	r3, .L54
 331 018a 1B68     		ldr	r3, [r3]
 332 018c 03F00203 		and	r3, r3, #2
 333 0190 002B     		cmp	r3, #0
 334 0192 F0D0     		beq	.L22
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }       
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                 
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 335              		.loc 1 366 0
 336 0194 434B     		ldr	r3, .L54
 337 0196 434A     		ldr	r2, .L54
 338 0198 1268     		ldr	r2, [r2]
 339 019a 22F0F801 		bic	r1, r2, #248
 340 019e 7A68     		ldr	r2, [r7, #4]
 341 01a0 1069     		ldr	r0, [r2, #16]
 342 01a2 F822     		movs	r2, #248
 343 01a4 BA62     		str	r2, [r7, #40]
 344              	.LBB35:
 345              	.LBB36:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 346              		.loc 2 581 0
 347 01a6 BA6A     		ldr	r2, [r7, #40]
ARM GAS  /tmp/cco2UtZg.s 			page 24


 348              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 349 01a8 92FAA2F2 		rbit r2, r2
 350              	@ 0 "" 2
 351              		.thumb
 352 01ac 7A62     		str	r2, [r7, #36]
 353              		.loc 2 594 0
 354 01ae 7A6A     		ldr	r2, [r7, #36]
 355              	.LBE36:
 356              	.LBE35:
 357              		.loc 1 366 0
 358 01b0 B2FA82F2 		clz	r2, r2
 359 01b4 00FA02F2 		lsl	r2, r0, r2
 360 01b8 0A43     		orrs	r2, r2, r1
 361 01ba 1A60     		str	r2, [r3]
 362 01bc 15E0     		b	.L15
 363              	.L20:
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 364              		.loc 1 371 0
 365 01be 3B4B     		ldr	r3, .L54+8
 366 01c0 0022     		movs	r2, #0
 367 01c2 1A60     		str	r2, [r3]
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 368              		.loc 1 374 0
 369 01c4 FFF7FEFF 		bl	HAL_GetTick
 370 01c8 7863     		str	r0, [r7, #52]
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till HSI is ready */  
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 371              		.loc 1 377 0
 372 01ca 08E0     		b	.L24
 373              	.L25:
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 374              		.loc 1 379 0
 375 01cc FFF7FEFF 		bl	HAL_GetTick
 376 01d0 0246     		mov	r2, r0
 377 01d2 7B6B     		ldr	r3, [r7, #52]
 378 01d4 D31A     		subs	r3, r2, r3
 379 01d6 642B     		cmp	r3, #100
 380 01d8 01D9     		bls	.L24
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 381              		.loc 1 381 0
 382 01da 0323     		movs	r3, #3
 383 01dc 4AE1     		b	.L7
 384              	.L24:
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 385              		.loc 1 377 0 discriminator 1
 386 01de 314B     		ldr	r3, .L54
 387 01e0 1B68     		ldr	r3, [r3]
 388 01e2 03F00203 		and	r3, r3, #2
ARM GAS  /tmp/cco2UtZg.s 			page 25


 389 01e6 002B     		cmp	r3, #0
 390 01e8 F0D1     		bne	.L25
 391              	.L15:
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 392              		.loc 1 388 0
 393 01ea 7B68     		ldr	r3, [r7, #4]
 394 01ec 1B68     		ldr	r3, [r3]
 395 01ee 03F00803 		and	r3, r3, #8
 396 01f2 002B     		cmp	r3, #0
 397 01f4 30D0     		beq	.L26
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSI State */
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 398              		.loc 1 394 0
 399 01f6 7B68     		ldr	r3, [r7, #4]
 400 01f8 5B69     		ldr	r3, [r3, #20]
 401 01fa 002B     		cmp	r3, #0
 402 01fc 16D0     		beq	.L27
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 403              		.loc 1 397 0
 404 01fe 2C4B     		ldr	r3, .L54+12
 405 0200 0122     		movs	r2, #1
 406 0202 1A60     		str	r2, [r3]
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 407              		.loc 1 400 0
 408 0204 FFF7FEFF 		bl	HAL_GetTick
 409 0208 7863     		str	r0, [r7, #52]
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSI is ready */
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 410              		.loc 1 403 0
 411 020a 08E0     		b	.L28
 412              	.L29:
 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 413              		.loc 1 405 0
 414 020c FFF7FEFF 		bl	HAL_GetTick
 415 0210 0246     		mov	r2, r0
 416 0212 7B6B     		ldr	r3, [r7, #52]
 417 0214 D31A     		subs	r3, r2, r3
 418 0216 642B     		cmp	r3, #100
 419 0218 01D9     		bls	.L28
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
ARM GAS  /tmp/cco2UtZg.s 			page 26


 420              		.loc 1 407 0
 421 021a 0323     		movs	r3, #3
 422 021c 2AE1     		b	.L7
 423              	.L28:
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 424              		.loc 1 403 0 discriminator 1
 425 021e 214B     		ldr	r3, .L54
 426 0220 5B6F     		ldr	r3, [r3, #116]
 427 0222 03F00203 		and	r3, r3, #2
 428 0226 002B     		cmp	r3, #0
 429 0228 F0D0     		beq	.L29
 430 022a 15E0     		b	.L26
 431              	.L27:
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         } 
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 432              		.loc 1 414 0
 433 022c 204B     		ldr	r3, .L54+12
 434 022e 0022     		movs	r2, #0
 435 0230 1A60     		str	r2, [r3]
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 436              		.loc 1 417 0
 437 0232 FFF7FEFF 		bl	HAL_GetTick
 438 0236 7863     		str	r0, [r7, #52]
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSI is ready */  
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 439              		.loc 1 420 0
 440 0238 08E0     		b	.L30
 441              	.L31:
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 442              		.loc 1 422 0
 443 023a FFF7FEFF 		bl	HAL_GetTick
 444 023e 0246     		mov	r2, r0
 445 0240 7B6B     		ldr	r3, [r7, #52]
 446 0242 D31A     		subs	r3, r2, r3
 447 0244 642B     		cmp	r3, #100
 448 0246 01D9     		bls	.L30
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 449              		.loc 1 424 0
 450 0248 0323     		movs	r3, #3
 451 024a 13E1     		b	.L7
 452              	.L30:
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 453              		.loc 1 420 0 discriminator 1
 454 024c 154B     		ldr	r3, .L54
 455 024e 5B6F     		ldr	r3, [r3, #116]
 456 0250 03F00203 		and	r3, r3, #2
 457 0254 002B     		cmp	r3, #0
ARM GAS  /tmp/cco2UtZg.s 			page 27


 458 0256 F0D1     		bne	.L31
 459              	.L26:
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       } 
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 460              		.loc 1 430 0
 461 0258 7B68     		ldr	r3, [r7, #4]
 462 025a 1B68     		ldr	r3, [r3]
 463 025c 03F00403 		and	r3, r3, #4
 464 0260 002B     		cmp	r3, #0
 465 0262 7BD0     		beq	.L32
 466              	.LBB37:
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the parameters */
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Enable Power Clock*/
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 467              		.loc 1 436 0
 468 0264 0F4B     		ldr	r3, .L54
 469 0266 0F4A     		ldr	r2, .L54
 470 0268 126C     		ldr	r2, [r2, #64]
 471 026a 42F08052 		orr	r2, r2, #268435456
 472 026e 1A64     		str	r2, [r3, #64]
 473 0270 0C4B     		ldr	r3, .L54
 474 0272 1B6C     		ldr	r3, [r3, #64]
 475 0274 03F08053 		and	r3, r3, #268435456
 476 0278 BB60     		str	r3, [r7, #8]
 477 027a BB68     		ldr	r3, [r7, #8]
 478              	.LBE37:
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Enable write access to Backup domain */
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     PWR->CR |= PWR_CR_DBP;
 479              		.loc 1 439 0
 480 027c 0D4B     		ldr	r3, .L54+16
 481 027e 0D4A     		ldr	r2, .L54+16
 482 0280 1268     		ldr	r2, [r2]
 483 0282 42F48072 		orr	r2, r2, #256
 484 0286 1A60     		str	r2, [r3]
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Wait for Backup domain Write protection disable */
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 485              		.loc 1 442 0
 486 0288 FFF7FEFF 		bl	HAL_GetTick
 487 028c 7863     		str	r0, [r7, #52]
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
 488              		.loc 1 444 0
 489 028e 13E0     		b	.L33
 490              	.L34:
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 491              		.loc 1 446 0
 492 0290 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/cco2UtZg.s 			page 28


 493 0294 0246     		mov	r2, r0
 494 0296 7B6B     		ldr	r3, [r7, #52]
 495 0298 D31A     		subs	r3, r2, r3
 496 029a 642B     		cmp	r3, #100
 497 029c 0CD9     		bls	.L33
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_TIMEOUT;
 498              		.loc 1 448 0
 499 029e 0323     		movs	r3, #3
 500 02a0 E8E0     		b	.L7
 501              	.L55:
 502 02a2 00BF     		.align	2
 503              	.L54:
 504 02a4 00380240 		.word	1073887232
 505 02a8 02380240 		.word	1073887234
 506 02ac 00004742 		.word	1111949312
 507 02b0 800E4742 		.word	1111953024
 508 02b4 00700040 		.word	1073770496
 509              	.L33:
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 510              		.loc 1 444 0 discriminator 1
 511 02b8 704B     		ldr	r3, .L56
 512 02ba 1B68     		ldr	r3, [r3]
 513 02bc 03F48073 		and	r3, r3, #256
 514 02c0 002B     		cmp	r3, #0
 515 02c2 E5D0     		beq	.L34
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }      
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 516              		.loc 1 453 0
 517 02c4 6E4B     		ldr	r3, .L56+4
 518 02c6 0022     		movs	r2, #0
 519 02c8 1A70     		strb	r2, [r3]
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Get Start Tick*/
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 520              		.loc 1 456 0
 521 02ca FFF7FEFF 		bl	HAL_GetTick
 522 02ce 7863     		str	r0, [r7, #52]
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Wait till LSE is ready */  
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 523              		.loc 1 459 0
 524 02d0 0AE0     		b	.L35
 525              	.L36:
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 526              		.loc 1 461 0
 527 02d2 FFF7FEFF 		bl	HAL_GetTick
 528 02d6 0246     		mov	r2, r0
 529 02d8 7B6B     		ldr	r3, [r7, #52]
 530 02da D21A     		subs	r2, r2, r3
 531 02dc 41F28833 		movw	r3, #5000
 532 02e0 9A42     		cmp	r2, r3
 533 02e2 01D9     		bls	.L35
ARM GAS  /tmp/cco2UtZg.s 			page 29


 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         return HAL_TIMEOUT;
 534              		.loc 1 463 0
 535 02e4 0323     		movs	r3, #3
 536 02e6 C5E0     		b	.L7
 537              	.L35:
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 538              		.loc 1 459 0 discriminator 1
 539 02e8 664B     		ldr	r3, .L56+8
 540 02ea 1B6F     		ldr	r3, [r3, #112]
 541 02ec 03F00203 		and	r3, r3, #2
 542 02f0 002B     		cmp	r3, #0
 543 02f2 EED1     		bne	.L36
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }    
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     } 
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 544              		.loc 1 468 0
 545 02f4 624B     		ldr	r3, .L56+4
 546 02f6 7A68     		ldr	r2, [r7, #4]
 547 02f8 9268     		ldr	r2, [r2, #8]
 548 02fa D2B2     		uxtb	r2, r2
 549 02fc 1A70     		strb	r2, [r3]
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check the LSE State */
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 550              		.loc 1 470 0
 551 02fe 7B68     		ldr	r3, [r7, #4]
 552 0300 9B68     		ldr	r3, [r3, #8]
 553 0302 002B     		cmp	r3, #0
 554 0304 15D0     		beq	.L37
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 555              		.loc 1 473 0
 556 0306 FFF7FEFF 		bl	HAL_GetTick
 557 030a 7863     		str	r0, [r7, #52]
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 558              		.loc 1 476 0
 559 030c 0AE0     		b	.L38
 560              	.L39:
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 561              		.loc 1 478 0
 562 030e FFF7FEFF 		bl	HAL_GetTick
 563 0312 0246     		mov	r2, r0
 564 0314 7B6B     		ldr	r3, [r7, #52]
 565 0316 D21A     		subs	r2, r2, r3
 566 0318 41F28833 		movw	r3, #5000
 567 031c 9A42     		cmp	r2, r3
 568 031e 01D9     		bls	.L38
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 569              		.loc 1 480 0
 570 0320 0323     		movs	r3, #3
ARM GAS  /tmp/cco2UtZg.s 			page 30


 571 0322 A7E0     		b	.L7
 572              	.L38:
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 573              		.loc 1 476 0 discriminator 1
 574 0324 574B     		ldr	r3, .L56+8
 575 0326 1B6F     		ldr	r3, [r3, #112]
 576 0328 03F00203 		and	r3, r3, #2
 577 032c 002B     		cmp	r3, #0
 578 032e EED0     		beq	.L39
 579 0330 14E0     		b	.L32
 580              	.L37:
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 581              		.loc 1 487 0
 582 0332 FFF7FEFF 		bl	HAL_GetTick
 583 0336 7863     		str	r0, [r7, #52]
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 584              		.loc 1 490 0
 585 0338 0AE0     		b	.L40
 586              	.L41:
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 587              		.loc 1 492 0
 588 033a FFF7FEFF 		bl	HAL_GetTick
 589 033e 0246     		mov	r2, r0
 590 0340 7B6B     		ldr	r3, [r7, #52]
 591 0342 D21A     		subs	r2, r2, r3
 592 0344 41F28833 		movw	r3, #5000
 593 0348 9A42     		cmp	r2, r3
 594 034a 01D9     		bls	.L40
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 595              		.loc 1 494 0
 596 034c 0323     		movs	r3, #3
 597 034e 91E0     		b	.L7
 598              	.L40:
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 599              		.loc 1 490 0 discriminator 1
 600 0350 4C4B     		ldr	r3, .L56+8
 601 0352 1B6F     		ldr	r3, [r3, #112]
 602 0354 03F00203 		and	r3, r3, #2
 603 0358 002B     		cmp	r3, #0
 604 035a EED1     		bne	.L41
 605              	.L32:
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }       
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/cco2UtZg.s 			page 31


 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 606              		.loc 1 502 0
 607 035c 7B68     		ldr	r3, [r7, #4]
 608 035e 9B69     		ldr	r3, [r3, #24]
 609 0360 002B     		cmp	r3, #0
 610 0362 00F08680 		beq	.L42
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 611              		.loc 1 505 0
 612 0366 474B     		ldr	r3, .L56+8
 613 0368 9B68     		ldr	r3, [r3, #8]
 614 036a 03F00C03 		and	r3, r3, #12
 615 036e 082B     		cmp	r3, #8
 616 0370 7DD0     		beq	.L43
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     { 
 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 617              		.loc 1 507 0
 618 0372 7B68     		ldr	r3, [r7, #4]
 619 0374 9B69     		ldr	r3, [r3, #24]
 620 0376 022B     		cmp	r3, #2
 621 0378 62D1     		bne	.L44
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the parameters */
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the main PLL. */
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 622              		.loc 1 517 0
 623 037a 434B     		ldr	r3, .L56+12
 624 037c 0022     		movs	r2, #0
 625 037e 1A60     		str	r2, [r3]
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 626              		.loc 1 520 0
 627 0380 FFF7FEFF 		bl	HAL_GetTick
 628 0384 7863     		str	r0, [r7, #52]
 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 629              		.loc 1 523 0
 630 0386 08E0     		b	.L45
 631              	.L46:
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 632              		.loc 1 525 0
 633 0388 FFF7FEFF 		bl	HAL_GetTick
 634 038c 0246     		mov	r2, r0
 635 038e 7B6B     		ldr	r3, [r7, #52]
 636 0390 D31A     		subs	r3, r2, r3
 637 0392 642B     		cmp	r3, #100
ARM GAS  /tmp/cco2UtZg.s 			page 32


 638 0394 01D9     		bls	.L45
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 639              		.loc 1 527 0
 640 0396 0323     		movs	r3, #3
 641 0398 6CE0     		b	.L7
 642              	.L45:
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 643              		.loc 1 523 0 discriminator 1
 644 039a 3A4B     		ldr	r3, .L56+8
 645 039c 1B68     		ldr	r3, [r3]
 646 039e 03F00073 		and	r3, r3, #33554432
 647 03a2 002B     		cmp	r3, #0
 648 03a4 F0D1     		bne	.L46
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }        
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                  
 649              		.loc 1 532 0
 650 03a6 374B     		ldr	r3, .L56+8
 651 03a8 7A68     		ldr	r2, [r7, #4]
 652 03aa D169     		ldr	r1, [r2, #28]
 653 03ac 7A68     		ldr	r2, [r7, #4]
 654 03ae 126A     		ldr	r2, [r2, #32]
 655 03b0 1143     		orrs	r1, r1, r2
 656 03b2 7A68     		ldr	r2, [r7, #4]
 657 03b4 506A     		ldr	r0, [r2, #36]
 658 03b6 47F6C072 		movw	r2, #32704
 659 03ba 3A62     		str	r2, [r7, #32]
 660              	.LBB38:
 661              	.LBB39:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 662              		.loc 2 581 0
 663 03bc 3A6A     		ldr	r2, [r7, #32]
 664              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 665 03be 92FAA2F2 		rbit r2, r2
 666              	@ 0 "" 2
 667              		.thumb
 668 03c2 FA61     		str	r2, [r7, #28]
 669              		.loc 2 594 0
 670 03c4 FA69     		ldr	r2, [r7, #28]
 671              	.LBE39:
 672              	.LBE38:
 673              		.loc 1 532 0
 674 03c6 B2FA82F2 		clz	r2, r2
 675 03ca 00FA02F2 		lsl	r2, r0, r2
 676 03ce 1143     		orrs	r1, r1, r2
 677 03d0 7A68     		ldr	r2, [r7, #4]
 678 03d2 926A     		ldr	r2, [r2, #40]
 679 03d4 5208     		lsrs	r2, r2, #1
 680 03d6 501E     		subs	r0, r2, #1
 681 03d8 4FF44032 		mov	r2, #196608
 682 03dc BA61     		str	r2, [r7, #24]
 683              	.LBB40:
 684              	.LBB41:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
ARM GAS  /tmp/cco2UtZg.s 			page 33


 685              		.loc 2 581 0
 686 03de BA69     		ldr	r2, [r7, #24]
 687              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 688 03e0 92FAA2F2 		rbit r2, r2
 689              	@ 0 "" 2
 690              		.thumb
 691 03e4 7A61     		str	r2, [r7, #20]
 692              		.loc 2 594 0
 693 03e6 7A69     		ldr	r2, [r7, #20]
 694              	.LBE41:
 695              	.LBE40:
 696              		.loc 1 532 0
 697 03e8 B2FA82F2 		clz	r2, r2
 698 03ec 00FA02F2 		lsl	r2, r0, r2
 699 03f0 1143     		orrs	r1, r1, r2
 700 03f2 7A68     		ldr	r2, [r7, #4]
 701 03f4 D06A     		ldr	r0, [r2, #44]
 702 03f6 4FF07062 		mov	r2, #251658240
 703 03fa 3A61     		str	r2, [r7, #16]
 704              	.LBB42:
 705              	.LBB43:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 706              		.loc 2 581 0
 707 03fc 3A69     		ldr	r2, [r7, #16]
 708              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 709 03fe 92FAA2F2 		rbit r2, r2
 710              	@ 0 "" 2
 711              		.thumb
 712 0402 FA60     		str	r2, [r7, #12]
 713              		.loc 2 594 0
 714 0404 FA68     		ldr	r2, [r7, #12]
 715              	.LBE43:
 716              	.LBE42:
 717              		.loc 1 532 0
 718 0406 B2FA82F2 		clz	r2, r2
 719 040a 00FA02F2 		lsl	r2, r0, r2
 720 040e 0A43     		orrs	r2, r2, r1
 721 0410 5A60     		str	r2, [r3, #4]
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                                  RCC_OscInitStruct->PLL.PLLM                                       
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                                  (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))   
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                                  (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCF
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                                  (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Enable the main PLL. */
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 722              		.loc 1 538 0
 723 0412 1D4B     		ldr	r3, .L56+12
 724 0414 0122     		movs	r2, #1
 725 0416 1A60     		str	r2, [r3]
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 726              		.loc 1 541 0
 727 0418 FFF7FEFF 		bl	HAL_GetTick
 728 041c 7863     		str	r0, [r7, #52]
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
ARM GAS  /tmp/cco2UtZg.s 			page 34


 729              		.loc 1 544 0
 730 041e 08E0     		b	.L50
 731              	.L51:
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 732              		.loc 1 546 0
 733 0420 FFF7FEFF 		bl	HAL_GetTick
 734 0424 0246     		mov	r2, r0
 735 0426 7B6B     		ldr	r3, [r7, #52]
 736 0428 D31A     		subs	r3, r2, r3
 737 042a 642B     		cmp	r3, #100
 738 042c 01D9     		bls	.L50
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 739              		.loc 1 548 0
 740 042e 0323     		movs	r3, #3
 741 0430 20E0     		b	.L7
 742              	.L50:
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 743              		.loc 1 544 0 discriminator 1
 744 0432 144B     		ldr	r3, .L56+8
 745 0434 1B68     		ldr	r3, [r3]
 746 0436 03F00073 		and	r3, r3, #33554432
 747 043a 002B     		cmp	r3, #0
 748 043c F0D0     		beq	.L51
 749 043e 18E0     		b	.L42
 750              	.L44:
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Disable the main PLL. */
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 751              		.loc 1 555 0
 752 0440 114B     		ldr	r3, .L56+12
 753 0442 0022     		movs	r2, #0
 754 0444 1A60     		str	r2, [r3]
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Get Start Tick*/
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 755              		.loc 1 558 0
 756 0446 FFF7FEFF 		bl	HAL_GetTick
 757 044a 7863     		str	r0, [r7, #52]
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Wait till PLL is ready */  
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 758              		.loc 1 561 0
 759 044c 08E0     		b	.L52
 760              	.L53:
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 761              		.loc 1 563 0
 762 044e FFF7FEFF 		bl	HAL_GetTick
 763 0452 0246     		mov	r2, r0
 764 0454 7B6B     		ldr	r3, [r7, #52]
 765 0456 D31A     		subs	r3, r2, r3
ARM GAS  /tmp/cco2UtZg.s 			page 35


 766 0458 642B     		cmp	r3, #100
 767 045a 01D9     		bls	.L52
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 768              		.loc 1 565 0
 769 045c 0323     		movs	r3, #3
 770 045e 09E0     		b	.L7
 771              	.L52:
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 772              		.loc 1 561 0 discriminator 1
 773 0460 084B     		ldr	r3, .L56+8
 774 0462 1B68     		ldr	r3, [r3]
 775 0464 03F00073 		and	r3, r3, #33554432
 776 0468 002B     		cmp	r3, #0
 777 046a F0D1     		bne	.L53
 778 046c 01E0     		b	.L42
 779              	.L43:
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     else
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 780              		.loc 1 572 0
 781 046e 0123     		movs	r3, #1
 782 0470 00E0     		b	.L7
 783              	.L42:
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return HAL_OK;
 784              		.loc 1 575 0
 785 0472 0023     		movs	r3, #0
 786              	.L7:
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 787              		.loc 1 576 0
 788 0474 1846     		mov	r0, r3
 789 0476 3837     		adds	r7, r7, #56
 790 0478 BD46     		mov	sp, r7
 791              		@ sp needed
 792 047a 80BD     		pop	{r7, pc}
 793              	.L57:
 794              		.align	2
 795              	.L56:
 796 047c 00700040 		.word	1073770496
 797 0480 70380240 		.word	1073887344
 798 0484 00380240 		.word	1073887232
 799 0488 60004742 		.word	1111949408
 800              		.cfi_endproc
 801              	.LFE126:
 803              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 804              		.align	2
 805              		.global	HAL_RCC_ClockConfig
 806              		.thumb
 807              		.thumb_func
 809              	HAL_RCC_ClockConfig:
 810              	.LFB127:
ARM GAS  /tmp/cco2UtZg.s 			page 36


 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB busses clocks according to the specified 
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_OscInitTypeDef structure that
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  FLatency: FLASH Latency, this parameter depend on device selected
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * 
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 811              		.loc 1 604 0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 16
 814              		@ frame_needed = 1, uses_anonymous_args = 0
 815 0000 80B5     		push	{r7, lr}
 816              	.LCFI5:
 817              		.cfi_def_cfa_offset 8
 818              		.cfi_offset 7, -8
 819              		.cfi_offset 14, -4
 820 0002 84B0     		sub	sp, sp, #16
 821              	.LCFI6:
 822              		.cfi_def_cfa_offset 24
 823 0004 00AF     		add	r7, sp, #0
 824              	.LCFI7:
 825              		.cfi_def_cfa_register 7
 826 0006 7860     		str	r0, [r7, #4]
 827 0008 3960     		str	r1, [r7]
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t tickstart = 0;   
 828              		.loc 1 605 0
 829 000a 0023     		movs	r3, #0
 830 000c FB60     		str	r3, [r7, #12]
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     must be correctly programmed according to the frequency of the CPU clock 
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     (HCLK) and the supply voltage of the device. */
ARM GAS  /tmp/cco2UtZg.s 			page 37


 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Increasing the CPU frequency */
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 831              		.loc 1 616 0
 832 000e A24B     		ldr	r3, .L102
 833 0010 1B68     		ldr	r3, [r3]
 834 0012 03F00F02 		and	r2, r3, #15
 835 0016 3B68     		ldr	r3, [r7]
 836 0018 9A42     		cmp	r2, r3
 837 001a 80F0A880 		bcs	.L59
 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {    
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 838              		.loc 1 619 0
 839 001e 9E4B     		ldr	r3, .L102
 840 0020 3A68     		ldr	r2, [r7]
 841 0022 D2B2     		uxtb	r2, r2
 842 0024 1A70     		strb	r2, [r3]
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 843              		.loc 1 623 0
 844 0026 9C4B     		ldr	r3, .L102
 845 0028 1B68     		ldr	r3, [r3]
 846 002a 03F00F02 		and	r2, r3, #15
 847 002e 3B68     		ldr	r3, [r7]
 848 0030 9A42     		cmp	r2, r3
 849 0032 01D0     		beq	.L60
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
 850              		.loc 1 625 0
 851 0034 0123     		movs	r3, #1
 852 0036 69E1     		b	.L61
 853              	.L60:
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*-------------------------- HCLK Configuration --------------------------*/
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 854              		.loc 1 629 0
 855 0038 7B68     		ldr	r3, [r7, #4]
 856 003a 1B68     		ldr	r3, [r3]
 857 003c 03F00203 		and	r3, r3, #2
 858 0040 002B     		cmp	r3, #0
 859 0042 08D0     		beq	.L62
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 860              		.loc 1 632 0
 861 0044 954B     		ldr	r3, .L102+4
 862 0046 954A     		ldr	r2, .L102+4
 863 0048 9268     		ldr	r2, [r2, #8]
 864 004a 22F0F001 		bic	r1, r2, #240
 865 004e 7A68     		ldr	r2, [r7, #4]
 866 0050 9268     		ldr	r2, [r2, #8]
 867 0052 0A43     		orrs	r2, r2, r1
 868 0054 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/cco2UtZg.s 			page 38


 869              	.L62:
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*------------------------- SYSCLK Configuration ---------------------------*/ 
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 870              		.loc 1 636 0
 871 0056 7B68     		ldr	r3, [r7, #4]
 872 0058 1B68     		ldr	r3, [r3]
 873 005a 03F00103 		and	r3, r3, #1
 874 005e 002B     		cmp	r3, #0
 875 0060 00F03181 		beq	.L63
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {    
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 876              		.loc 1 641 0
 877 0064 7B68     		ldr	r3, [r7, #4]
 878 0066 5B68     		ldr	r3, [r3, #4]
 879 0068 012B     		cmp	r3, #1
 880 006a 07D1     		bne	.L64
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSE ready flag */  
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 881              		.loc 1 644 0
 882 006c 8B4B     		ldr	r3, .L102+4
 883 006e 1B68     		ldr	r3, [r3]
 884 0070 03F40033 		and	r3, r3, #131072
 885 0074 002B     		cmp	r3, #0
 886 0076 1AD1     		bne	.L65
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 887              		.loc 1 646 0
 888 0078 0123     		movs	r3, #1
 889 007a 47E1     		b	.L61
 890              	.L64:
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* PLL is selected as System Clock Source */
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 891              		.loc 1 650 0
 892 007c 7B68     		ldr	r3, [r7, #4]
 893 007e 5B68     		ldr	r3, [r3, #4]
 894 0080 022B     		cmp	r3, #2
 895 0082 03D0     		beq	.L66
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****               (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 896              		.loc 1 651 0 discriminator 1
 897 0084 7B68     		ldr	r3, [r7, #4]
 898 0086 5B68     		ldr	r3, [r3, #4]
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****               (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 899              		.loc 1 650 0 discriminator 1
 900 0088 032B     		cmp	r3, #3
 901 008a 08D1     		bne	.L67
 902              	.L66:
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the PLL ready flag */  
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
ARM GAS  /tmp/cco2UtZg.s 			page 39


 903              		.loc 1 654 0
 904 008c 834B     		ldr	r3, .L102+4
 905 008e 1B68     		ldr	r3, [r3]
 906 0090 03F00073 		and	r3, r3, #33554432
 907 0094 002B     		cmp	r3, #0
 908 0096 01D1     		bne	.L68
 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 909              		.loc 1 656 0
 910 0098 0123     		movs	r3, #1
 911 009a 37E1     		b	.L61
 912              	.L68:
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 913              		.loc 1 654 0 discriminator 1
 914 009c 07E0     		b	.L65
 915              	.L67:
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSI is selected as System Clock Source */
 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSI ready flag */  
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 916              		.loc 1 663 0
 917 009e 7F4B     		ldr	r3, .L102+4
 918 00a0 1B68     		ldr	r3, [r3]
 919 00a2 03F00203 		and	r3, r3, #2
 920 00a6 002B     		cmp	r3, #0
 921 00a8 01D1     		bne	.L65
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 922              		.loc 1 665 0
 923 00aa 0123     		movs	r3, #1
 924 00ac 2EE1     		b	.L61
 925              	.L65:
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 926              		.loc 1 669 0
 927 00ae 7B4B     		ldr	r3, .L102+4
 928 00b0 7A4A     		ldr	r2, .L102+4
 929 00b2 9268     		ldr	r2, [r2, #8]
 930 00b4 22F00301 		bic	r1, r2, #3
 931 00b8 7A68     		ldr	r2, [r7, #4]
 932 00ba 5268     		ldr	r2, [r2, #4]
 933 00bc 0A43     		orrs	r2, r2, r1
 934 00be 9A60     		str	r2, [r3, #8]
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 935              		.loc 1 671 0
 936 00c0 FFF7FEFF 		bl	HAL_GetTick
 937 00c4 F860     		str	r0, [r7, #12]
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 938              		.loc 1 673 0
 939 00c6 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cco2UtZg.s 			page 40


 940 00c8 5B68     		ldr	r3, [r3, #4]
 941 00ca 012B     		cmp	r3, #1
 942 00cc 12D1     		bne	.L69
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 943              		.loc 1 675 0
 944 00ce 0AE0     		b	.L70
 945              	.L71:
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 946              		.loc 1 677 0
 947 00d0 FFF7FEFF 		bl	HAL_GetTick
 948 00d4 0246     		mov	r2, r0
 949 00d6 FB68     		ldr	r3, [r7, #12]
 950 00d8 D21A     		subs	r2, r2, r3
 951 00da 41F28833 		movw	r3, #5000
 952 00de 9A42     		cmp	r2, r3
 953 00e0 01D9     		bls	.L70
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 954              		.loc 1 679 0
 955 00e2 0323     		movs	r3, #3
 956 00e4 12E1     		b	.L61
 957              	.L70:
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 958              		.loc 1 675 0 discriminator 1
 959 00e6 6D4B     		ldr	r3, .L102+4
 960 00e8 9B68     		ldr	r3, [r3, #8]
 961 00ea 03F00C03 		and	r3, r3, #12
 962 00ee 042B     		cmp	r3, #4
 963 00f0 EED1     		bne	.L71
 964 00f2 E8E0     		b	.L63
 965              	.L69:
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 966              		.loc 1 683 0
 967 00f4 7B68     		ldr	r3, [r7, #4]
 968 00f6 5B68     		ldr	r3, [r3, #4]
 969 00f8 022B     		cmp	r3, #2
 970 00fa 12D1     		bne	.L72
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 971              		.loc 1 685 0
 972 00fc 0AE0     		b	.L73
 973              	.L74:
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 974              		.loc 1 687 0
 975 00fe FFF7FEFF 		bl	HAL_GetTick
 976 0102 0246     		mov	r2, r0
 977 0104 FB68     		ldr	r3, [r7, #12]
 978 0106 D21A     		subs	r2, r2, r3
 979 0108 41F28833 		movw	r3, #5000
 980 010c 9A42     		cmp	r2, r3
 981 010e 01D9     		bls	.L73
ARM GAS  /tmp/cco2UtZg.s 			page 41


 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 982              		.loc 1 689 0
 983 0110 0323     		movs	r3, #3
 984 0112 FBE0     		b	.L61
 985              	.L73:
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 986              		.loc 1 685 0 discriminator 1
 987 0114 614B     		ldr	r3, .L102+4
 988 0116 9B68     		ldr	r3, [r3, #8]
 989 0118 03F00C03 		and	r3, r3, #12
 990 011c 082B     		cmp	r3, #8
 991 011e EED1     		bne	.L74
 992 0120 D1E0     		b	.L63
 993              	.L72:
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 994              		.loc 1 693 0
 995 0122 7B68     		ldr	r3, [r7, #4]
 996 0124 5B68     		ldr	r3, [r3, #4]
 997 0126 032B     		cmp	r3, #3
 998 0128 0ED1     		bne	.L75
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 999              		.loc 1 695 0
 1000 012a 01E0     		b	.L76
 1001              	.L100:
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1002              		.loc 1 699 0
 1003 012c 0323     		movs	r3, #3
 1004 012e EDE0     		b	.L61
 1005              	.L76:
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1006              		.loc 1 695 0 discriminator 1
 1007 0130 5A4B     		ldr	r3, .L102+4
 1008 0132 9B68     		ldr	r3, [r3, #8]
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 1009              		.loc 1 697 0 discriminator 1
 1010 0134 FFF7FEFF 		bl	HAL_GetTick
 1011 0138 0246     		mov	r2, r0
 1012 013a FB68     		ldr	r3, [r7, #12]
 1013 013c D21A     		subs	r2, r2, r3
 1014 013e 41F28833 		movw	r3, #5000
 1015 0142 9A42     		cmp	r2, r3
 1016 0144 F4D9     		bls	.L76
 1017 0146 F1E7     		b	.L100
 1018              	.L75:
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
ARM GAS  /tmp/cco2UtZg.s 			page 42


 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 1019              		.loc 1 705 0
 1020 0148 0AE0     		b	.L78
 1021              	.L79:
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1022              		.loc 1 707 0
 1023 014a FFF7FEFF 		bl	HAL_GetTick
 1024 014e 0246     		mov	r2, r0
 1025 0150 FB68     		ldr	r3, [r7, #12]
 1026 0152 D21A     		subs	r2, r2, r3
 1027 0154 41F28833 		movw	r3, #5000
 1028 0158 9A42     		cmp	r2, r3
 1029 015a 01D9     		bls	.L78
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1030              		.loc 1 709 0
 1031 015c 0323     		movs	r3, #3
 1032 015e D5E0     		b	.L61
 1033              	.L78:
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1034              		.loc 1 705 0 discriminator 1
 1035 0160 4E4B     		ldr	r3, .L102+4
 1036 0162 9B68     		ldr	r3, [r3, #8]
 1037 0164 03F00C03 		and	r3, r3, #12
 1038 0168 002B     		cmp	r3, #0
 1039 016a EED1     		bne	.L79
 1040 016c ABE0     		b	.L63
 1041              	.L59:
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }    
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Decreasing the CPU frequency */
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*-------------------------- HCLK Configuration --------------------------*/
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1042              		.loc 1 719 0
 1043 016e 7B68     		ldr	r3, [r7, #4]
 1044 0170 1B68     		ldr	r3, [r3]
 1045 0172 03F00203 		and	r3, r3, #2
 1046 0176 002B     		cmp	r3, #0
 1047 0178 08D0     		beq	.L80
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1048              		.loc 1 722 0
 1049 017a 484B     		ldr	r3, .L102+4
 1050 017c 474A     		ldr	r2, .L102+4
 1051 017e 9268     		ldr	r2, [r2, #8]
 1052 0180 22F0F001 		bic	r1, r2, #240
 1053 0184 7A68     		ldr	r2, [r7, #4]
 1054 0186 9268     		ldr	r2, [r2, #8]
 1055 0188 0A43     		orrs	r2, r2, r1
 1056 018a 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/cco2UtZg.s 			page 43


 1057              	.L80:
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /*------------------------- SYSCLK Configuration -------------------------*/
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1058              		.loc 1 726 0
 1059 018c 7B68     		ldr	r3, [r7, #4]
 1060 018e 1B68     		ldr	r3, [r3]
 1061 0190 03F00103 		and	r3, r3, #1
 1062 0194 002B     		cmp	r3, #0
 1063 0196 00F08980 		beq	.L81
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {    
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSE is selected as System Clock Source */
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1064              		.loc 1 731 0
 1065 019a 7B68     		ldr	r3, [r7, #4]
 1066 019c 5B68     		ldr	r3, [r3, #4]
 1067 019e 012B     		cmp	r3, #1
 1068 01a0 07D1     		bne	.L82
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSE ready flag */  
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1069              		.loc 1 734 0
 1070 01a2 3E4B     		ldr	r3, .L102+4
 1071 01a4 1B68     		ldr	r3, [r3]
 1072 01a6 03F40033 		and	r3, r3, #131072
 1073 01aa 002B     		cmp	r3, #0
 1074 01ac 1AD1     		bne	.L83
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 1075              		.loc 1 736 0
 1076 01ae 0123     		movs	r3, #1
 1077 01b0 ACE0     		b	.L61
 1078              	.L82:
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* PLL is selected as System Clock Source */
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) || 
 1079              		.loc 1 740 0
 1080 01b2 7B68     		ldr	r3, [r7, #4]
 1081 01b4 5B68     		ldr	r3, [r3, #4]
 1082 01b6 022B     		cmp	r3, #2
 1083 01b8 03D0     		beq	.L84
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****               (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 1084              		.loc 1 741 0 discriminator 1
 1085 01ba 7B68     		ldr	r3, [r7, #4]
 1086 01bc 5B68     		ldr	r3, [r3, #4]
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****               (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 1087              		.loc 1 740 0 discriminator 1
 1088 01be 032B     		cmp	r3, #3
 1089 01c0 08D1     		bne	.L85
 1090              	.L84:
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the PLL ready flag */  
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
ARM GAS  /tmp/cco2UtZg.s 			page 44


 1091              		.loc 1 744 0
 1092 01c2 364B     		ldr	r3, .L102+4
 1093 01c4 1B68     		ldr	r3, [r3]
 1094 01c6 03F00073 		and	r3, r3, #33554432
 1095 01ca 002B     		cmp	r3, #0
 1096 01cc 01D1     		bne	.L86
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 1097              		.loc 1 746 0
 1098 01ce 0123     		movs	r3, #1
 1099 01d0 9CE0     		b	.L61
 1100              	.L86:
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1101              		.loc 1 744 0 discriminator 1
 1102 01d2 07E0     		b	.L83
 1103              	.L85:
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* HSI is selected as System Clock Source */
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* Check the HSI ready flag */  
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1104              		.loc 1 753 0
 1105 01d4 314B     		ldr	r3, .L102+4
 1106 01d6 1B68     		ldr	r3, [r3]
 1107 01d8 03F00203 		and	r3, r3, #2
 1108 01dc 002B     		cmp	r3, #0
 1109 01de 01D1     		bne	.L83
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           return HAL_ERROR;
 1110              		.loc 1 755 0
 1111 01e0 0123     		movs	r3, #1
 1112 01e2 93E0     		b	.L61
 1113              	.L83:
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 1114              		.loc 1 758 0
 1115 01e4 2D4B     		ldr	r3, .L102+4
 1116 01e6 2D4A     		ldr	r2, .L102+4
 1117 01e8 9268     		ldr	r2, [r2, #8]
 1118 01ea 22F00301 		bic	r1, r2, #3
 1119 01ee 7A68     		ldr	r2, [r7, #4]
 1120 01f0 5268     		ldr	r2, [r2, #4]
 1121 01f2 0A43     		orrs	r2, r2, r1
 1122 01f4 9A60     		str	r2, [r3, #8]
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* Get Start Tick*/
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 1123              		.loc 1 760 0
 1124 01f6 FFF7FEFF 		bl	HAL_GetTick
 1125 01fa F860     		str	r0, [r7, #12]
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1126              		.loc 1 762 0
 1127 01fc 7B68     		ldr	r3, [r7, #4]
 1128 01fe 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/cco2UtZg.s 			page 45


 1129 0200 012B     		cmp	r3, #1
 1130 0202 12D1     		bne	.L87
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 1131              		.loc 1 764 0
 1132 0204 0AE0     		b	.L88
 1133              	.L89:
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1134              		.loc 1 766 0
 1135 0206 FFF7FEFF 		bl	HAL_GetTick
 1136 020a 0246     		mov	r2, r0
 1137 020c FB68     		ldr	r3, [r7, #12]
 1138 020e D21A     		subs	r2, r2, r3
 1139 0210 41F28833 		movw	r3, #5000
 1140 0214 9A42     		cmp	r2, r3
 1141 0216 01D9     		bls	.L88
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1142              		.loc 1 768 0
 1143 0218 0323     		movs	r3, #3
 1144 021a 77E0     		b	.L61
 1145              	.L88:
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1146              		.loc 1 764 0 discriminator 1
 1147 021c 1F4B     		ldr	r3, .L102+4
 1148 021e 9B68     		ldr	r3, [r3, #8]
 1149 0220 03F00C03 		and	r3, r3, #12
 1150 0224 042B     		cmp	r3, #4
 1151 0226 EED1     		bne	.L89
 1152 0228 40E0     		b	.L81
 1153              	.L87:
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1154              		.loc 1 772 0
 1155 022a 7B68     		ldr	r3, [r7, #4]
 1156 022c 5B68     		ldr	r3, [r3, #4]
 1157 022e 022B     		cmp	r3, #2
 1158 0230 12D1     		bne	.L90
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 1159              		.loc 1 774 0
 1160 0232 0AE0     		b	.L91
 1161              	.L92:
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1162              		.loc 1 776 0
 1163 0234 FFF7FEFF 		bl	HAL_GetTick
 1164 0238 0246     		mov	r2, r0
 1165 023a FB68     		ldr	r3, [r7, #12]
 1166 023c D21A     		subs	r2, r2, r3
 1167 023e 41F28833 		movw	r3, #5000
 1168 0242 9A42     		cmp	r2, r3
 1169 0244 01D9     		bls	.L91
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
ARM GAS  /tmp/cco2UtZg.s 			page 46


 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1170              		.loc 1 778 0
 1171 0246 0323     		movs	r3, #3
 1172 0248 60E0     		b	.L61
 1173              	.L91:
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1174              		.loc 1 774 0 discriminator 1
 1175 024a 144B     		ldr	r3, .L102+4
 1176 024c 9B68     		ldr	r3, [r3, #8]
 1177 024e 03F00C03 		and	r3, r3, #12
 1178 0252 082B     		cmp	r3, #8
 1179 0254 EED1     		bne	.L92
 1180 0256 29E0     		b	.L81
 1181              	.L90:
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 1182              		.loc 1 782 0
 1183 0258 7B68     		ldr	r3, [r7, #4]
 1184 025a 5B68     		ldr	r3, [r3, #4]
 1185 025c 032B     		cmp	r3, #3
 1186 025e 0ED1     		bne	.L93
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 1187              		.loc 1 784 0
 1188 0260 01E0     		b	.L94
 1189              	.L101:
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1190              		.loc 1 788 0
 1191 0262 0323     		movs	r3, #3
 1192 0264 52E0     		b	.L61
 1193              	.L94:
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1194              		.loc 1 784 0 discriminator 1
 1195 0266 0D4B     		ldr	r3, .L102+4
 1196 0268 9B68     		ldr	r3, [r3, #8]
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 1197              		.loc 1 786 0 discriminator 1
 1198 026a FFF7FEFF 		bl	HAL_GetTick
 1199 026e 0246     		mov	r2, r0
 1200 0270 FB68     		ldr	r3, [r7, #12]
 1201 0272 D21A     		subs	r2, r2, r3
 1202 0274 41F28833 		movw	r3, #5000
 1203 0278 9A42     		cmp	r2, r3
 1204 027a F4D9     		bls	.L94
 1205 027c F1E7     		b	.L101
 1206              	.L93:
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           } 
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
ARM GAS  /tmp/cco2UtZg.s 			page 47


 1207              		.loc 1 794 0
 1208 027e 0FE0     		b	.L96
 1209              	.L97:
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1210              		.loc 1 796 0
 1211 0280 FFF7FEFF 		bl	HAL_GetTick
 1212 0284 0246     		mov	r2, r0
 1213 0286 FB68     		ldr	r3, [r7, #12]
 1214 0288 D21A     		subs	r2, r2, r3
 1215 028a 41F28833 		movw	r3, #5000
 1216 028e 9A42     		cmp	r2, r3
 1217 0290 06D9     		bls	.L96
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           {
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1218              		.loc 1 798 0
 1219 0292 0323     		movs	r3, #3
 1220 0294 3AE0     		b	.L61
 1221              	.L103:
 1222 0296 00BF     		.align	2
 1223              	.L102:
 1224 0298 003C0240 		.word	1073888256
 1225 029c 00380240 		.word	1073887232
 1226              	.L96:
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         {
 1227              		.loc 1 794 0 discriminator 1
 1228 02a0 1C4B     		ldr	r3, .L104
 1229 02a2 9B68     		ldr	r3, [r3, #8]
 1230 02a4 03F00C03 		and	r3, r3, #12
 1231 02a8 002B     		cmp	r3, #0
 1232 02aa E9D1     		bne	.L97
 1233              	.L81:
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****           }
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         }
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1234              		.loc 1 805 0
 1235 02ac 1A4B     		ldr	r3, .L104+4
 1236 02ae 3A68     		ldr	r2, [r7]
 1237 02b0 D2B2     		uxtb	r2, r2
 1238 02b2 1A70     		strb	r2, [r3]
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1239              		.loc 1 809 0
 1240 02b4 184B     		ldr	r3, .L104+4
 1241 02b6 1B68     		ldr	r3, [r3]
 1242 02b8 03F00F02 		and	r2, r3, #15
 1243 02bc 3B68     		ldr	r3, [r7]
 1244 02be 9A42     		cmp	r2, r3
 1245 02c0 01D0     		beq	.L63
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       return HAL_ERROR;
ARM GAS  /tmp/cco2UtZg.s 			page 48


 1246              		.loc 1 811 0
 1247 02c2 0123     		movs	r3, #1
 1248 02c4 22E0     		b	.L61
 1249              	.L63:
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  }
 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1250              		.loc 1 816 0
 1251 02c6 7B68     		ldr	r3, [r7, #4]
 1252 02c8 1B68     		ldr	r3, [r3]
 1253 02ca 03F00403 		and	r3, r3, #4
 1254 02ce 002B     		cmp	r3, #0
 1255 02d0 08D0     		beq	.L98
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1256              		.loc 1 819 0
 1257 02d2 104B     		ldr	r3, .L104
 1258 02d4 0F4A     		ldr	r2, .L104
 1259 02d6 9268     		ldr	r2, [r2, #8]
 1260 02d8 22F4E051 		bic	r1, r2, #7168
 1261 02dc 7A68     		ldr	r2, [r7, #4]
 1262 02de D268     		ldr	r2, [r2, #12]
 1263 02e0 0A43     		orrs	r2, r2, r1
 1264 02e2 9A60     		str	r2, [r3, #8]
 1265              	.L98:
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1266              		.loc 1 823 0
 1267 02e4 7B68     		ldr	r3, [r7, #4]
 1268 02e6 1B68     		ldr	r3, [r3]
 1269 02e8 03F00803 		and	r3, r3, #8
 1270 02ec 002B     		cmp	r3, #0
 1271 02ee 09D0     		beq	.L99
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 1272              		.loc 1 826 0
 1273 02f0 084B     		ldr	r3, .L104
 1274 02f2 084A     		ldr	r2, .L104
 1275 02f4 9268     		ldr	r2, [r2, #8]
 1276 02f6 22F46041 		bic	r1, r2, #57344
 1277 02fa 7A68     		ldr	r2, [r7, #4]
 1278 02fc 1269     		ldr	r2, [r2, #16]
 1279 02fe D200     		lsls	r2, r2, #3
 1280 0300 0A43     		orrs	r2, r2, r1
 1281 0302 9A60     		str	r2, [r3, #8]
 1282              	.L99:
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1283              		.loc 1 830 0
ARM GAS  /tmp/cco2UtZg.s 			page 49


 1284 0304 0F20     		movs	r0, #15
 1285 0306 FFF7FEFF 		bl	HAL_InitTick
 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return HAL_OK;
 1286              		.loc 1 832 0
 1287 030a 0023     		movs	r3, #0
 1288              	.L61:
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1289              		.loc 1 833 0
 1290 030c 1846     		mov	r0, r3
 1291 030e 1037     		adds	r7, r7, #16
 1292 0310 BD46     		mov	sp, r7
 1293              		@ sp needed
 1294 0312 80BD     		pop	{r7, pc}
 1295              	.L105:
 1296              		.align	2
 1297              	.L104:
 1298 0314 00380240 		.word	1073887232
 1299 0318 003C0240 		.word	1073888256
 1300              		.cfi_endproc
 1301              	.LFE127:
 1303              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1304              		.align	2
 1305              		.global	HAL_RCC_MCOConfig
 1306              		.thumb
 1307              		.thumb_func
 1309              	HAL_RCC_MCOConfig:
 1310              	.LFB128:
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @}
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions 
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *  @brief   RCC clocks control functions 
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  *
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @verbatim   
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================
 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****                       ##### Peripheral Control functions #####
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****  ===============================================================================  
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     [..]
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     frequencies.
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** @endverbatim
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @{
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8) or on MCO2 pin(PC9).
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   PA8/PC9 should be configured in alternate function mode.
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCOx: specifies the output direction for the clock source.
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1: Clock source to output on MCO1 pin(PA8).
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2: Clock source to output on MCO2 pin(PC9).
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/cco2UtZg.s 			page 50


 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSI: HSI clock selected as MCO1 source
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_LSE: LSE clock selected as MCO1 source
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSE: HSE clock selected as MCO1 source
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_PLLCLK: main PLL clock selected as MCO1 source
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source, available for a
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_I2SCLK: I2SCLK clock selected as MCO2 source, available only for
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_HSE: HSE clock selected as MCO2 source
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLCLK: main PLL clock selected as MCO2 source
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_MCODiv: specifies the MCOx prescaler.
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_1: no division applied to MCOx clock
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_2: division by 2 applied to MCOx clock
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_3: division by 3 applied to MCOx clock
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1311              		.loc 1 884 0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 48
 1314              		@ frame_needed = 1, uses_anonymous_args = 0
 1315 0000 80B5     		push	{r7, lr}
 1316              	.LCFI8:
 1317              		.cfi_def_cfa_offset 8
 1318              		.cfi_offset 7, -8
 1319              		.cfi_offset 14, -4
 1320 0002 8CB0     		sub	sp, sp, #48
 1321              	.LCFI9:
 1322              		.cfi_def_cfa_offset 56
 1323 0004 00AF     		add	r7, sp, #0
 1324              	.LCFI10:
 1325              		.cfi_def_cfa_register 7
 1326 0006 F860     		str	r0, [r7, #12]
 1327 0008 B960     		str	r1, [r7, #8]
 1328 000a 7A60     		str	r2, [r7, #4]
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check the parameters */
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* RCC_MCO1 */
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(RCC_MCOx == RCC_MCO1)
 1329              		.loc 1 890 0
 1330 000c FB68     		ldr	r3, [r7, #12]
 1331 000e 002B     		cmp	r3, #0
 1332 0010 27D1     		bne	.L107
 1333              	.LBB44:
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* MCO1 Clock Enable */
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __MCO1_CLK_ENABLE();
 1334              		.loc 1 895 0
ARM GAS  /tmp/cco2UtZg.s 			page 51


 1335 0012 294B     		ldr	r3, .L109
 1336 0014 284A     		ldr	r2, .L109
 1337 0016 126B     		ldr	r2, [r2, #48]
 1338 0018 42F00102 		orr	r2, r2, #1
 1339 001c 1A63     		str	r2, [r3, #48]
 1340 001e 264B     		ldr	r3, .L109
 1341 0020 1B6B     		ldr	r3, [r3, #48]
 1342 0022 03F00103 		and	r3, r3, #1
 1343 0026 BB61     		str	r3, [r7, #24]
 1344 0028 BB69     		ldr	r3, [r7, #24]
 1345              	.LBE44:
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Configure the MCO1 pin in alternate function mode */    
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO1_PIN;
 1346              		.loc 1 898 0
 1347 002a 4FF48073 		mov	r3, #256
 1348 002e FB61     		str	r3, [r7, #28]
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1349              		.loc 1 899 0
 1350 0030 0223     		movs	r3, #2
 1351 0032 3B62     		str	r3, [r7, #32]
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1352              		.loc 1 900 0
 1353 0034 0323     		movs	r3, #3
 1354 0036 BB62     		str	r3, [r7, #40]
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1355              		.loc 1 901 0
 1356 0038 0023     		movs	r3, #0
 1357 003a 7B62     		str	r3, [r7, #36]
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1358              		.loc 1 902 0
 1359 003c 0023     		movs	r3, #0
 1360 003e FB62     		str	r3, [r7, #44]
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 1361              		.loc 1 903 0
 1362 0040 07F11C03 		add	r3, r7, #28
 1363 0044 1D48     		ldr	r0, .L109+4
 1364 0046 1946     		mov	r1, r3
 1365 0048 FFF7FEFF 		bl	HAL_GPIO_Init
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 1366              		.loc 1 906 0
 1367 004c 1A4B     		ldr	r3, .L109
 1368 004e 1A4A     		ldr	r2, .L109
 1369 0050 9268     		ldr	r2, [r2, #8]
 1370 0052 22F0EC61 		bic	r1, r2, #123731968
 1371 0056 B868     		ldr	r0, [r7, #8]
 1372 0058 7A68     		ldr	r2, [r7, #4]
 1373 005a 0243     		orrs	r2, r2, r0
 1374 005c 0A43     		orrs	r2, r2, r1
 1375 005e 9A60     		str	r2, [r3, #8]
 1376 0060 27E0     		b	.L106
 1377              	.L107:
 1378              	.LBB45:
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****    /* This RCC MCO1 enable feature is available only on STM32F410xx devices */
ARM GAS  /tmp/cco2UtZg.s 			page 52


 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #if defined(RCC_CFGR_MCO1EN)
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_MCO1_ENABLE();
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #endif /* RCC_CFGR_MCO1EN */    
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* MCO2 Clock Enable */
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __MCO2_CLK_ENABLE();
 1379              		.loc 1 918 0
 1380 0062 154B     		ldr	r3, .L109
 1381 0064 144A     		ldr	r2, .L109
 1382 0066 126B     		ldr	r2, [r2, #48]
 1383 0068 42F00402 		orr	r2, r2, #4
 1384 006c 1A63     		str	r2, [r3, #48]
 1385 006e 124B     		ldr	r3, .L109
 1386 0070 1B6B     		ldr	r3, [r3, #48]
 1387 0072 03F00403 		and	r3, r3, #4
 1388 0076 7B61     		str	r3, [r7, #20]
 1389 0078 7B69     		ldr	r3, [r7, #20]
 1390              	.LBE45:
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Configure the MCO2 pin in alternate function mode */
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO2_PIN;
 1391              		.loc 1 921 0
 1392 007a 4FF40073 		mov	r3, #512
 1393 007e FB61     		str	r3, [r7, #28]
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1394              		.loc 1 922 0
 1395 0080 0223     		movs	r3, #2
 1396 0082 3B62     		str	r3, [r7, #32]
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 1397              		.loc 1 923 0
 1398 0084 0323     		movs	r3, #3
 1399 0086 BB62     		str	r3, [r7, #40]
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 1400              		.loc 1 924 0
 1401 0088 0023     		movs	r3, #0
 1402 008a 7B62     		str	r3, [r7, #36]
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1403              		.loc 1 925 0
 1404 008c 0023     		movs	r3, #0
 1405 008e FB62     		str	r3, [r7, #44]
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 1406              		.loc 1 926 0
 1407 0090 07F11C03 		add	r3, r7, #28
 1408 0094 0A48     		ldr	r0, .L109+8
 1409 0096 1946     		mov	r1, r3
 1410 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 1411              		.loc 1 929 0
 1412 009c 064B     		ldr	r3, .L109
 1413 009e 064A     		ldr	r2, .L109
 1414 00a0 9268     		ldr	r2, [r2, #8]
ARM GAS  /tmp/cco2UtZg.s 			page 53


 1415 00a2 22F07841 		bic	r1, r2, #-134217728
 1416 00a6 7A68     		ldr	r2, [r7, #4]
 1417 00a8 D000     		lsls	r0, r2, #3
 1418 00aa BA68     		ldr	r2, [r7, #8]
 1419 00ac 0243     		orrs	r2, r2, r0
 1420 00ae 0A43     		orrs	r2, r2, r1
 1421 00b0 9A60     		str	r2, [r3, #8]
 1422              	.L106:
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****    /* This RCC MCO2 enable feature is available only on STM32F410Rx devices */
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #if defined(RCC_CFGR_MCO2EN)
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_MCO2_ENABLE();
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** #endif /* RCC_CFGR_MCO2EN */
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1423              		.loc 1 936 0
 1424 00b2 3037     		adds	r7, r7, #48
 1425 00b4 BD46     		mov	sp, r7
 1426              		@ sp needed
 1427 00b6 80BD     		pop	{r7, pc}
 1428              	.L110:
 1429              		.align	2
 1430              	.L109:
 1431 00b8 00380240 		.word	1073887232
 1432 00bc 00000240 		.word	1073872896
 1433 00c0 00080240 		.word	1073874944
 1434              		.cfi_endproc
 1435              	.LFE128:
 1437              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1438              		.align	2
 1439              		.global	HAL_RCC_EnableCSS
 1440              		.thumb
 1441              		.thumb_func
 1443              	HAL_RCC_EnableCSS:
 1444              	.LFB129:
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1445              		.loc 1 948 0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 1, uses_anonymous_args = 0
 1449              		@ link register save eliminated.
 1450 0000 80B4     		push	{r7}
 1451              	.LCFI11:
 1452              		.cfi_def_cfa_offset 4
 1453              		.cfi_offset 7, -4
 1454 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cco2UtZg.s 			page 54


 1455              	.LCFI12:
 1456              		.cfi_def_cfa_register 7
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 1457              		.loc 1 949 0
 1458 0004 034B     		ldr	r3, .L112
 1459 0006 0122     		movs	r2, #1
 1460 0008 1A60     		str	r2, [r3]
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1461              		.loc 1 950 0
 1462 000a BD46     		mov	sp, r7
 1463              		@ sp needed
 1464 000c 5DF8047B 		ldr	r7, [sp], #4
 1465 0010 7047     		bx	lr
 1466              	.L113:
 1467 0012 00BF     		.align	2
 1468              	.L112:
 1469 0014 4C004742 		.word	1111949388
 1470              		.cfi_endproc
 1471              	.LFE129:
 1473              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 1474              		.align	2
 1475              		.global	HAL_RCC_DisableCSS
 1476              		.thumb
 1477              		.thumb_func
 1479              	HAL_RCC_DisableCSS:
 1480              	.LFB130:
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1481              		.loc 1 957 0
 1482              		.cfi_startproc
 1483              		@ args = 0, pretend = 0, frame = 0
 1484              		@ frame_needed = 1, uses_anonymous_args = 0
 1485              		@ link register save eliminated.
 1486 0000 80B4     		push	{r7}
 1487              	.LCFI13:
 1488              		.cfi_def_cfa_offset 4
 1489              		.cfi_offset 7, -4
 1490 0002 00AF     		add	r7, sp, #0
 1491              	.LCFI14:
 1492              		.cfi_def_cfa_register 7
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 1493              		.loc 1 958 0
 1494 0004 034B     		ldr	r3, .L115
 1495 0006 0022     		movs	r2, #0
 1496 0008 1A60     		str	r2, [r3]
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1497              		.loc 1 959 0
 1498 000a BD46     		mov	sp, r7
 1499              		@ sp needed
 1500 000c 5DF8047B 		ldr	r7, [sp], #4
 1501 0010 7047     		bx	lr
 1502              	.L116:
ARM GAS  /tmp/cco2UtZg.s 			page 55


 1503 0012 00BF     		.align	2
 1504              	.L115:
 1505 0014 4C004742 		.word	1111949388
 1506              		.cfi_endproc
 1507              	.LFE130:
 1509              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1510              		.align	2
 1511              		.weak	HAL_RCC_GetSysClockFreq
 1512              		.thumb
 1513              		.thumb_func
 1515              	HAL_RCC_GetSysClockFreq:
 1516              	.LFB131:
 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *        
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         constant and the selected clock source:
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               in voltage and temperature.
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                have wrong result.
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *                  
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         value for HSE crystal.
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *           
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *               
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval SYSCLK frequency
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak uint32_t HAL_RCC_GetSysClockFreq(void)
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1517              		.loc 1 992 0
 1518              		.cfi_startproc
 1519              		@ args = 0, pretend = 0, frame = 40
 1520              		@ frame_needed = 1, uses_anonymous_args = 0
 1521              		@ link register save eliminated.
 1522 0000 80B4     		push	{r7}
 1523              	.LCFI15:
 1524              		.cfi_def_cfa_offset 4
 1525              		.cfi_offset 7, -4
 1526 0002 8BB0     		sub	sp, sp, #44
 1527              	.LCFI16:
 1528              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/cco2UtZg.s 			page 56


 1529 0004 00AF     		add	r7, sp, #0
 1530              	.LCFI17:
 1531              		.cfi_def_cfa_register 7
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t pllm = 0, pllvco = 0, pllp = 0;
 1532              		.loc 1 993 0
 1533 0006 0023     		movs	r3, #0
 1534 0008 FB61     		str	r3, [r7, #28]
 1535 000a 0023     		movs	r3, #0
 1536 000c 7B62     		str	r3, [r7, #36]
 1537 000e 0023     		movs	r3, #0
 1538 0010 BB61     		str	r3, [r7, #24]
 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   uint32_t sysclockfreq = 0;
 1539              		.loc 1 994 0
 1540 0012 0023     		movs	r3, #0
 1541 0014 3B62     		str	r3, [r7, #32]
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 1542              		.loc 1 997 0
 1543 0016 364B     		ldr	r3, .L130
 1544 0018 9B68     		ldr	r3, [r3, #8]
 1545 001a 03F00C03 		and	r3, r3, #12
 1546 001e 042B     		cmp	r3, #4
 1547 0020 06D0     		beq	.L119
 1548 0022 082B     		cmp	r3, #8
 1549 0024 07D0     		beq	.L120
 1550 0026 002B     		cmp	r3, #0
 1551 0028 58D1     		bne	.L129
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1552              		.loc 1 1001 0
 1553 002a 324B     		ldr	r3, .L130+4
 1554 002c 3B62     		str	r3, [r7, #32]
1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****        break;
 1555              		.loc 1 1002 0
 1556 002e 58E0     		b	.L122
 1557              	.L119:
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 1558              		.loc 1 1006 0
 1559 0030 314B     		ldr	r3, .L130+8
 1560 0032 3B62     		str	r3, [r7, #32]
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 1561              		.loc 1 1007 0
 1562 0034 55E0     		b	.L122
 1563              	.L120:
1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       SYSCLK = PLL_VCO / PLLP */
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1564              		.loc 1 1013 0
ARM GAS  /tmp/cco2UtZg.s 			page 57


 1565 0036 2E4B     		ldr	r3, .L130
 1566 0038 5B68     		ldr	r3, [r3, #4]
 1567 003a 03F03F03 		and	r3, r3, #63
 1568 003e FB61     		str	r3, [r7, #28]
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 1569              		.loc 1 1014 0
 1570 0040 2B4B     		ldr	r3, .L130
 1571 0042 5B68     		ldr	r3, [r3, #4]
 1572 0044 03F48003 		and	r3, r3, #4194304
 1573 0048 002B     		cmp	r3, #0
 1574 004a 17D0     		beq	.L123
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* HSE used as PLL clock source */
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
 1575              		.loc 1 1017 0
 1576 004c 2A4A     		ldr	r2, .L130+8
 1577 004e FB69     		ldr	r3, [r7, #28]
 1578 0050 B2FBF3F2 		udiv	r2, r2, r3
 1579 0054 264B     		ldr	r3, .L130
 1580 0056 5968     		ldr	r1, [r3, #4]
 1581 0058 47F6C073 		movw	r3, #32704
 1582 005c 0B40     		ands	r3, r3, r1
 1583 005e 47F6C071 		movw	r1, #32704
 1584 0062 7961     		str	r1, [r7, #20]
 1585              	.LBB46:
 1586              	.LBB47:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 1587              		.loc 2 581 0
 1588 0064 7969     		ldr	r1, [r7, #20]
 1589              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1590 0066 91FAA1F1 		rbit r1, r1
 1591              	@ 0 "" 2
 1592              		.thumb
 1593 006a 3961     		str	r1, [r7, #16]
 1594              		.loc 2 594 0
 1595 006c 3969     		ldr	r1, [r7, #16]
 1596              	.LBE47:
 1597              	.LBE46:
 1598              		.loc 1 1017 0
 1599 006e B1FA81F1 		clz	r1, r1
 1600 0072 CB40     		lsrs	r3, r3, r1
 1601 0074 03FB02F3 		mul	r3, r3, r2
 1602 0078 7B62     		str	r3, [r7, #36]
 1603 007a 16E0     		b	.L125
 1604              	.L123:
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       else
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       {
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         /* HSI used as PLL clock source */
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****         pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCF
 1605              		.loc 1 1022 0
 1606 007c 1D4A     		ldr	r2, .L130+4
 1607 007e FB69     		ldr	r3, [r7, #28]
 1608 0080 B2FBF3F2 		udiv	r2, r2, r3
 1609 0084 1A4B     		ldr	r3, .L130
 1610 0086 5968     		ldr	r1, [r3, #4]
 1611 0088 47F6C073 		movw	r3, #32704
ARM GAS  /tmp/cco2UtZg.s 			page 58


 1612 008c 0B40     		ands	r3, r3, r1
 1613 008e 47F6C071 		movw	r1, #32704
 1614 0092 F960     		str	r1, [r7, #12]
 1615              	.LBB48:
 1616              	.LBB49:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 1617              		.loc 2 581 0
 1618 0094 F968     		ldr	r1, [r7, #12]
 1619              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1620 0096 91FAA1F1 		rbit r1, r1
 1621              	@ 0 "" 2
 1622              		.thumb
 1623 009a B960     		str	r1, [r7, #8]
 1624              		.loc 2 594 0
 1625 009c B968     		ldr	r1, [r7, #8]
 1626              	.LBE49:
 1627              	.LBE48:
 1628              		.loc 1 1022 0
 1629 009e B1FA81F1 		clz	r1, r1
 1630 00a2 CB40     		lsrs	r3, r3, r1
 1631 00a4 03FB02F3 		mul	r3, r3, r2
 1632 00a8 7B62     		str	r3, [r7, #36]
 1633              	.L125:
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       }
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 1634              		.loc 1 1024 0
 1635 00aa 114B     		ldr	r3, .L130
 1636 00ac 5B68     		ldr	r3, [r3, #4]
 1637 00ae 03F44032 		and	r2, r3, #196608
 1638 00b2 4FF44033 		mov	r3, #196608
 1639 00b6 7B60     		str	r3, [r7, #4]
 1640              	.LBB50:
 1641              	.LBB51:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 1642              		.loc 2 581 0
 1643 00b8 7B68     		ldr	r3, [r7, #4]
 1644              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1645 00ba 93FAA3F3 		rbit r3, r3
 1646              	@ 0 "" 2
 1647              		.thumb
 1648 00be 3B60     		str	r3, [r7]
 1649              		.loc 2 594 0
 1650 00c0 3B68     		ldr	r3, [r7]
 1651              	.LBE51:
 1652              	.LBE50:
 1653              		.loc 1 1024 0
 1654 00c2 B3FA83F3 		clz	r3, r3
 1655 00c6 22FA03F3 		lsr	r3, r2, r3
 1656 00ca 0133     		adds	r3, r3, #1
 1657 00cc 5B00     		lsls	r3, r3, #1
 1658 00ce BB61     		str	r3, [r7, #24]
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = pllvco/pllp;
 1659              		.loc 1 1026 0
 1660 00d0 7A6A     		ldr	r2, [r7, #36]
 1661 00d2 BB69     		ldr	r3, [r7, #24]
 1662 00d4 B2FBF3F3 		udiv	r3, r2, r3
ARM GAS  /tmp/cco2UtZg.s 			page 59


 1663 00d8 3B62     		str	r3, [r7, #32]
1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 1664              		.loc 1 1027 0
 1665 00da 02E0     		b	.L122
 1666              	.L129:
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     default:
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     {
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1667              		.loc 1 1031 0
 1668 00dc 054B     		ldr	r3, .L130+4
 1669 00de 3B62     		str	r3, [r7, #32]
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****       break;
 1670              		.loc 1 1032 0
 1671 00e0 00BF     		nop
 1672              	.L122:
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     }
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return sysclockfreq;
 1673              		.loc 1 1035 0
 1674 00e2 3B6A     		ldr	r3, [r7, #32]
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1675              		.loc 1 1036 0
 1676 00e4 1846     		mov	r0, r3
 1677 00e6 2C37     		adds	r7, r7, #44
 1678 00e8 BD46     		mov	sp, r7
 1679              		@ sp needed
 1680 00ea 5DF8047B 		ldr	r7, [sp], #4
 1681 00ee 7047     		bx	lr
 1682              	.L131:
 1683              		.align	2
 1684              	.L130:
 1685 00f0 00380240 		.word	1073887232
 1686 00f4 0024F400 		.word	16000000
 1687 00f8 00127A00 		.word	8000000
 1688              		.cfi_endproc
 1689              	.LFE131:
 1691              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1692              		.align	2
 1693              		.global	HAL_RCC_GetHCLKFreq
 1694              		.thumb
 1695              		.thumb_func
 1697              	HAL_RCC_GetHCLKFreq:
 1698              	.LFB132:
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency     
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * 
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         and updated within this function
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval HCLK frequency
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1699              		.loc 1 1048 0
ARM GAS  /tmp/cco2UtZg.s 			page 60


 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 8
 1702              		@ frame_needed = 1, uses_anonymous_args = 0
 1703 0000 80B5     		push	{r7, lr}
 1704              	.LCFI18:
 1705              		.cfi_def_cfa_offset 8
 1706              		.cfi_offset 7, -8
 1707              		.cfi_offset 14, -4
 1708 0002 82B0     		sub	sp, sp, #8
 1709              	.LCFI19:
 1710              		.cfi_def_cfa_offset 16
 1711 0004 00AF     		add	r7, sp, #0
 1712              	.LCFI20:
 1713              		.cfi_def_cfa_register 7
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POS
 1714              		.loc 1 1049 0
 1715 0006 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1716 000a 0246     		mov	r2, r0
 1717 000c 0C4B     		ldr	r3, .L135
 1718 000e 9B68     		ldr	r3, [r3, #8]
 1719 0010 03F0F001 		and	r1, r3, #240
 1720 0014 F023     		movs	r3, #240
 1721 0016 7B60     		str	r3, [r7, #4]
 1722              	.LBB52:
 1723              	.LBB53:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 1724              		.loc 2 581 0
 1725 0018 7B68     		ldr	r3, [r7, #4]
 1726              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1727 001a 93FAA3F3 		rbit r3, r3
 1728              	@ 0 "" 2
 1729              		.thumb
 1730 001e 3B60     		str	r3, [r7]
 1731              		.loc 2 594 0
 1732 0020 3B68     		ldr	r3, [r7]
 1733              	.LBE53:
 1734              	.LBE52:
 1735              		.loc 1 1049 0
 1736 0022 B3FA83F3 		clz	r3, r3
 1737 0026 21FA03F3 		lsr	r3, r1, r3
 1738 002a 0649     		ldr	r1, .L135+4
 1739 002c CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 1740 002e DA40     		lsrs	r2, r2, r3
 1741 0030 054B     		ldr	r3, .L135+8
 1742 0032 1A60     		str	r2, [r3]
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return SystemCoreClock;
 1743              		.loc 1 1050 0
 1744 0034 044B     		ldr	r3, .L135+8
 1745 0036 1B68     		ldr	r3, [r3]
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1746              		.loc 1 1051 0
 1747 0038 1846     		mov	r0, r3
 1748 003a 0837     		adds	r7, r7, #8
 1749 003c BD46     		mov	sp, r7
 1750              		@ sp needed
 1751 003e 80BD     		pop	{r7, pc}
 1752              	.L136:
ARM GAS  /tmp/cco2UtZg.s 			page 61


 1753              		.align	2
 1754              	.L135:
 1755 0040 00380240 		.word	1073887232
 1756 0044 00000000 		.word	APBAHBPrescTable
 1757 0048 00000000 		.word	SystemCoreClock
 1758              		.cfi_endproc
 1759              	.LFE132:
 1761              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1762              		.align	2
 1763              		.global	HAL_RCC_GetPCLK1Freq
 1764              		.thumb
 1765              		.thumb_func
 1767              	HAL_RCC_GetPCLK1Freq:
 1768              	.LFB133:
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency     
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval PCLK1 frequency
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {  
 1769              		.loc 1 1060 0
 1770              		.cfi_startproc
 1771              		@ args = 0, pretend = 0, frame = 8
 1772              		@ frame_needed = 1, uses_anonymous_args = 0
 1773 0000 80B5     		push	{r7, lr}
 1774              	.LCFI21:
 1775              		.cfi_def_cfa_offset 8
 1776              		.cfi_offset 7, -8
 1777              		.cfi_offset 14, -4
 1778 0002 82B0     		sub	sp, sp, #8
 1779              	.LCFI22:
 1780              		.cfi_def_cfa_offset 16
 1781 0004 00AF     		add	r7, sp, #0
 1782              	.LCFI23:
 1783              		.cfi_def_cfa_register 7
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC
 1784              		.loc 1 1062 0
 1785 0006 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1786 000a 0246     		mov	r2, r0
 1787 000c 0B4B     		ldr	r3, .L140
 1788 000e 9B68     		ldr	r3, [r3, #8]
 1789 0010 03F4E051 		and	r1, r3, #7168
 1790 0014 4FF4E053 		mov	r3, #7168
 1791 0018 7B60     		str	r3, [r7, #4]
 1792              	.LBB54:
 1793              	.LBB55:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 1794              		.loc 2 581 0
 1795 001a 7B68     		ldr	r3, [r7, #4]
 1796              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1797 001c 93FAA3F3 		rbit r3, r3
 1798              	@ 0 "" 2
 1799              		.thumb
ARM GAS  /tmp/cco2UtZg.s 			page 62


 1800 0020 3B60     		str	r3, [r7]
 1801              		.loc 2 594 0
 1802 0022 3B68     		ldr	r3, [r7]
 1803              	.LBE55:
 1804              	.LBE54:
 1805              		.loc 1 1062 0
 1806 0024 B3FA83F3 		clz	r3, r3
 1807 0028 21FA03F3 		lsr	r3, r1, r3
 1808 002c 0449     		ldr	r1, .L140+4
 1809 002e CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 1810 0030 22FA03F3 		lsr	r3, r2, r3
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 1811              		.loc 1 1063 0
 1812 0034 1846     		mov	r0, r3
 1813 0036 0837     		adds	r7, r7, #8
 1814 0038 BD46     		mov	sp, r7
 1815              		@ sp needed
 1816 003a 80BD     		pop	{r7, pc}
 1817              	.L141:
 1818              		.align	2
 1819              	.L140:
 1820 003c 00380240 		.word	1073887232
 1821 0040 00000000 		.word	APBAHBPrescTable
 1822              		.cfi_endproc
 1823              	.LFE133:
 1825              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1826              		.align	2
 1827              		.global	HAL_RCC_GetPCLK2Freq
 1828              		.thumb
 1829              		.thumb_func
 1831              	HAL_RCC_GetPCLK2Freq:
 1832              	.LFB134:
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency     
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval PCLK2 frequency
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1833              		.loc 1 1072 0
 1834              		.cfi_startproc
 1835              		@ args = 0, pretend = 0, frame = 8
 1836              		@ frame_needed = 1, uses_anonymous_args = 0
 1837 0000 80B5     		push	{r7, lr}
 1838              	.LCFI24:
 1839              		.cfi_def_cfa_offset 8
 1840              		.cfi_offset 7, -8
 1841              		.cfi_offset 14, -4
 1842 0002 82B0     		sub	sp, sp, #8
 1843              	.LCFI25:
 1844              		.cfi_def_cfa_offset 16
 1845 0004 00AF     		add	r7, sp, #0
 1846              	.LCFI26:
 1847              		.cfi_def_cfa_register 7
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
ARM GAS  /tmp/cco2UtZg.s 			page 63


1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_
 1848              		.loc 1 1074 0
 1849 0006 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1850 000a 0246     		mov	r2, r0
 1851 000c 0B4B     		ldr	r3, .L145
 1852 000e 9B68     		ldr	r3, [r3, #8]
 1853 0010 03F46041 		and	r1, r3, #57344
 1854 0014 4FF46043 		mov	r3, #57344
 1855 0018 7B60     		str	r3, [r7, #4]
 1856              	.LBB56:
 1857              	.LBB57:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 1858              		.loc 2 581 0
 1859 001a 7B68     		ldr	r3, [r7, #4]
 1860              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1861 001c 93FAA3F3 		rbit r3, r3
 1862              	@ 0 "" 2
 1863              		.thumb
 1864 0020 3B60     		str	r3, [r7]
 1865              		.loc 2 594 0
 1866 0022 3B68     		ldr	r3, [r7]
 1867              	.LBE57:
 1868              	.LBE56:
 1869              		.loc 1 1074 0
 1870 0024 B3FA83F3 		clz	r3, r3
 1871 0028 21FA03F3 		lsr	r3, r1, r3
 1872 002c 0449     		ldr	r1, .L145+4
 1873 002e CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 1874 0030 22FA03F3 		lsr	r3, r2, r3
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** } 
 1875              		.loc 1 1075 0
 1876 0034 1846     		mov	r0, r3
 1877 0036 0837     		adds	r7, r7, #8
 1878 0038 BD46     		mov	sp, r7
 1879              		@ sp needed
 1880 003a 80BD     		pop	{r7, pc}
 1881              	.L146:
 1882              		.align	2
 1883              	.L145:
 1884 003c 00380240 		.word	1073887232
 1885 0040 00000000 		.word	APBAHBPrescTable
 1886              		.cfi_endproc
 1887              	.LFE134:
 1889              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1890              		.align	2
 1891              		.weak	HAL_RCC_GetOscConfig
 1892              		.thumb
 1893              		.thumb_func
 1895              	HAL_RCC_GetOscConfig:
 1896              	.LFB135:
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal 
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * RCC configuration registers.
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * will be configured.
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
ARM GAS  /tmp/cco2UtZg.s 			page 64


1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 1897              		.loc 1 1085 0
 1898              		.cfi_startproc
 1899              		@ args = 0, pretend = 0, frame = 40
 1900              		@ frame_needed = 1, uses_anonymous_args = 0
 1901              		@ link register save eliminated.
 1902 0000 80B4     		push	{r7}
 1903              	.LCFI27:
 1904              		.cfi_def_cfa_offset 4
 1905              		.cfi_offset 7, -4
 1906 0002 8BB0     		sub	sp, sp, #44
 1907              	.LCFI28:
 1908              		.cfi_def_cfa_offset 48
 1909 0004 00AF     		add	r7, sp, #0
 1910              	.LCFI29:
 1911              		.cfi_def_cfa_register 7
 1912 0006 7860     		str	r0, [r7, #4]
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
 1913              		.loc 1 1087 0
 1914 0008 7B68     		ldr	r3, [r7, #4]
 1915 000a 0F22     		movs	r2, #15
 1916 000c 1A60     		str	r2, [r3]
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1917              		.loc 1 1090 0
 1918 000e 574B     		ldr	r3, .L164
 1919 0010 1B68     		ldr	r3, [r3]
 1920 0012 03F48023 		and	r3, r3, #262144
 1921 0016 002B     		cmp	r3, #0
 1922 0018 03D0     		beq	.L148
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1923              		.loc 1 1092 0
 1924 001a 7B68     		ldr	r3, [r7, #4]
 1925 001c 0522     		movs	r2, #5
 1926 001e 5A60     		str	r2, [r3, #4]
 1927 0020 0CE0     		b	.L149
 1928              	.L148:
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 1929              		.loc 1 1094 0
 1930 0022 524B     		ldr	r3, .L164
 1931 0024 1B68     		ldr	r3, [r3]
 1932 0026 03F48033 		and	r3, r3, #65536
 1933 002a 002B     		cmp	r3, #0
 1934 002c 03D0     		beq	.L150
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 1935              		.loc 1 1096 0
 1936 002e 7B68     		ldr	r3, [r7, #4]
 1937 0030 0122     		movs	r2, #1
 1938 0032 5A60     		str	r2, [r3, #4]
 1939 0034 02E0     		b	.L149
ARM GAS  /tmp/cco2UtZg.s 			page 65


 1940              	.L150:
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 1941              		.loc 1 1100 0
 1942 0036 7B68     		ldr	r3, [r7, #4]
 1943 0038 0022     		movs	r2, #0
 1944 003a 5A60     		str	r2, [r3, #4]
 1945              	.L149:
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 1946              		.loc 1 1104 0
 1947 003c 4B4B     		ldr	r3, .L164
 1948 003e 1B68     		ldr	r3, [r3]
 1949 0040 03F00103 		and	r3, r3, #1
 1950 0044 002B     		cmp	r3, #0
 1951 0046 03D0     		beq	.L151
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1952              		.loc 1 1106 0
 1953 0048 7B68     		ldr	r3, [r7, #4]
 1954 004a 0122     		movs	r2, #1
 1955 004c DA60     		str	r2, [r3, #12]
 1956 004e 02E0     		b	.L152
 1957              	.L151:
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 1958              		.loc 1 1110 0
 1959 0050 7B68     		ldr	r3, [r7, #4]
 1960 0052 0022     		movs	r2, #0
 1961 0054 DA60     		str	r2, [r3, #12]
 1962              	.L152:
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC
 1963              		.loc 1 1113 0
 1964 0056 454B     		ldr	r3, .L164
 1965 0058 1B68     		ldr	r3, [r3]
 1966 005a 03F0F802 		and	r2, r3, #248
 1967 005e F823     		movs	r3, #248
 1968 0060 7B62     		str	r3, [r7, #36]
 1969              	.LBB58:
 1970              	.LBB59:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 1971              		.loc 2 581 0
 1972 0062 7B6A     		ldr	r3, [r7, #36]
 1973              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 1974 0064 93FAA3F3 		rbit r3, r3
 1975              	@ 0 "" 2
 1976              		.thumb
 1977 0068 3B62     		str	r3, [r7, #32]
 1978              		.loc 2 594 0
ARM GAS  /tmp/cco2UtZg.s 			page 66


 1979 006a 3B6A     		ldr	r3, [r7, #32]
 1980              	.LBE59:
 1981              	.LBE58:
 1982              		.loc 1 1113 0
 1983 006c B3FA83F3 		clz	r3, r3
 1984 0070 DA40     		lsrs	r2, r2, r3
 1985 0072 7B68     		ldr	r3, [r7, #4]
 1986 0074 1A61     		str	r2, [r3, #16]
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 1987              		.loc 1 1116 0
 1988 0076 3D4B     		ldr	r3, .L164
 1989 0078 1B6F     		ldr	r3, [r3, #112]
 1990 007a 03F00403 		and	r3, r3, #4
 1991 007e 002B     		cmp	r3, #0
 1992 0080 03D0     		beq	.L154
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 1993              		.loc 1 1118 0
 1994 0082 7B68     		ldr	r3, [r7, #4]
 1995 0084 0522     		movs	r2, #5
 1996 0086 9A60     		str	r2, [r3, #8]
 1997 0088 0CE0     		b	.L155
 1998              	.L154:
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 1999              		.loc 1 1120 0
 2000 008a 384B     		ldr	r3, .L164
 2001 008c 1B6F     		ldr	r3, [r3, #112]
 2002 008e 03F00103 		and	r3, r3, #1
 2003 0092 002B     		cmp	r3, #0
 2004 0094 03D0     		beq	.L156
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 2005              		.loc 1 1122 0
 2006 0096 7B68     		ldr	r3, [r7, #4]
 2007 0098 0122     		movs	r2, #1
 2008 009a 9A60     		str	r2, [r3, #8]
 2009 009c 02E0     		b	.L155
 2010              	.L156:
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 2011              		.loc 1 1126 0
 2012 009e 7B68     		ldr	r3, [r7, #4]
 2013 00a0 0022     		movs	r2, #0
 2014 00a2 9A60     		str	r2, [r3, #8]
 2015              	.L155:
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 2016              		.loc 1 1130 0
 2017 00a4 314B     		ldr	r3, .L164
 2018 00a6 5B6F     		ldr	r3, [r3, #116]
ARM GAS  /tmp/cco2UtZg.s 			page 67


 2019 00a8 03F00103 		and	r3, r3, #1
 2020 00ac 002B     		cmp	r3, #0
 2021 00ae 03D0     		beq	.L157
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 2022              		.loc 1 1132 0
 2023 00b0 7B68     		ldr	r3, [r7, #4]
 2024 00b2 0122     		movs	r2, #1
 2025 00b4 5A61     		str	r2, [r3, #20]
 2026 00b6 02E0     		b	.L158
 2027              	.L157:
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 2028              		.loc 1 1136 0
 2029 00b8 7B68     		ldr	r3, [r7, #4]
 2030 00ba 0022     		movs	r2, #0
 2031 00bc 5A61     		str	r2, [r3, #20]
 2032              	.L158:
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 2033              		.loc 1 1140 0
 2034 00be 2B4B     		ldr	r3, .L164
 2035 00c0 1B68     		ldr	r3, [r3]
 2036 00c2 03F08073 		and	r3, r3, #16777216
 2037 00c6 002B     		cmp	r3, #0
 2038 00c8 03D0     		beq	.L159
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 2039              		.loc 1 1142 0
 2040 00ca 7B68     		ldr	r3, [r7, #4]
 2041 00cc 0222     		movs	r2, #2
 2042 00ce 9A61     		str	r2, [r3, #24]
 2043 00d0 02E0     		b	.L160
 2044              	.L159:
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   else
1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 2045              		.loc 1 1146 0
 2046 00d2 7B68     		ldr	r3, [r7, #4]
 2047 00d4 0122     		movs	r2, #1
 2048 00d6 9A61     		str	r2, [r3, #24]
 2049              	.L160:
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 2050              		.loc 1 1148 0
 2051 00d8 244B     		ldr	r3, .L164
 2052 00da 5B68     		ldr	r3, [r3, #4]
 2053 00dc 03F48002 		and	r2, r3, #4194304
 2054 00e0 7B68     		ldr	r3, [r7, #4]
 2055 00e2 DA61     		str	r2, [r3, #28]
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 2056              		.loc 1 1149 0
ARM GAS  /tmp/cco2UtZg.s 			page 68


 2057 00e4 214B     		ldr	r3, .L164
 2058 00e6 5B68     		ldr	r3, [r3, #4]
 2059 00e8 03F03F02 		and	r2, r3, #63
 2060 00ec 7B68     		ldr	r3, [r7, #4]
 2061 00ee 1A62     		str	r2, [r3, #32]
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PL
 2062              		.loc 1 1150 0
 2063 00f0 1E4B     		ldr	r3, .L164
 2064 00f2 5A68     		ldr	r2, [r3, #4]
 2065 00f4 47F6C073 		movw	r3, #32704
 2066 00f8 1340     		ands	r3, r3, r2
 2067 00fa 47F6C072 		movw	r2, #32704
 2068 00fe FA61     		str	r2, [r7, #28]
 2069              	.LBB60:
 2070              	.LBB61:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 2071              		.loc 2 581 0
 2072 0100 FA69     		ldr	r2, [r7, #28]
 2073              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 2074 0102 92FAA2F2 		rbit r2, r2
 2075              	@ 0 "" 2
 2076              		.thumb
 2077 0106 BA61     		str	r2, [r7, #24]
 2078              		.loc 2 594 0
 2079 0108 BA69     		ldr	r2, [r7, #24]
 2080              	.LBE61:
 2081              	.LBE60:
 2082              		.loc 1 1150 0
 2083 010a B2FA82F2 		clz	r2, r2
 2084 010e 23FA02F2 		lsr	r2, r3, r2
 2085 0112 7B68     		ldr	r3, [r7, #4]
 2086 0114 5A62     		str	r2, [r3, #36]
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0
 2087              		.loc 1 1151 0
 2088 0116 154B     		ldr	r3, .L164
 2089 0118 5B68     		ldr	r3, [r3, #4]
 2090 011a 03F44033 		and	r3, r3, #196608
 2091 011e 03F58033 		add	r3, r3, #65536
 2092 0122 5A00     		lsls	r2, r3, #1
 2093 0124 4FF44033 		mov	r3, #196608
 2094 0128 7B61     		str	r3, [r7, #20]
 2095              	.LBB62:
 2096              	.LBB63:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 2097              		.loc 2 581 0
 2098 012a 7B69     		ldr	r3, [r7, #20]
 2099              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 2100 012c 93FAA3F3 		rbit r3, r3
 2101              	@ 0 "" 2
 2102              		.thumb
 2103 0130 3B61     		str	r3, [r7, #16]
 2104              		.loc 2 594 0
 2105 0132 3B69     		ldr	r3, [r7, #16]
 2106              	.LBE63:
 2107              	.LBE62:
 2108              		.loc 1 1151 0
 2109 0134 B3FA83F3 		clz	r3, r3
ARM GAS  /tmp/cco2UtZg.s 			page 69


 2110 0138 DA40     		lsrs	r2, r2, r3
 2111 013a 7B68     		ldr	r3, [r7, #4]
 2112 013c 9A62     		str	r2, [r3, #40]
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PL
 2113              		.loc 1 1152 0
 2114 013e 0B4B     		ldr	r3, .L164
 2115 0140 5B68     		ldr	r3, [r3, #4]
 2116 0142 03F07062 		and	r2, r3, #251658240
 2117 0146 4FF07063 		mov	r3, #251658240
 2118 014a FB60     		str	r3, [r7, #12]
 2119              	.LBB64:
 2120              	.LBB65:
 581:Drivers/CMSIS/Include/core_cmInstr.h **** #else
 2121              		.loc 2 581 0
 2122 014c FB68     		ldr	r3, [r7, #12]
 2123              	@ 581 "Drivers/CMSIS/Include/core_cmInstr.h" 1
 2124 014e 93FAA3F3 		rbit r3, r3
 2125              	@ 0 "" 2
 2126              		.thumb
 2127 0152 BB60     		str	r3, [r7, #8]
 2128              		.loc 2 594 0
 2129 0154 BB68     		ldr	r3, [r7, #8]
 2130              	.LBE65:
 2131              	.LBE64:
 2132              		.loc 1 1152 0
 2133 0156 B3FA83F3 		clz	r3, r3
 2134 015a DA40     		lsrs	r2, r2, r3
 2135 015c 7B68     		ldr	r3, [r7, #4]
 2136 015e DA62     		str	r2, [r3, #44]
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 2137              		.loc 1 1153 0
 2138 0160 2C37     		adds	r7, r7, #44
 2139 0162 BD46     		mov	sp, r7
 2140              		@ sp needed
 2141 0164 5DF8047B 		ldr	r7, [sp], #4
 2142 0168 7047     		bx	lr
 2143              	.L165:
 2144 016a 00BF     		.align	2
 2145              	.L164:
 2146 016c 00380240 		.word	1073887232
 2147              		.cfi_endproc
 2148              	.LFE135:
 2150              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 2151              		.align	2
 2152              		.global	HAL_RCC_GetClockConfig
 2153              		.thumb
 2154              		.thumb_func
 2156              	HAL_RCC_GetClockConfig:
 2157              	.LFB136:
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  Configures the RCC_ClkInitStruct according to the internal 
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * RCC configuration registers.
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct: pointer to an RCC_ClkInitTypeDef structure that 
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * will be configured.
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @param  pFLatency: Pointer on the Flash Latency.
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
ARM GAS  /tmp/cco2UtZg.s 			page 70


1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 2158              		.loc 1 1164 0
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 8
 2161              		@ frame_needed = 1, uses_anonymous_args = 0
 2162              		@ link register save eliminated.
 2163 0000 80B4     		push	{r7}
 2164              	.LCFI30:
 2165              		.cfi_def_cfa_offset 4
 2166              		.cfi_offset 7, -4
 2167 0002 83B0     		sub	sp, sp, #12
 2168              	.LCFI31:
 2169              		.cfi_def_cfa_offset 16
 2170 0004 00AF     		add	r7, sp, #0
 2171              	.LCFI32:
 2172              		.cfi_def_cfa_register 7
 2173 0006 7860     		str	r0, [r7, #4]
 2174 0008 3960     		str	r1, [r7]
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 2175              		.loc 1 1166 0
 2176 000a 7B68     		ldr	r3, [r7, #4]
 2177 000c 0F22     		movs	r2, #15
 2178 000e 1A60     		str	r2, [r3]
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****    
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/ 
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 2179              		.loc 1 1169 0
 2180 0010 114B     		ldr	r3, .L167
 2181 0012 9B68     		ldr	r3, [r3, #8]
 2182 0014 03F00302 		and	r2, r3, #3
 2183 0018 7B68     		ldr	r3, [r7, #4]
 2184 001a 5A60     		str	r2, [r3, #4]
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/ 
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 2185              		.loc 1 1172 0
 2186 001c 0E4B     		ldr	r3, .L167
 2187 001e 9B68     		ldr	r3, [r3, #8]
 2188 0020 03F0F002 		and	r2, r3, #240
 2189 0024 7B68     		ldr	r3, [r7, #4]
 2190 0026 9A60     		str	r2, [r3, #8]
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/ 
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 2191              		.loc 1 1175 0
 2192 0028 0B4B     		ldr	r3, .L167
 2193 002a 9B68     		ldr	r3, [r3, #8]
 2194 002c 03F4E052 		and	r2, r3, #7168
 2195 0030 7B68     		ldr	r3, [r7, #4]
 2196 0032 DA60     		str	r2, [r3, #12]
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/ 
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 2197              		.loc 1 1178 0
ARM GAS  /tmp/cco2UtZg.s 			page 71


 2198 0034 084B     		ldr	r3, .L167
 2199 0036 9B68     		ldr	r3, [r3, #8]
 2200 0038 03F46043 		and	r3, r3, #57344
 2201 003c DA08     		lsrs	r2, r3, #3
 2202 003e 7B68     		ldr	r3, [r7, #4]
 2203 0040 1A61     		str	r2, [r3, #16]
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/   
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 2204              		.loc 1 1181 0
 2205 0042 064B     		ldr	r3, .L167+4
 2206 0044 1B68     		ldr	r3, [r3]
 2207 0046 03F00F02 		and	r2, r3, #15
 2208 004a 3B68     		ldr	r3, [r7]
 2209 004c 1A60     		str	r2, [r3]
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 2210              		.loc 1 1182 0
 2211 004e 0C37     		adds	r7, r7, #12
 2212 0050 BD46     		mov	sp, r7
 2213              		@ sp needed
 2214 0052 5DF8047B 		ldr	r7, [sp], #4
 2215 0056 7047     		bx	lr
 2216              	.L168:
 2217              		.align	2
 2218              	.L167:
 2219 0058 00380240 		.word	1073887232
 2220 005c 003C0240 		.word	1073888256
 2221              		.cfi_endproc
 2222              	.LFE136:
 2224              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 2225              		.align	2
 2226              		.global	HAL_RCC_NMI_IRQHandler
 2227              		.thumb
 2228              		.thumb_func
 2230              	HAL_RCC_NMI_IRQHandler:
 2231              	.LFB137:
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 2232              		.loc 1 1190 0
 2233              		.cfi_startproc
 2234              		@ args = 0, pretend = 0, frame = 0
 2235              		@ frame_needed = 1, uses_anonymous_args = 0
 2236 0000 80B5     		push	{r7, lr}
 2237              	.LCFI33:
 2238              		.cfi_def_cfa_offset 8
 2239              		.cfi_offset 7, -8
 2240              		.cfi_offset 14, -4
 2241 0002 00AF     		add	r7, sp, #0
 2242              	.LCFI34:
 2243              		.cfi_def_cfa_register 7
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
ARM GAS  /tmp/cco2UtZg.s 			page 72


1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 2244              		.loc 1 1192 0
 2245 0004 054B     		ldr	r3, .L171
 2246 0006 DB68     		ldr	r3, [r3, #12]
 2247 0008 03F08003 		and	r3, r3, #128
 2248 000c 002B     		cmp	r3, #0
 2249 000e 04D0     		beq	.L169
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   {
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
 2250              		.loc 1 1195 0
 2251 0010 FFF7FEFF 		bl	HAL_RCC_CSSCallback
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2252              		.loc 1 1198 0
 2253 0014 024B     		ldr	r3, .L171+4
 2254 0016 8022     		movs	r2, #128
 2255 0018 1A70     		strb	r2, [r3]
 2256              	.L169:
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   }
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 2257              		.loc 1 1200 0
 2258 001a 80BD     		pop	{r7, pc}
 2259              	.L172:
 2260              		.align	2
 2261              	.L171:
 2262 001c 00380240 		.word	1073887232
 2263 0020 0E380240 		.word	1073887246
 2264              		.cfi_endproc
 2265              	.LFE137:
 2267              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 2268              		.align	2
 2269              		.weak	HAL_RCC_CSSCallback
 2270              		.thumb
 2271              		.thumb_func
 2273              	HAL_RCC_CSSCallback:
 2274              	.LFB138:
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** 
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** /**
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   * @retval None
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   */
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** {
 2275              		.loc 1 1207 0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 0
 2278              		@ frame_needed = 1, uses_anonymous_args = 0
 2279              		@ link register save eliminated.
 2280 0000 80B4     		push	{r7}
 2281              	.LCFI35:
 2282              		.cfi_def_cfa_offset 4
 2283              		.cfi_offset 7, -4
 2284 0002 00AF     		add	r7, sp, #0
 2285              	.LCFI36:
 2286              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cco2UtZg.s 			page 73


1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****             the HAL_RCC_CSSCallback could be implemented in the user file
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c ****    */ 
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c **** }
 2287              		.loc 1 1211 0
 2288 0004 BD46     		mov	sp, r7
 2289              		@ sp needed
 2290 0006 5DF8047B 		ldr	r7, [sp], #4
 2291 000a 7047     		bx	lr
 2292              		.cfi_endproc
 2293              	.LFE138:
 2295              		.text
 2296              	.Letext0:
 2297              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2298              		.file 4 "/usr/include/newlib/stdint.h"
 2299              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 2300              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 2301              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2302              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 2303              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 2304              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2305              		.file 11 "Drivers/CMSIS/Include/core_cm4.h"
 2306              		.file 12 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
ARM GAS  /tmp/cco2UtZg.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_rcc.c
     /tmp/cco2UtZg.s:24     .rodata.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
     /tmp/cco2UtZg.s:21     .rodata.APBAHBPrescTable:0000000000000000 $d
     /tmp/cco2UtZg.s:42     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/cco2UtZg.s:47     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/cco2UtZg.s:71     .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/cco2UtZg.s:76     .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/cco2UtZg.s:504    .text.HAL_RCC_OscConfig:00000000000002a4 $d
     /tmp/cco2UtZg.s:511    .text.HAL_RCC_OscConfig:00000000000002b8 $t
     /tmp/cco2UtZg.s:796    .text.HAL_RCC_OscConfig:000000000000047c $d
     /tmp/cco2UtZg.s:804    .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/cco2UtZg.s:809    .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/cco2UtZg.s:1224   .text.HAL_RCC_ClockConfig:0000000000000298 $d
     /tmp/cco2UtZg.s:1228   .text.HAL_RCC_ClockConfig:00000000000002a0 $t
     /tmp/cco2UtZg.s:1298   .text.HAL_RCC_ClockConfig:0000000000000314 $d
     /tmp/cco2UtZg.s:1304   .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/cco2UtZg.s:1309   .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/cco2UtZg.s:1431   .text.HAL_RCC_MCOConfig:00000000000000b8 $d
     /tmp/cco2UtZg.s:1438   .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/cco2UtZg.s:1443   .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/cco2UtZg.s:1469   .text.HAL_RCC_EnableCSS:0000000000000014 $d
     /tmp/cco2UtZg.s:1474   .text.HAL_RCC_DisableCSS:0000000000000000 $t
     /tmp/cco2UtZg.s:1479   .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
     /tmp/cco2UtZg.s:1505   .text.HAL_RCC_DisableCSS:0000000000000014 $d
     /tmp/cco2UtZg.s:1510   .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/cco2UtZg.s:1515   .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/cco2UtZg.s:1685   .text.HAL_RCC_GetSysClockFreq:00000000000000f0 $d
     /tmp/cco2UtZg.s:1692   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/cco2UtZg.s:1697   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/cco2UtZg.s:1755   .text.HAL_RCC_GetHCLKFreq:0000000000000040 $d
     /tmp/cco2UtZg.s:1762   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/cco2UtZg.s:1767   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/cco2UtZg.s:1820   .text.HAL_RCC_GetPCLK1Freq:000000000000003c $d
     /tmp/cco2UtZg.s:1826   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/cco2UtZg.s:1831   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/cco2UtZg.s:1884   .text.HAL_RCC_GetPCLK2Freq:000000000000003c $d
     /tmp/cco2UtZg.s:1890   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/cco2UtZg.s:1895   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/cco2UtZg.s:2146   .text.HAL_RCC_GetOscConfig:000000000000016c $d
     /tmp/cco2UtZg.s:2151   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/cco2UtZg.s:2156   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/cco2UtZg.s:2219   .text.HAL_RCC_GetClockConfig:0000000000000058 $d
     /tmp/cco2UtZg.s:2225   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/cco2UtZg.s:2230   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/cco2UtZg.s:2273   .text.HAL_RCC_CSSCallback:0000000000000000 HAL_RCC_CSSCallback
     /tmp/cco2UtZg.s:2262   .text.HAL_RCC_NMI_IRQHandler:000000000000001c $d
     /tmp/cco2UtZg.s:2268   .text.HAL_RCC_CSSCallback:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
HAL_GPIO_Init
SystemCoreClock
